<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/zh/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/zh/" rel="alternate" type="text/html" /><updated>2024-06-24T15:33:43+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">UTF-16 Encoding and Decoding Algorithm</title><link href="https://hemimorphite.github.io/zh/2024/06/24/utf-16-encoding-and-decoding-algorithm/" rel="alternate" type="text/html" title="UTF-16 Encoding and Decoding Algorithm" /><published>2024-06-24T12:51:00+00:00</published><updated>2024-06-24T12:51:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/24/utf-16-encoding-and-decoding-algorithm</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/24/utf-16-encoding-and-decoding-algorithm/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">UTF-16 Encoding and Decoding Algorithm</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 24, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/unicode.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>In computer systems, characters are transformed and stored as numbers (sequences of bits) that can be handled by the processor. A code page is an encoding scheme that maps a specific sequence of bits to its character representation. Before Unicode, there were hundreds of different encoding schemes that assigned a number to each letter or character. Many such schemes included code pages that contained only 256 characters – each character requiring 8 bits of storage. While this was relatively compact, it was insufficient to hold ideographic character sets containing thousands of characters such as Chinese and Japanese, and also did not allow the character sets of many languages to co-exist with each other.</p>

        <p>Unicode is an attempt to include all the different schemes into one universal text-encoding standard.</p>

        <p>Unicode represents each individual character as a unique code point with a unique number. For example, the character <b>A</b> – <b>Latin Capital Letter A</b> – is represented as <b>U+0041</b> and the Hiragana <b>ふ</b> is <b>U+3075</b>.</p>

        <p>An individual Unicode code point is expressed as <b>U+n</b>, where <b>n</b> is four to six hexadecimal digits, using the digits <b>0–9</b> and uppercase letters <b>A–F</b> (for 10 through 15, respectively). Leading zeros are omitted, unless the code point would have fewer than four hexadecimal digits. For example, <b>U+0001</b>, <b>U+0012</b>, <b>U+0123</b>, <b>U+1234</b>, <b>U+12345</b>, <b>U+102345</b>.</p>

        <p>The Unicode code space is divided into seventeen planes (the basic multilingual plane, and 16 supplementary planes), each with 65,536 code points. Thus the total size of the Unicode code space is 17 × 65,536 = 1,114,112.</p>

        <p>The first plane is called the Basic Multilingual Plane or BMP. It contains the code points from <b>U+0000</b> to <b>U+FFFF</b>, which are the most frequently used characters.</p>

        <p>Unicode also defines multiple encodings of its single character set: <b>UTF-8</b>, <b>UTF-16</b>, and <b>UTF-32</b>.</p>

        <h5 class="post-subtitle">UTF-16 Encoding</h5>

        <p>UTF-16 is a character encoding that maps code points of Unicode character to a sequence of one 16-bit code unit or two 16-bit code units. UTF-16 uses a 16-bit code unit, or two 16-bit code units to represent a unicode character.</p>

        <p>Code unit is a value that encoded code point to 8/16/32 bits to store/transmit Unicode text efficiently on a computer.</p>

        <p>When representing characters in UTF-16, each code point is represented by a sequence of one or two 16-bit code units. The number of bytes used depends on the code point being represented by the character. Here's a breakdown of the usage range:</p>

        <ul>
            <li>code points in Basic Multilingual Plane (BMP) from the range <b>U+0000 - U+D7FF (0-55295)</b> and <b>U+E000 - U+FFFF (57344-65535)</b> are represented by two bytes</li>
            <li>code points in other 16 supplementary planes from the range <b>U+010000 - U+10FFFF (65536-1114111)</b> are represented by four bytes</li>
        </ul>

        <p>To encode characters outside the BMP, (e.g. U+29E3D, Japanese Kanji of Okhotsk Atka mackerel, 𩸽) UTF-16 encodes it using two 16-bit code units. This is called a surrogate pair.</p>

        <p>The Unicode standard reserves BMP in the range from <b>U+D800</b> to <b>U+DFFF</b> for surrogate pairs (this means that those code points are not assigned to any characters).</p>

        <p><b>U+D800</b> - <b>U+DBFF</b> is known as high-surrogates, and <b>U+DC00</b> - <b>U+DFFF</b> is known as low-surrogates. The first code unit of a surrogate pair is always in high-surrogates, and the second is always in low-surrogates.</p>

        <p>The algorithm to convert a unicode code point to UTF-16 sequence is as follows:</p>

        <ol>
            <li>
                If the code point is between <b>U+0000</b> and <b>U+D7FF</b> or between <b>U+E000</b> and <b>U+FFFF</b>, it is encoded in a single 16-bit code unit.<br>
                To encode a code point from <b>U+0000</b> to <b>U+D7FF</b> and <b>U+E000</b> to <b>U+FFFF</b> into UTF-16, you can simply represent the code point as UTF-16 sequence.<br>

                For example, to encode the code point <b>U+4E80</b>, just simply represent the code point as UTF-16 sequence that is <b>0x4E80</b>.
            </li>
            <li>If the code point is between U+010000 and U+10FFFF, it is encoded in two 16-bit code units.<br>
                <ul>
                    <li><b>Step 1</b>: perform subtraction operation on the code point by 0x10000</li>
                    <li><b>Step 2</b>: get the high-surrogate code unit of UTF-16 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the result of step 1 by 10 bits</li>
                            <li><b>Substep 2</b>: perform addition operation between the result of substep 1 with 0xD800 (0b11011000 00000000)</li>
                            <li><b>Substep 3</b>: the high-surrogate code unit of UTF-16 sequence is the result of substep 2</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the second low-surrogate code unit of UTF-16 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform masking using AND operator between the result of step 1 with 0x3FF (0b0011 11111111) to extract the trailing 10 bits of the code point</li>
                            <li><b>Substep 2</b>: perform adding operation between the result of substep 1 with 0xDC00 (0b11011100 00000000)</li>
                            <li><b>Substep 3</b>: the low-surrogate code unit of UTF-16 sequence is the result of substep 2</li>
                        </ul>
                    </li>
                    <li>
                        <b>Final step</b>: combine the result of step 1 and the result of step 2 to form a UTF-16 sequence.
                    </li>
                </ul>
                
                <br>
                For example, encode the code point <b>U+1F6A9</b> to the UTF-16 sequence:<br>

                <ul>
                    <li><b>Step 1</b>: 0x1F6A9 - 0x10000 = 0xF6A9</li>
                    <li><b>Step 2</b>: get the high-surrogate code unit of UTF-16 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0xF6A9 >> 10 = 0x3D</li>
                            <li><b>Substep 2</b>: 0x3D + 0xD800 = 0xD83D</li>
                            <li><b>Substep 3</b>: the high-surrogate code unit = 0xD83D</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the second low-surrogate code unit of UTF-16 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0xF6A9 & 0x3FF = 0x02A9</li>
                            <li><b>Substep 2</b>: 0x02A9 + 0xDC00 = 0xDEA9</li>
                            <li><b>Substep 3</b>: the low-surrogate code unit = 0xDEA9</li>
                        </ul>
                    </li>
                    <li>
                        <b>Final step</b>: combine the UTF-16 sequence of the code point <b>U+1F6A9</b> is 0xD83DDEA9.
                    </li>
                </ul>
            </li>
        </ol>

        <p>The following table summarizes the conversion code points to UTF-16 sequence:</p>

        <table class="table table-bordered border-primary">
            <tbody>
                <tr>
                    <th colspan="2">Character </th>
                    <th>Binary code point </th>
                    <th>Binary UTF-16 </th>
                    <th>UTF-16 hex <br>code units </th>
                    <th>UTF-16BE <br>hex bytes </th>
                    <th>UTF-16LE <br>hex bytes </th>
                </tr>
                <tr>
                    <td>
                        $
                    </td>
                    <td>
                        U+0024
                    </td>
                    <td align="right">
                        <span style="color: #000092;">0000 0000 0010 0100</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">0000 0000 0010 0100</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">0024</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">00 24</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">24 00</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        €
                    </td>
                    <td>
                        U+20AC
                    </td>
                    <td align="right">
                        <span style="color: #000092;">0010 0000 1010 1100</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">0010 0000 1010 1100</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">20AC</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">20 AC</span>
                    </td>
                    <td align="right">
                        <span style="color: #000092;">AC 20</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        𐐷
                    </td>
                    <td>
                        U+10437
                    </td>
                    <td align="right">
                        <span style="color: #920000;">0001 0000 01</span><span style="color: #000092;">00 0011 0111</span>
                    </td>
                    <td align="right">
                        1101 10<span style="color: #920000;">00 0000 0001</span> 1101 11 <span style="color: #000092;">00 0011 0111</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">D801</span>
                        <span style="color: #000092;">DC37</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">D8 01</span>
                        <span style="color: #000092;">DC 37</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">01 D8</span>
                        <span style="color: #000092;">37 DC</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        𤭢
                    </td>
                    <td>
                        U+24B62
                    </td>
                    <td align="right">
                        <span style="color: #920000;">0010 0100 10</span><span style="color: #000092;">11 0110 0010</span>
                    </td>
                    <td align="right">
                        1101 10 <span style="color: #920000;">00 0101 0010</span> 1101 11 <span style="color: #000092;">11 0110 0010</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">D852</span>
                        <span style="color: #000092;">DF62</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">D8 52</span>
                        <span style="color: #000092;">DF 62</span>
                    </td>
                    <td align="right">
                        <span style="color: #920000;">52 D8</span>
                        <span style="color: #000092;">62 DF</span>
                    </td>
                </tr>
            </tbody>
        </table>

        <h5 class="post-subtitle">UTF-16 Decoding</h5>

        <p>The algorithm to convert UTF-16 sequence to a unicode code point is as follows:</p>

        <ol>
            <li>
                If the UTF-16 sequence is between <b>0x0000</b> and <b>0xD7FF</b> or between <b>0xE000</b> and <b>0xFFFF</b>:<br>

                To decode a UTF-16 sequence from <b>0x0000</b> to <b>0xD7FF</b> and <b>0xE000</b> to <b>0xFFFF</b> into a code point, you can simply represent the UTF-16 sequence as the code point.<br>

                For example, to decode the code point <b>0x4E80</b>, just simply represent the UTF-16 sequence as the code point that is <b>U+4E80</b>.
            </li>
            <li>
                If the UTF-16 sequence is between <b>U+D800</b> and <b>U+DFFF</b>, it is a surrogate pair that consists of a high surrogate and a low surrogate.<br>
                <ul>
                    <li><b>Step 1</b>: decode the high-surrogate code unit of UTF-16 sequence where the high-surrogate code unit must be between <b>U+D800</b> and <b>U+DBFF</b><br>
                        <ul>
                            <li><b>Substep 1</b>: perform subtraction operation on the high-surrogate code unit by 0xD800</li>
                            <li><b>Substep 3</b>: perform the left shift operation on the reesult of substep 1 by 10 bits</li>
                            <li><b>Substep 4</b>: the decoded high-surrogate code unit is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second 16-bit code unit (low-surrogate code unit) of UTF-16 sequence which is between <b>U+DC00</b> and <b>U+DFFF</b><br>
                        <ul>
                            <li><b>Substep 1</b>: perform subtraction operation on the low-surrogate code unit by 0xDC00</li>
                            <li><b>Substep 2</b>: the decoded low-surrogate code unit is the result of substep 1</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: perform addition operation among the result of step 1, the result of step 2 and 0x10000 to get the code point</li>
                    <li><b>Final step</b>: the code point is the result of step 3</li>
                </ul>
                
                <br>
                For example, decode the the UTF-16 sequence <b>0xD87DDEA9</b>:<br>

                <ul>
                    <li><b>Step 1</b>: decode the high-surrogate code unit of UTF-16 sequence where the high-surrogate code unit must be between <b>U+D800</b> and <b>U+DBFF</b><br>
                        <ul>
                            <li><b>Substep 1</b>: 0xD87D - 0xD800 = 0x007D</li>
                            <li><b>Substep 3</b>: 0x007D << 10 = 0xF400</li>
                            <li><b>Substep 4</b>: the decoded high-surrogate code unit = 0xF400</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second 16-bit code unit (low-surrogate code unit) of UTF-16 sequence which is between <b>U+DC00</b> and <b>U+DFFF</b><br>
                        <ul>
                            <li><b>Substep 1</b>: 0xDEA9 - 0xDC00 = 0x02A9</li>
                            <li><b>Substep 2</b>: the decoded low-surrogate code unit = 0x02A9</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: 0xF400 + 0x02A9 + 0x10000 = 0x1F6A9</li>
                    <li><b>Final step</b>: the code point = U+1F6A9</li>
                </ul>
            </li>
        </ol>
        
        <h5 class="post-subtitle">Byte Order Mark (BOM)</h5>

        <p>UTF-16 comes in two variations, big endian and little endian. In big-endian UTF-16 or UTF-16BE, the most significant byte of the character comes first. In little-endian UTF-16 or UTF-16LE, the order is reversed. Thus, in big-endian UTF-16, the code point of letter A is <b>U+0041</b> and the encoded bytes are <b>0x0041</b>. In little-endian UTF-16, the encoded bytes are swapped, and A is <b>0x4100</b>. In big-endian UTF-16, the code point of letter B is <b>U+0042</b> and the encoded bytes are <b>0x0042</b>; in little-endian UTF-16, it's <b>0x4200</b>. In big-endian UTF-16, the code point of letter Σ is <b>U+03A3</b> and the encoded bytes are <b>0x03A3</b>; in little-endian UTF-16, it's <b>0xA303</b>. In big-endian UTF-16, the code point of emoticon 😀 is <b>U+1F600</b> and the encoded bytes are <b>0xD83D</b> and <b>0xDE00</b>; in little-endian UTF-16, it's <b>0x3DD8</b> and <b>0x00DE</b>. In big-endian UTF-16, the code point of character 𠂤 is <b>U+200A4</b> and the encoded bytes are <b>0xD840</b> and <b>0xDCA4</b>; in little-endian UTF-16, it's <b>0xA4DC</b> and <b>0xA4DC</b>.</p>

        <p>To distinguish between big-endian and little-endian UTF-16, a program can look at the first two bytes of a UTF-16 encoded document, a document encoded in big-endian UTF-16 begins with Unicode character <b>U+FEFF</b>, the zero-width nonbreaking space, more commonly called the byte-order mark. A document encoded in big-endian UTF-16 begins with the same Unicode character (<b>U+FEFF</b>) but the bytes is swapped (i.e. <b>U+FFFE</b>), the resulting <b>U+FFFE</b> character doesn't actually exist.</p>
        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/utf-16" class="tag">UTF-16</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/utf-16le" class="tag">UTF-16LE</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/utf-16be" class="tag">UTF-16BE</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/unicode" class="tag">unicode</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/algorithm" class="tag">algorithm</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/encoding" class="tag">encoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/decoding" class="tag">decoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/byte-order-mark" class="tag">byte order mark</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorial" /><category term="year-2024" /><category term="month-06" /><category term="day-24" /><category term="UTF-16" /><category term="UTF-16LE" /><category term="UTF-16BE" /><category term="unicode" /><category term="algorithm" /><category term="encoding" /><category term="decoding" /><category term="byte order mark" /><summary type="html"><![CDATA[UTF-16, UTF-16LE, UTF-16BE encoding and decoding algorithm is crucial for processing text in various programming languages. This page explains the implementation of UTF-16, UTF-16LE, UTF-16BE encoding and decoding with examples for programmers to understand and utilize effectively.]]></summary></entry><entry xml:lang="en"><title type="html">The Difference Between Little Endian and Big Endian</title><link href="https://hemimorphite.github.io/zh/2024/06/24/the-difference-between-little-endian-and-big-endian/" rel="alternate" type="text/html" title="The Difference Between Little Endian and Big Endian" /><published>2024-06-24T12:33:00+00:00</published><updated>2024-06-24T12:33:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/24/the-difference-between-little-endian-and-big-endian</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/24/the-difference-between-little-endian-and-big-endian/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">The Difference Between Little Endian and Big Endian</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 24, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/cpu.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Every byte of memory has its own address, no matter how big the CPU machine word is. Eg. Intel 8086 CPU was 16-bit and it was addressing memory by bytes, so do modern 32-bit and 64-bit CPUs. That's the cause of the first limit - you can't have more addresses than memory bytes.</p>

        <p>The CPU machine word or word size of a CPU architecture refers to the number of bits that a computer's CPU can process at a time. It is typically measured in bits, with common word sizes being 16, 32, or 64 bits. In some architectures, such as Intel's PC processor architecture, a word is 16 bits or two contiguous 8-bit bytes. The word size determines the maximum amount of data that can be processed in a single operation and affects the performance and capabilities of the CPU.</p>

        <p>A machine word or word size is the amount of memory CPU uses to hold numbers (in RAM, cache or internal registers). 32-bit CPU uses 32 bits (4 bytes) to hold numbers. Memory addresses are numbers too, so on a 32-bit CPU the memory address consists of 32 bits.</p>
        
        <p>In a 32-bit system, memory addresses are typically represented as 8 hexadecimal digits, while in a 64-bit system, addresses are represented using 16 hexadecimal digits.</p>

        <p>In a 32-bit system, the memory addresses can range from 0 to 0x7FFFFFFF; that is, 2^31 (2147483648 or 0x80000000) possible numbers, while in a 64-bit system, the memory addresses can range from 0 to 0x7FFFFFFFFFFFFFFF; that is, 2^63 (9223372036854775808 or 0x8000000000000000) possible numbers.</p>

        <p>The endianness refers to the byte order used by a computer or a microcontroller or a machine to read or write a single "hello world" in memory. In other words, the endian will decide how to store multiple bytes in computer memory. It doesn't mean, the order of bits inside a byte, nor the way the computer reads an array of bytes or a file. It's all about the order of the bytes of a word (multi-byte variable) in memory.</p>

        <p>In big endian, the most significant byte of a multi-byte data type is stored at the lowest memory address, and the least significant byte is stored at the highest memory address. It is as if the data is read from left to right.</p>

        <p>In little endian, the least significant byte is stored at the lowest memory address, and the most significant byte is stored at the highest memory address. It is as if the data is read from right to left.</p>

        <p>Endian representation is crucial when data is transmitted or shared between systems with different endianness. If systems with different endianness attempt to interpret the data directly, the values may be misinterpreted, leading to errors in the program.</p>

        <p>For example, let's consider a 32-bit integer value with the hexadecimal representation 0x12345678.</p>

        <p>In big endian, it is stored in memory as:</p>

        <pre><code class="language-bash hljs">Address:    0x1000    0x1001    0x1002    0x1003
Value:      0x12      0x34      0x56      0x78</code></pre>
        
        <p>In little endian, it is stored in memory as:</p>

        <pre><code class="language-bash hljs">Address:    0x1000    0x1001    0x1002    0x1003
Value:      0x78      0x56      0x34      0x12</code></pre>
        
        <p>There are a lot of ways for determining endianness of your machine. Here is one way of determining endianness of your machine:</p>

        <pre><code class="language-bash hljs">#include &lt;stdio.h&gt;
int main(void)
{
    unsigned int value = 0x12345678;
    char *r = (char *) &value;
    int i;
    
    for(i=0; i<4; i++) {
        printf("Address of 0x%x = %p \n", r[i], &r[i]);
    }
    return 0;
}</code></pre>

        <p>Compile and run the program</p>

        <pre><code class="language-bash hljs">gcc -o endian endian.c && ./endian</code></pre>

        <p>The output on little endian architecture would look like:</p>

        <pre><code class="language-bash hljs">Address of 0x78 = 0x7fffe86cb728
Address of 0x56 = 0x7fffe86cb729
Address of 0x34 = 0x7fffe86cb72a
Address of 0x12 = 0x7fffe86cb72b</code></pre>

        <p>The output on little endian architecture would look like:</p>

        <pre><code class="language-bash hljs">Address of 0x12 = 0x7fffe86cb728
Address of 0x34 = 0x7fffe86cb729
Address of 0x56 = 0x7fffe86cb72a
Address of 0x78 = 0x7fffe86cb72b</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/little-endian" class="tag">little endian</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/big-endian" class="tag">big endian</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/cpu-architecture" class="tag">cpu architecture</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/c" class="tag">c</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorial" /><category term="year-2024" /><category term="month-06" /><category term="day-24" /><category term="little endian" /><category term="big endian" /><category term="cpu architecture" /><category term="c" /><summary type="html"><![CDATA[Learn about the key differences between little endian and big endian byte orderings, with clear explanations and illustrative examples to help you understand this fundamental concept in computer architecture.]]></summary></entry><entry xml:lang="en"><title type="html">UCS-2 Encoding and Decoding Algorithm</title><link href="https://hemimorphite.github.io/zh/2024/06/22/ucs-2-encoding-and-decoding-algorithm/" rel="alternate" type="text/html" title="UCS-2 Encoding and Decoding Algorithm" /><published>2024-06-22T16:51:00+00:00</published><updated>2024-06-22T16:51:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/22/ucs-2-encoding-and-decoding-algorithm</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/22/ucs-2-encoding-and-decoding-algorithm/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">UCS-2 Encoding and Decoding Algorithm</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 22, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/unicode.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>In computer systems, characters are transformed and stored as numbers (sequences of bits) that can be handled by the processor. A code page is an encoding scheme that maps a specific sequence of bits to its character representation. Before Unicode, there were hundreds of different encoding schemes that assigned a number to each letter or character. Many such schemes included code pages that contained only 256 characters – each character requiring 8 bits of storage. While this was relatively compact, it was insufficient to hold ideographic character sets containing thousands of characters such as Chinese and Japanese, and also did not allow the character sets of many languages to co-exist with each other.</p>

        <p>Unicode is an attempt to include all the different schemes into one universal text-encoding standard.</p>

        <p>Unicode represents each individual character as a unique code point with a unique number. For example, the character <b>A</b> – <b>Latin Capital Letter A</b> – is represented as <b>U+0041</b> and the Hiragana <b>ふ</b> is <b>U+3075</b></p>

        <p>An individual Unicode code point is expressed as <b>U+n</b>, where <b>n</b> is four to six hexadecimal digits, using the digits <b>0–9</b> and uppercase letters <b>A–F</b> (for 10 through 15, respectively). Leading zeros are omitted, unless the code point would have fewer than four hexadecimal digits. For example, <b>U+0001</b>, <b>U+0012</b>, <b>U+0123</b>, <b>U+1234</b>, <b>U+12345</b>, <b>U+102345</b>.</p>

        <p>The Unicode code space is divided into seventeen planes (the basic multilingual plane, and 16 supplementary planes), each with 65,536 code points. Thus the total size of the Unicode code space is 17 × 65,536 = 1,114,112.</p>

        <p>The first plane is called the Basic Multilingual Plane or BMP. It contains the code points from <b>U+0000</b> to <b>U+FFFF</b>, which are the most frequently used characters.</p>

        <h5 class="post-subtitle">UCS-2 Encoding and Decoding</h5>

        <p>UCS-2, also known as ISO-10646-UCS-2, represents each unicode code point as a two-byte, unsigned integer between 0 and 65,535.</p>
        
        <p>UCS-2 can only represent the code points of the first plane (<b>U+0000</b> to <b>U+FFFF</b>).</p>

        <p>UCS-2 encoding and decoding are straightforward. Thus the capital letter A, code point U+0041 in Unicode, is represented by the two bytes 0x0041. The capital letter B, code point U+0042, is represented by the two bytes 0x0042. The two bytes 0x03A3 represent the capital Greek letter Σ, code point U+03A3.</p>

        <h5 class="post-subtitle">Byte Order Mark (BOM)</h5>

        <p>UCS-2 comes in two variations, big endian and little endian. In big-endian UCS-2, the most significant byte of the character comes first. In little-endian UCS-2, the order is reversed. Thus, in big-endian UCS-2, the letter A is <b>U+0041</b>. In little-endian UCS-2, the bytes are swapped, and A is <b>U+4100</b>. In big-endian UCS-2, the letter B is <b>U+0042</b>; in little-endian UCS-2, it's <b>U+4200</b>. In big-endian UCS-2, the letter Σ is <b>U+03A3</b>; in little-endian UCS-2, it's <b>U+A303</b>.</p>

        <p>To distinguish between big-endian and little-endian UCS-2, a program can look at the first two bytes of a UCS-2 encoded document, a document encoded in big-endian UCS-2 begins with Unicode character <b>U+FEFF</b>, the zero-width nonbreaking space, more commonly called the byte-order mark. A document encoded in big-endian UCS-2 begins with the same Unicode character (<b>U+FEFF</b>) but the bytes is swapped (i.e. <b>U+FFFE</b>), the resulting <b>U+FFFE</b> character doesn't actually exist.</p>  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ucs-2" class="tag">UCS-2</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/unicode" class="tag">unicode</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/algorithm" class="tag">algorithm</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/encoding" class="tag">encoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/decoding" class="tag">decoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/byte-order-mark" class="tag">byte order mark</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorial" /><category term="year-2024" /><category term="month-06" /><category term="day-22" /><category term="UCS-2" /><category term="unicode" /><category term="algorithm" /><category term="encoding" /><category term="decoding" /><category term="byte order mark" /><summary type="html"><![CDATA[This tutorial explains the UCS-2 encoding and decoding algorithm in detail, providing a comprehensive guide to understanding and implementing this encoding scheme.]]></summary></entry><entry xml:lang="en"><title type="html">UTF-8 Encoding and Decoding Algorithm</title><link href="https://hemimorphite.github.io/zh/2024/06/22/utf-8-encoding-and-decoding-algorithm/" rel="alternate" type="text/html" title="UTF-8 Encoding and Decoding Algorithm" /><published>2024-06-22T14:51:00+00:00</published><updated>2024-06-22T14:51:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/22/utf-8-encoding-and-decoding-algorithm</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/22/utf-8-encoding-and-decoding-algorithm/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">UTF-8 Encoding and Decoding Algorithm</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 22, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/unicode.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>In computer systems, characters are transformed and stored as numbers (sequences of bits) that can be handled by the processor. A code page is an encoding scheme that maps a specific sequence of bits to its character representation. Before Unicode, there were hundreds of different encoding schemes that assigned a number to each letter or character. Many such schemes included code pages that contained only 256 characters – each character requiring 8 bits of storage. While this was relatively compact, it was insufficient to hold ideographic character sets containing thousands of characters such as Chinese and Japanese, and also did not allow the character sets of many languages to co-exist with each other.</p>

        <p>Unicode is an attempt to include all the different schemes into one universal text-encoding standard.</p>

        <p>Unicode represents each individual character as a unique code point with a unique number. For example, the character <b>A</b> – <b>Latin Capital Letter A</b> – is represented as <b>U+0041</b> and the Hiragana <b>ふ</b> is <b>U+3075</b></p>

        <p>An individual Unicode code point is expressed as <b>U+n</b>, where <b>n</b> is four to six hexadecimal digits, using the digits <b>0–9</b> and uppercase letters <b>A–F</b> (for 10 through 15, respectively). Leading zeros are omitted, unless the code point would have fewer than four hexadecimal digits. For example, <b>U+0001</b>, <b>U+0012</b>, <b>U+0123</b>, <b>U+1234</b>, <b>U+12345</b>, <b>U+102345</b>.</p>

        <p>Unicode also defines multiple encodings of its single character set: <b>UTF-8</b>, <b>UTF-16</b>, and <b>UTF-32</b>.</p>

        <h5 class="post-subtitle">UTF-8 Encoding</h5>

        <p>UTF-8 is a character encoding that maps code points of Unicode character to a sequence of one, two, three or four 8-bit code units. UTF-8 uses 1, 2, 3 or 4 8-bit code units to represent a unicode character.</p>

        <p>Code unit is a value that encoded code point to 8/16/32 bits to store/transmit Unicode text efficiently on a computer.</p>
        
        <p>When representing characters in UTF-8, each code point is represented by a sequence of one or more bytes. The number of bytes used depends on the code point being represented by the character. Here's a breakdown of the usage range:</p>

        <ul>
            <li>code points in the ASCII range <b>U+0000 - U+007F (0-127)</b> are represented by a single byte</li>
            <li>code points in the range <b>U+0080 - U+07FF (128-2047)</b> are represented by two bytes</li>
            <li>code points in the range <b>U+0800 - U+FFFF (2048-65535)</b> are represented by three bytes</li>
            <li>code points in the range <b>U+010000 - U+10FFFF (65536-1114111)</b> are represented by four bytes</li>
        </ul>

        <p>In the following table, the x characters are replaced by the bits of the code point:</p>

        <table class="table table-bordered border-primary">
            <tbody>
                <tr>
                    <th>First code point </th>
                    <th>Last code point </th>
                    <th>Byte 1 </th>
                    <th>Byte 2 </th>
                    <th>Byte 3 </th>
                    <th>Byte 4 </th>
                </tr>
                <tr>
                    <td style="text-align: right;">
                        U+00<span style="color:red;">0</span><span style="color:purple;">0</span>
                    </td>
                    <td style="text-align: right;">
                        U+00<span style="color:red;">7</span><span style="color:purple;">F</span>
                    </td>
                    <td>
                        0<span style="color:red;">xxx</span><span style="color:purple;">xxxx</span>
                    </td>
                    <td style="background: darkgray;" colspan="3"></td>
                </tr>
                <tr>
                    <td style="text-align: right;">
                        U+0<span style="color:green;">0</span><span style="color:red;">8</span><span style="color:purple;">0</span>
                    </td>
                    <td style="text-align: right;">
                        U+0<span style="color:green;">7</span><span style="color:red;">F</span><span style="color:purple;">F</span>
                    </td>
                    <td>
                        110<span style="color:green;">xxx</span><span style="color:red;">xx</span>
                    </td>
                    <td>
                        10<span style="color:red;">xx</span><span style="color:purple;">xxxx</span>
                    </td>
                    <td style="background: darkgray;" colspan="2"></td>
                </tr>
                <tr>
                    <td style="text-align: right;">
                        U+<span style="color:blue;">0</span><span style="color:green;">8</span><span style="color:red;">0</span><span style="color:purple;">0</span>
                    </td>
                    <td style="text-align: right;">
                        U+<span style="color:blue;">F</span><span style="color:green;">F</span><span style="color:red;">F</span><span style="color:purple;">F</span>
                    </td>
                    <td>
                        1110<span style="color:blue;">xxxx</span>
                    </td>
                    <td>
                        10<span style="color:green;">xxxx</span><span style="color:red;">xx</span>
                    </td>
                    <td>
                        10<span style="color:red;">xx</span><span style="color:purple;">xxxx</span>
                    </td>
                    <td style="background: darkgray;"></td>
                </tr>
                <tr>
                    <td style="text-align: right;">
                        U+<span style="color:crimson;">0</span><span style="color:orange;">1</span><span style="color:blue;">0</span><span style="color:green;">0</span><span style="color:red;">0</span><span style="color:purple;">0</span>
                    </td>
                    <td style="text-align: right;">
                        U+<span style="color:crimson;">1</span><span style="color:orange;">0</span><span style="color:blue;">F</span><span style="color:green;">F</span><span style="color:red;">F</span><span style="color:purple;">F</span>
                    </td>
                    <td>
                        11110<span style="color:crimson;">x</span><span style="color:orange;">xx</span>
                    </td>
                    <td>
                        10<span style="color:orange;">xx</span><span style="color:blue;">xxxx</span>
                    </td>
                    <td>
                        10<span style="color:green;">xxxx</span><span style="color:red;">xx</span>
                    </td>
                    <td>
                        10<span style="color:red;">xx</span><span style="color:purple;">xxxx</span>
                    </td>
                </tr>
            </tbody>
        </table>

        <p>The algorithm to convert a unicode code point to UTF-8 sequence is as follows:</p>

        <ol>
            <li>If the code point is less than <b>U+0080</b> or between <b>U+0000</b> and <b>U+007F</b>, it is encoded in a single byte.<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b><b>Substep 1</b></b>: perform <b>right shift</b> operation on the code point by <b>0</b> bit</li>
                            <li><b>Substep 2</b>: perform masking using <b>AND</b> operator between the result of substep 1 with <b>0x7F (0b01111111)</b> to extract the 7 bits in the result of step 1</li>
                            <li><b>Substep 3</b>: perform masking using <b>OR</b> operator between the result of substep 2 with 0</li>
                            <li><b>Substep 4</b>: the first byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the UTF-8 sequence is the result of step 1</li>
                </ul>
                <br>
                For example, encoding the character <b>$</b> (U+0024):<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x24 >> 0 = 0x80</li>
                            <li><b>Substep 2</b>: 0x24 & 0x7F = 0x24</li>
                            <li><b>Substep 3</b>: 0x24 | 0x0 = 0x24</li>
                            <li><b>Substep 4</b>: first byte of UTF-8 sequence = 0x24</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the UTF-8 sequence of the character <b>$</b> (U+0024) is 0x24</li>
                </ul>
                <br>
                As you can see, for a single-byte UTF-8 sequence, the first byte is the code point itself.
            </li>
            <li>If the code point is less than U+0800 or between U+0080 and U+07FF, it is encoded in two bytes.<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 6 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of substep 1 with 0x1F (0b00011111) to extract the trailing 5 bits of the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of substep 2 with 0xC0 (0b11000000) to add the leading 3 bits (i.e. 110) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the first byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 0 bit</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the second byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li>
                        <b>Final step</b>: combine the result of step 1 and the result of step 2 to form a UTF-8 sequence.
                    </li>
                </ul>
                
                <br>
                For example, encoding the Character <b>ü</b> (U+00FC):<br>

                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0xfc >> 6 = 0x03</li>
                            <li><b>Substep 2</b>: 0x03 & 0x1f = 0x03</li>
                            <li><b>Substep 3</b>: 0x03 | 0xc0 = 0xc3</li>
                            <li><b>Substep 4</b>: first byte of UTF-8 sequence = 0xc3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0xfc >> 0 = 0xfc</li>
                            <li><b>Substep 2</b>: 0xfc & 0x3f = 0x3c</li>
                            <li><b>Substep 3</b>: 0x3c | 0x80 = 0xbc</li>
                            <li><b>Substep 3</b>: second byte of UTF-8 sequence = 0xbc</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the UTF-8 sequence of the character <b>ü</b> (U+00FC) is 0xc3bc</li>
                </ul>
            </li>
            <li>If the code point is less than U+010000 or between U+0800 and U+FFFF, it is encoded in three bytes.<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform the right shift operation on the code point by 12 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x0F  (0b00001111) to extract the trailing 4 bits of the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0xE0 (0b11100000) to add the leading 4 bits (i.e. 1110) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the first byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 6 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the second byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the third byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 0 bit</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the third byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: combine the first byte, second byte and the third byte to form a UTF-8 sequence</li>
                </ul>
                
                <br>
                For example, encoding the Character <b>€</b> (U+20AC):<br>

                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x20ac >> 12 = 0x02</li>
                            <li><b>Substep 2</b>: 0x02 & 0xf = 0x02</li>
                            <li><b>Substep 3</b>: 0x02 | 0xe0 = 0xe2</li>
                            <li><b>Substep 4</b>: first byte of UTF-8 sequence = 0xe2</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x20ac >> 6 = 0x82</li>
                            <li><b>Substep 2</b>: 0x82 & 0x3f = 0x02</li>
                            <li><b>Substep 3</b>: 0x02 | 0x80 = 0x82</li>
                            <li><b>Substep 4</b>: second byte of UTF-8 sequence = 0x82</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the third byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x20ac >> 0 = 0x20ac</li>
                            <li><b>Substep 2</b>: 0x20ac & 0x3f = 0x2c</li>
                            <li><b>Substep 3</b>: 0x2c | 0x80 = 0xac</li>
                            <li><b>Substep 4</b>: third byte of UTF-8 sequence = 0xac</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the UTF-8 sequence of the character <b>€</b> (U+20AC) is 0xe282ac</li>
                </ul>
            </li>
            <li>If the code point is less than U+110000 or between U+010000 and U+10FFFF, it is encoded in four bytes.<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 18 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x07  (0b00000111) to extract the trailing 3 bits of the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0xF0 (0b11110000) to add the leading 5 bits (i.e. 11110) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the first byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 12 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the second byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the third byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 6 bits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the third byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 4</b>: get the fourth byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: perform right shift operation on the code point by 0 bit</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the result of <b>Substep 1</b> with 0x3F (0b00111111) to extract the trailing 6 bits in the result of substep 1</li>
                            <li><b>Substep 3</b>: perform masking using OR operator between the result of <b>Substep 2</b> with 0x80 (0b11000000) to add leading 2 bits (i.e. 10) to the result of substep 2</li>
                            <li><b>Substep 4</b>: the fourth byte of UTF-8 sequence is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: combine the first byte, second byte third byte, and the forth byte to form a UTF-8 sequence</li>
                </ul>
                
                <br>
                For example, encoding the Character <b>😀</b> (U+1F600):<br>
                <ul>
                    <li><b>Step 1</b>: get the first byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x1f600 >> 18 = 0x0</li>
                            <li><b>Substep 2</b>: 0x0 & 0x07 = 0x0</li>
                            <li><b>Substep 3</b>: 0x0 | 0xf0 = 0xf0</li>
                            <li><b>Substep 4</b>: first byte of UTF-8 sequence = 0xf0</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: get the second byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x1f600 >> 12 = 0x1f</li>
                            <li><b>Substep 2</b>: 0x1f & 0x3f = 0x1f</li>
                            <li><b>Substep 3</b>: 0x1f | 0x80 = 0x9f</li>
                            <li><b>Substep 4</b>: second byte of UTF-8 sequence = 0x9f</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: get the third byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x1f600 >> 6 = 0x7d8</li>
                            <li><b>Substep 2</b>: 0x7d8 & 0x3f = 0x18</li>
                            <li><b>Substep 3</b>: 0x18 | 0x80 = 0x98</li>
                            <li><b>Substep 4</b>: third byte of UTF-8 sequence = 0x98</li>
                        </ul>
                    </li>
                    <li><b>Step 4</b>: get the fourth byte of UTF-8 sequence<br>
                        <ul>
                            <li><b>Substep 1</b>: 0x1f600 >> 0 = 0x1f600</li>
                            <li><b>Substep 2</b>: 0x1f600 & 0x3f = 0x0</li>
                            <li><b>Substep 3</b>: 0x0 | 0x80 = 0x80</li>
                            <li><b>Substep 4</b>: fourth byte of UTF-8 sequence = 0x80</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the UTF-8 sequence of the character <b>😀</b> (U+1F600) is 0xf09f9880</li>
                </ul>  
            </li>
        </ol>

        <p>The following table summarizes the conversion code points to UTF-8 sequence:</p>

        <table class="table table-bordered border-primary">
            <tbody>
                <tr>
                    <th colspan="2">Character</th>
                    <th>Binary code point</th>
                    <th>Binary UTF-8</th>
                    <th>Hex UTF-8 </th>
                </tr>
                <tr>
                    <td>
                        $
                    </td>
                    <td align="right">
                        U+0024
                    </td>
                    <td align="right">
                        <span style="color:red;">010 0100</span>
                    </td>
                    <td align="left">
                        0<span style="color:red;">0100100</span>
                    </td>
                    <td align="left">
                        <span style="color:red;">24</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        ü
                    </td>
                    <td align="right">
                        U+00FC
                    </td>
                    <td align="right">
                        <span style="color:green;">000 11</span><span style="color:red;">11 1100</span>
                    </td>
                    <td align="left">
                        110<span style="color:green;">00011</span> 
                        10<span style="color:red;">111100</span>
                    </td>
                    <td align="left">
                        <span style="color:green;">C3</span>
                        <span style="color:red;">BC</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        €
                    </td>
                    <td align="right">
                        U+20AC
                    </td>
                    <td align="right">
                        <span style="color:blue;">0010</span><span style="color:green;">0000 10</span><span style="color:red;">10 1100</span>
                    </td>
                    <td align="left">
                        1110<span style="color:blue;">0010</span>
                        10<span style="color:green;">000010</span>
                        10<span style="color:red;">101100</span>
                    </td>
                    <td align="left">
                        <span style="color:blue;">E2</span>
                        <span style="color:green;">82</span>
                        <span style="color:red;">AC</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        😀
                    </td>
                    <td align="right">
                        U+1F600
                    </td>
                    <td align="right">
                        <span style="color: #C000C0;">0 01</span><span style="color:blue;">11 1101</span><span style="color:green;">1000 00</span><span style="color:red;">00 0000</span>
                    </td>
                    <td align="left">
                        11110<span style="color: #C000C0;">001</span>
                        10<span style="color:blue;">111101</span> 
                        10<span style="color:green;">100000</span> 
                        10<span style="color:red;">000000</span>
                    </td>
                    <td align="left">
                        <span style="color: #C000C0;">F0</span>
                        <span style="color:blue;">9F</span>
                        <span style="color:green;">98</span>
                        <span style="color:red;">80</span>
                    </td>
                </tr>
            </tbody>
        </table>

        <h5 class="post-subtitle">UTF-8 Decoding</h5>

        <p>The algorithm to convert UTF-8 sequence to a unicode code point is as follows:</p>

        <ul>
            <li>If the first byte of UTF-8 sequence is between 0x0 and 0x7F, the length of the UTF-8 sequence is a single byte. The maximum number of bits in a byte is 8 bits and is represented as two hexadecimal digits.<br>
                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as two hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the first byte UTF-8 sequence with 0x7F (0b01111111) to extract the trailing 7 bits of the first byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform lef shift on the result of <b>Substep 2</b> by 0 bit</li>
                            <li><b>Substep 4</b>: the decoded first byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li>
                        <b>Final step</b>: the code point of the UTF-8 sequence is the result of step 1
                    </li>
                </ul>
                
                <br>
                For example, decoding the UTF-8 sequence 0x24:<br>
                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the first byte of the UTF-8 sequence = 0x24</li>
                            <li><b>Substep 2</b>: 0x24 & 0x7f = 0x24</li>
                            <li><b>Substep 3</b>: 0x24 <<  0 = 0x24</li>
                            <li><b>Substep 4</b>: the decoded first byte = 0x24</li>
                        </ul>
                    </li>
                    <li><b>Final step</b>: the code point of the UTF-8 sequence 0x24 is U+0024</li>
                </ul>
                <br>
                As you can see, for a single-byte UTF-8 sequence, the first byte is the code point itself.
            </li>
            <li>If the first byte of UTF-8 sequence is between 0xC0 and 0xDF, the length of the UTF-8 sequence is two bytes. The maximum number of bits in two bytes is 16 bits and is represented as four hexadecimal digits.<br>
                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as four hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the first byte UTF-8 sequence with 0x1F (0b00011111) to extract the trailing 5 bits of the first byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: do the shift left the result of step 2 by 6 bits</li>
                            <li><b>Substep 4</b>: the decoded first byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as four hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the second byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the second byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 0 bit</li>
                            <li><b>Substep 4</b>: the decoded second byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li>
                        <b>Step 3</b>: perform the OR operation among the result of step 1 and the result of step 2 to get the code point value.
                    </li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence is the result of step 3
                    </li>
                </ul>

                <br>
                For example, decoding the UTF-8 sequence 0xc3bc:<br>

                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the first byte of the UTF-8 sequence = 0x00c3</li>
                            <li><b>Substep 2</b>: 0x00c3 & 0x1f = 0x0003</li>
                            <li><b>Substep 3</b>: 0x0003 << 6 = 0x00c0</li>
                            <li><b>Substep 4</b>: the decoded first byte is 0x00c0</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the second byte of the UTF-8 sequence = 0x00bc</li>
                            <li><b>Substep 1</b>: 0x00bc & 0x3f = 0x003c</li>
                            <li><b>Substep 2</b>: 0x003c << 0 = 0x003c</li>
                            <li><b>Substep 3</b>: the decoded second byte is 0x003c</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: 0x00c0 | 0x003c = 0x00fc</li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence 0xc3bc is U+00FC
                    </li>
                </ul>
                
            </li>
            <li>If the first byte of UTF-8 sequence is between 0xE0 and 0xEF, the length of the UTF-8 sequence is three bytes. The maximum number of bits in three bytes is 24 bits and is represented as six hexadecimal digits.<br>
                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as six hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the first byte UTF-8 sequence with 0x0F (0b00001111) to extract the trailing 4 bits of the first byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 12 bits</li>
                            <li><b>Substep 4</b>: the decoded first byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as six hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the second byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the second byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 6 bit</li>
                            <li><b>Substep 4</b>: the decoded second byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: decode the third byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as six hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the third byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the third byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 6 bit</li>
                            <li><b>Substep 4</b>: the decoded third byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li>
                        <b>Step 4</b>: perform the OR operation among the result of step 1, the result of step 2 and the result of the step 3 to get the code point value.
                    </li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence is the result of step 4
                    </li>
                </ul>

                <br>
                For example, decoding the UTF-8 sequence 0xe282ac:<br>

                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the first byte of the UTF-8 sequence = 0x0000e2</li>
                            <li><b>Substep 2</b>: 0x0000e2 & 0x0f = 0x000002</li>
                            <li><b>Substep 3</b>: 0x000002 << 12 = 0x002000</li>
                            <li><b>Substep 4</b>: the decoded first byte is 0x002000</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the second byte of the UTF-8 sequence = 0x000082</li>
                            <li><b>Substep 2</b>: 0x000082 & 0x3f = 0x000002</li>
                            <li><b>Substep 3</b>: 0x000002 << 6 = 0x000080</li>
                            <li><b>Substep 4</b>: the decoded second byte is 0x000080</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: decode the third byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the third byte of the UTF-8 sequence = 0x0000ac</li>
                            <li><b>Substep 2</b>: 0x0000ac & 0x3f = 0x00002c</li>
                            <li><b>Substep 3</b>: 0x00002c << 0 = 0x00002c</li>
                            <li><b>Substep 4</b>: the decoded second byte is 0x00002c</li>
                        </ul>
                    </li>
                    <li><b>Step 4</b>: 0x002000 | 0x000080 | 0x00002c = 0x0020ac</li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence 0xc3bc is U+20AC
                    </li>
                </ul>
            </li>
            <li>If the first byte of UTF-8 sequence is between 0xF0 and 0xF7, the length of the UTF-8 sequence is four bytes. The maximum number of bits in four bytes is 32 bits and is represented as eight hexadecimal digits.<br>
                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the first byte of the UTF-8 sequence as eight hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the first byte UTF-8 sequence with 0x07 (0b00000111) to extract the trailing 3 bits of the first byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 18 bits</li>
                            <li><b>Substep 4</b>: the decoded first byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the second byte of the UTF-8 sequence as eight hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the second byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the second byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 12 bits</li>
                            <li><b>Substep 4</b>: the decoded second byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: decode the third byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the third byte of the UTF-8 sequence as eight hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the third byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the third byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 6 bits</li>
                            <li><b>Substep 4</b>: the decoded third byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li><b>Step 4</b>: decode the fourth byte<br>
                        <ul>
                            <li><b>Substep 1</b>: represent the fourth byte of the UTF-8 sequence as eight hexadecimal digits</li>
                            <li><b>Substep 2</b>: perform masking using AND operator between the fourth byte UTF-8 sequence with 0x3F (0b00111111) to extract the trailing 6 bits of the fourth byte UTF-8 sequence</li>
                            <li><b>Substep 3</b>: perform shift left the result of step 2 by 6 bits</li>
                            <li><b>Substep 4</b>: the decoded fourth byte is the result of substep 3</li>
                        </ul>
                    </li>
                    <li>
                        <b>Step 5</b>: perform the OR operation among the result of step 1, the result of step 2, the result of the step 3 and the result of the step 4 to get the code point value.
                    </li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence is the result of step 4
                    </li>
                </ul>  
                
                <br>
                For example, decoding the UTF-8 sequence 0xf09f9880:<br>

                <ul>
                    <li><b>Step 1</b>: decode the first byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the first byte of the UTF-8 sequence = 0x000000f0</li>
                            <li><b>Substep 2</b>: 0x000000f0 & 0x07 = 0x00000000</li>
                            <li><b>Substep 3</b>: 0x00000000 << 18 = 0x00000000</li>
                            <li><b>Substep 4</b>: the decoded first byte is 0x00000000</li>
                        </ul>
                    </li>
                    <li><b>Step 2</b>: decode the second byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the second byte of the UTF-8 sequence = 0x0000009f</li>
                            <li><b>Substep 2</b>: 0x0000009f & 0x3f = 0x0000001f</li>
                            <li><b>Substep 3</b>: 0x0000001f << 12 = 0x0001f000</li>
                            <li><b>Substep 4</b>: the decoded second byte is 0x0001f000</li>
                        </ul>
                    </li>
                    <li><b>Step 3</b>: decode the third byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the third byte of the UTF-8 sequence = 0x00000098</li>
                            <li><b>Substep 2</b>: 0x00000098 & 0x3f = 0x00000018</li>
                            <li><b>Substep 3</b>: 0x00000018 << 6 = 0x00000600</li>
                            <li><b>Substep 4</b>: the decoded second byte is 0x00000600</li>
                        </ul>
                    </li>
                    <li><b>Step 4</b>: decode the fourth byte<br>
                        <ul>
                            <li><b>Substep 1</b>: the third byte of the UTF-8 sequence = 0x00000080</li>
                            <li><b>Substep 2</b>: 0x00000080 & 0x3f = 0x00000000</li>
                            <li><b>Substep 3</b>: 0x00000000 << 0 = 0x00000000</li>
                            <li><b>Substep 4</b>: the decoded second byte is 0x00000000</li>
                        </ul>
                    </li>
                    <li><b>Step 5</b>: 0x00000000 | 0x0001f000 | 0x00000600 | 0x00000000 = 0x0001f600</li>
                    <li>
                        <b>Final step</b>: the code point of UTF-8 sequence 0xf09f9880 is U+1F600
                    </li>
                </ul>
            </li>
        </ul>
        
        <h5 class="post-subtitle">Byte Order Mark (BOM)</h5>

        <p>The Byte Order Mark (BOM) in UTF-8 is represented by the Unicode code point U+FEFF. In UTF-8, this code point is encoded as the following three-byte sequence: <b>EF BB BF</b>. This sequence is placed at the beginning of a file or stream to indicate that the contents are encoded in UTF-8. UTF-8 has no Litte-Endian or Big-Endian variants.</p>

        <p>For example, Suppose we have a text file containing the string "Hello, World!" encoded in UTF-8. The file would start with the BOM sequence EF BB BF, followed by the UTF-8 encoding of the string:</p>

        <p><b>EF BB BF 48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21</b></p>

        <h5 class="post-subtitle">UTF-8 Encoding and Decoding Algorithm in Programming Languages</h5>

        <h6 class="post-subtitle">C Programming Language</h6>

        <p>In C programming language, the UTF-8 encoding and decoding algorithm look as follow:</p>

        <pre><code class="language-bash hljs">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;inttypes.h&gt;

typedef struct {
    char mask;    /* char data will be bitwise AND with this */
    char lead;    /* start bytes of current char in utf-8 encoded character */
    uint32_t beg; /* beginning of codepoint range */
    uint32_t end; /* end of codepoint range */
    int bits_stored; /* the number of bits from the codepoint that fits in char */
}utf_t;

utf_t * utf[] = {
    /*             mask        lead        beg      end       bits */
    [0] = &(utf_t){0b00111111, 0b10000000, 0,       0,        6    },
    [1] = &(utf_t){0b01111111, 0b00000000, 0000,    0177,     7    },
    [2] = &(utf_t){0b00011111, 0b11000000, 0200,    03777,    5    },
    [3] = &(utf_t){0b00001111, 0b11100000, 04000,   0177777,  4    },
    [4] = &(utf_t){0b00000111, 0b11110000, 0200000, 04177777, 3    },
            &(utf_t){0},
};

/* All lengths are in bytes */
int codepoint_len(const uint32_t cp); /* len of associated utf-8 char */
int utf8_len(const char ch);          /* len of utf-8 encoded char */

char *to_utf8(const uint32_t cp);
uint32_t to_cp(const char chr[4]);

int codepoint_len(const uint32_t cp)
{
    int len = 0;
    for(utf_t **u = utf; *u; ++u) {
        if((cp >= (*u)->beg) && (cp <= (*u)->end)) {
            break;
        }
        ++len;
    }
    if(len > 4) /* Out of bounds */
        exit(1);

    return len;
}

int utf8_len(const char ch)
{
    int len = 0;
    for(utf_t **u = utf; *u; ++u) {
        if((ch & ~(*u)->mask) == (*u)->lead) {
            break;
        }
        ++len;
    }
    if(len > 4) { /* Malformed leading byte */
        exit(1);
    }
    return len;
}

char *to_utf8(const uint32_t cp)
{
    static char ret[5];
    const int bytes = codepoint_len(cp);

    int shift = utf[0]->bits_stored * (bytes - 1);
    ret[0] = (cp >> shift & utf[bytes]->mask) | utf[bytes]->lead;
    shift -= utf[0]->bits_stored;
    for(int i = 1; i < bytes; ++i) {
        ret[i] = (cp >> shift & utf[0]->mask) | utf[0]->lead;
        shift -= utf[0]->bits_stored;
    }
    ret[bytes] = '\0';
    return ret;
}

uint32_t to_cp(const char chr[4])
{
    int bytes = utf8_len(*chr);
    int shift = utf[0]->bits_stored * (bytes - 1);
    uint32_t codep = (*chr++ & utf[bytes]->mask) << shift;

    for(int i = 1; i < bytes; ++i, ++chr) {
        shift -= utf[0]->bits_stored;
        codep |= ((char)*chr & utf[0]->mask) << shift;
    }

    return codep;
}

int main(void)
{
    const uint32_t *in, input[] = {0x0041, 0x00f6, 0x0416, 0x20ac, 0x1d11e, 0x0};

    printf("Character  Unicode  UTF-8 encoding (hex)\n");
    printf("----------------------------------------\n");

    char *utf8;
    uint32_t codepoint;
    for(in = input; *in; ++in) {
        utf8 = to_utf8(*in);
        codepoint = to_cp(utf8);
        printf("%s          U+%-7.4x", utf8, codepoint);

        for(int i = 0; utf8[i] && i < 4; ++i) {
            printf("%hhx ", utf8[i]);
        }
        printf("\n");
    }
    return 0;
}</code></pre>

        <p>Compile and run the program:</p>

        <pre><code class="language-bash hljs">gcc utf8.c && ./a.out</code></pre>

        <p>The output is as follows:</p>

        <pre><code class="language-bash hljs">Character  Unicode  UTF-8 encoding (hex)
----------------------------------------
A          U+0041   41
ö          U+00f6   c3 b6
Ж          U+0416   d0 96
€          U+20ac   e2 82 ac
𝄞          U+1d11e  f0 9d 84 9e</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/utf-8" class="tag">UTF-8</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/unicode" class="tag">unicode</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/algorithm" class="tag">algorithm</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/encoding" class="tag">encoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/decoding" class="tag">decoding</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/c" class="tag">c</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/byte-order-mark" class="tag">byte order mark</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorial" /><category term="year-2024" /><category term="month-06" /><category term="day-22" /><category term="UTF-8" /><category term="unicode" /><category term="algorithm" /><category term="encoding" /><category term="decoding" /><category term="c" /><category term="byte order mark" /><summary type="html"><![CDATA[UTF-8 encoding and decoding algorithm is crucial for processing text in various programming languages. This page explains the implementation of UTF-8 encoding and decoding with examples for programmers to understand and utilize effectively.]]></summary></entry><entry xml:lang="en"><title type="html">Bourne Shell Builtin Commands</title><link href="https://hemimorphite.github.io/zh/2024/06/16/bourne-shell-builtin-commands/" rel="alternate" type="text/html" title="Bourne Shell Builtin Commands" /><published>2024-06-16T16:21:00+00:00</published><updated>2024-06-16T16:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/16/bourne-shell-builtin-commands</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/16/bourne-shell-builtin-commands/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Builtin Commands</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 16, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">: (a colon)</h5>

        <p><code>:</code> is a shell builtin command inherited from the Bourne Shell. It does nothing beyond expanding arguments and performing redirection and has return status zero. <code>:</code> is a no-op operator similar to <code>true</code> and <code>false</code>.</p>

        <p>The syntax of the <code>:</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">: [arguments]</code></pre>

        <p>The example below illustrated how <code>:</code> is used in parameter expansion by setting a default value combined with <code>:</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat ./input.sh
#!/usr/bin/env bash
read -p "Enter your name: " name
: ${name:=Hemimorphite}  # if the user entered an empty string
echo "$name"
[hemimorphite@ubuntu ~]$ ./input.sh
Enter your name:
Hemimorphite</code></pre>
        
        <p>If <code>:</code> is omitted, the default value is passed and treated as a command.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat ./input.sh
#!/usr/bin/env bash
read -p "Enter your name: " name
${name:=Hemimorphite}
echo "$name"
[hemimorphite@ubuntu ~]$ ./input.sh
Enter your name:
./input.sh: line 3: Hemimorphite: command not found
Hemimorphite</code></pre>
        
        <p>The usual way to do infinite loop in bash is using the <code>true</code> command in a <code>while</code> loop.</p>
        
        <pre><code class="language-bash hljs">#!/usr/bin/env bash
while true
    do 
    # ...
done</code></pre>
        
        <p>Alternatively, we can use <code>:</code> instead of <code>true</code> to create an infinite loop.</p>
        
        <pre><code class="language-bash hljs">#!/usr/bin/env bash
while :
        do 
        # ...
done</code></pre>

        <h5 class="post-subtitle">. (a period)</h5>
        
        <p>The dot command (<code>.</code>) is a command used to execute commands from a file in the current shell. In Bash, the <code>source</code> command is synonym to the dot command (<code>.</code>)</p>
        
        <p>The syntax of the <code>.</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">. filename [arguments]</code></pre>

        <p>When you run an executable script as <code>./hello.sh</code>, the commands are run in a new subshell, while when run as <code>. hello.sh</code> the current shell context will be used. This mean that the dot command will apply changes to your current shell.</p>

        <p>Let's look at the simple example below.</p>

        <pre><code class="language-bash hljs">#!/usr/bin/env bash
export A="hello world"
echo $A
</code></pre>

        <p>When run as an executable using <code>./hello.sh</code>, the <code>A</code> variable is not exported in your current shell and would just return an empty result.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./hello.sh 
hello world
[hemimorphite@ubuntu ~]$ echo $A</code></pre>

        <p>When run the same script with the dot command using <code>. hello.sh</code>, your current shell context will be changed.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ . hello.sh 
hello world
[hemimorphite@ubuntu ~]$ echo $A
hello world</code></pre>
        
        <h5 class="post-subtitle">break</h5>

        <p>Exit from a <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop.</p>
        
        <p>The syntax of the <code>break</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">break [n]</code></pre>

        <p><code>[n]</code> is an optional argument and must be greater than or equal to 1. When <code>[n]</code> is provided, the n-th enclosing loop is exited. <code>break 1</code> is equivalent to <code>break</code>.</p>

        <p>Here is an example of using the <code>break</code> statement inside nested <code>for</code> loops.</p>

        <p>When the argument <code>[n]</code> is not given, <code>break</code> terminates the innermost enclosing loop. The outer loops are not terminated:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..3}; do
    for j in {1..3}; do
        if [[ $j -eq 2 ]]; then
            break
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1
i: 1
j: 1
i: 2
j: 1
i: 3</code></pre>
        
        <p>If you want to exit from the outer loop, use <code>break 2</code>. Argument 2 tells <code>break</code> to terminate the second enclosing loop:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..3}; do
    for j in {1..3}; do
        if [[ $j -eq 2 ]]; then
            break 2
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1</code></pre>
        
        <h5 class="post-subtitle">continue</h5>

        <p>Resume the next iteration of a <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop.</p>

        <p>The syntax of the <code>continue</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">continue [n]</code></pre>

        <p>The <code>[n]</code> argument is optional and can be greater than or equal to 1. When <code>[n]</code> is given, the n-th enclosing loop is resumed. <code>continue 1</code> is equivalent to <code>continue</code>.</p>
        
        <p>In the example below, once the current iterated item is equal to 9, the <code>continue</code> statement will cause execution to return to the beginning of the loop and to continue with the next iteration.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..10}
do
    if [[ $i == '9' ]]
    then
        continue
    fi
    echo "Number $i!"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
Number: 6
Number: 7
Number: 8
Number: 10</code></pre>
        
        <p>If you want to continue from the outer loop, use <code>continue 2</code>. Argument 2 tells <code>continue</code> to continue the second enclosing loop:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..5}
do
    for j in {1..5}
    do
        if [[ $j -eq 2 ]]
        then
            continue 2
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1
j: 2
j: 3
i: 1
j: 1
j: 2
j: 3
i: 3</code></pre>
        
        <h5 class="post-subtitle">cd</h5>

        <p>The <code>cd</code> command changes the working directory of the current shell execution environment to directory. If you specify directory as an absolute path name, beginning with /, this is the target directory. <code>cd</code> assumes the target directory to be the name just as you specified it. If you specify directory as a relative path name, cd assumes it to be relative to the current working directory.</p>
        
        <p>Two special symbols are also supported:</p>

        <ul>
            <li><code>.</code> Represents the current directory</li>
            <li><code>..</code> Represents the parent of the current directory</li>
        </ul>

        <p>The syntax of the <code>cd</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">cd [-L|[-P [-e]] [directory]</code></pre>

        <p>If <code>[directory]</code> is not supplied, the value of the <code>HOME</code> shell variable is used. If the shell variable <code>CDPATH</code> exists, it is used as a search path. If directory begins with a slash, <code>CDPATH</code> is not used.</p>

        <p>The <code>-P</code> option means to not follow symbolic links: symbolic links are resolved while <code>cd</code> is traversing directory and before processing an instance of <code>..</code> in directory. For example,</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ ln -s gallery/album/photos myalbum
[hemimorphite@ubuntu ~]$ cd -P myalbum
[hemimorphite@ubuntu ~/gallery/album/photos]$ pwd
/home/hemimorphite/gallery/album/photos</code></pre>
        
        <p>By default, the <code>-L</code> option is supplied, symbolic links in directory are resolved after <code>cd</code> processes an instance of <code>..</code> in directory.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ ln -s gallery/album/photos myalbum
[hemimorphite@ubuntu ~]$ cd myalbum
[hemimorphite@ubuntu ~/myalbum]$ pwd
/home/hemimorphite/myalbum</code></pre>
        
        <p>If the <code>-e</code> option is supplied with <code>-P</code> and the current working directory cannot be successfully determined after a successful directory change, <code>cd</code> will return an unsuccessful status.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ cd gallery/album/photos
[hemimorphite@ubuntu ~/gallery/album/photos]$ rmdir ../photos ../../album
[hemimorphite@ubuntu ~/gallery/album/photos]$ cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[hemimorphite@ubuntu ~/gallery/album/photos/..]$ echo $?
0</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ cd gallery/album/photos
[hemimorphite@ubuntu ~/gallery/album/photos]$ rmdir ../photos ../../album
[hemimorphite@ubuntu ~/gallery/album/photos]$ cd -Pe ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[hemimorphite@ubuntu ~/gallery/album/photos/..]$ echo $?
1</code></pre>

        <p>In the shell, the command <code>cd -</code> is a special case that changes the current working directory to the previous working directory by exchanging the values of the variables <code>PWD</code> and <code>OLDPWD</code>.</p>

        <p>In the following steps, the variable <code>curpath</code> represents an intermediate value used to simplify the description of the algorithm used by <code>cd</code>. There is no requirement that <code>curpath</code> be made visible to the application.</p>

        <ol>
            <li>
                If no directory operand is given and the <code>HOME</code> environment variable is empty or undefined, the default behavior is implementation-defined and no further steps shall be taken.<br>
                For example:<br>
                <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ HOME=
[hemimorphite@ubuntu ~]$ cd</code></pre>
            </li>
            <li>
                If no directory operand is given and the <code>HOME</code> environment variable is set to a non-empty value, the <code>cd</code> command shall behave as if the directory named in the <code>HOME</code> environment variable was specified as the directory operand.<br>
                For example:<br>
                <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ HOME=/home/hemimorphite
[hemimorphite@ubuntu ~]$ cd</code></pre>
            </li>
            <li>
                If the directory operand begins with a slash <code>/</code> character, set <code>curpath</code> to the operand and proceed to step 7
            </li>
            <li>
                If the directory operand is <code>.</code> or <code>..</code>, proceed to step 6
            </li>
            <li>
                Starting with the first pathname in the colon-separated <code>:</code> pathnames of <code>CDPATH</code> if the pathname is non-null, test if the concatenation of that pathname, add a <code>/</code> character if that pathname did not end with a <code>/</code> character, and the directory operand names a directory. If the pathname is null, test if the concatenation of dot, a <code>/</code> character, and the operand names a directory. In either case, if the resulting string names an existing directory, set <code>curpath</code> to that string and proceed to step 7. Otherwise, repeat this step with the next pathname in <code>CDPATH</code> until all pathnames have been tested.
            </li>
            <li>
                Set curpath to the directory operand.
            </li>
            <li>
                If the <code>-P</code> option is in effect, proceed to step 10. If <code>curpath</code> does not begin with a <code>/</code> character, set <code>curpath</code> to the string formed by the concatenation of the value of <code>PWD</code>, a <code>/</code> character if the value of <code>PWD</code> did not end with a <code>/</code> character, and <code>curpath</code>.
            </li>
            <li>
                The curpath value shall then be converted to canonical form as follows, considering each component from beginning to end, in sequence:
                <ol type="a">
                    <li><code>.</code> components and any <code>/</code> characters that separate them from the next component shall be deleted.</li>
                    <li>For each dot-dot component, if there is a preceding component and it is neither root nor dot-dot, then:
                        <ol type="i">
                            <li>If the preceding component does not refer (in the context of pathname resolution with symbolic links followed) to a directory, then the <code>cd</code> command shall display an appropriate error message and no further steps shall be taken.</li>
                            <li>The preceding component, all <code>/</code> characters separating the preceding component from dot-dot, dot-dot, and all <code>/</code> characters separating dot-dot from the following component (if any) shall be deleted.</li>
                        </ol>
                    </li>
                    <li>An implementation may further simplify <code>curpath</code> by removing any trailing <code>/</code> characters that are not also leading <code>/</code> characters, replacing multiple non-leading consecutive <code>/</code> characters with a single <code>/</code>, and replacing three or more leading <code>/</code> characters with a single <code>/</code>. If, as a result of this canonicalization, the curpath variable is null, no further steps shall be taken.</li>
                </ol>
            </li>
            <li>
                If <code>curpath</code> is longer than {PATH_MAX} bytes (including the terminating null) and the directory operand was not longer than {PATH_MAX} bytes (including the terminating null), then <code>curpath</code> shall be converted from an absolute pathname to an equivalent relative pathname if possible. This conversion shall always be considered possible if the value of <code>PWD</code>, with a trailing <code>/</code> added if it does not already have one, is an initial substring of <code>curpath</code>.  Whether or not it is considered possible under other circumstances is unspecified. Implementations may also apply this conversion if <code>curpath</code> is not longer than {PATH_MAX} bytes or the directory operand was longer than {PATH_MAX} bytes.
            </li>
            <li>The <code>cd</code> command shall then perform actions equivalent to the <code>chdir()</code> function called with <code>curpath</code> as the path argument. If these actions fail for any reason, the <code>cd</code> command shall display an appropriate error message and the remainder of this step shall not be executed. If the <code>-P</code> option is not in effect, the <code>PWD</code> environment variable shall be set to the value that <code>curpath</code> had on entry to step 9 (i.e., before conversion to a relative pathname). If the <code>-P</code> option is in effect, the <code>PWD</code> environment variable shall be set to the string that would be output by <code>pwd -P</code>. If there is insufficient permission on the new directory, or on any parent of that directory, to determine the current working directory, the value of the <code>PWD</code> environment variable is unspecified.</li>
        </ol>

        <p>If, during the execution of the above steps, the <code>PWD</code> environment variable is set, the <code>OLDPWD</code> environment variable shall also be set to the value of the old working directory.</p>

        <p>When specifying a directory to change to, you can use either absolute or relative path names. The absolute or full path starts from the system root <code>/</code>, and the relative path starts from your current directory.</p>

        <p>By default, when you log into your Linux system, your current working directory is set to your home directory. Assuming that the <code>Downloads</code> directory exists in your home directory, you can navigate to it by using the relative path to the directory:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cd Downloads</code></pre>

        <p>You can also navigate to the same directory by using its absolute path:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cd /home/hemimorphite/Downloads</code></pre>

        <p>On Unix-like operating systems, the current working directory is represented by a single dot (.). Two dots (..), one after the other, represent the parent directory or the directory immediately above the current one.</p>

        <p>If you type <code>cd .</code>, you will change into the current directory or, in other words, the command will do nothing.</p>

        <p>Suppose you are currently in the <code>/usr/local/share</code> directory. To switch to the <code>/usr/local</code> directory (one level up from the current directory), you would type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ..
[hemimorphite@ubuntu /usr/local]$</code></pre>

        <p>To move two levels up to the <code>/usr</code> directory, you type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../../
[hemimorphite@ubuntu /usr]$</code></pre>
        
        <p>Let's say you are in the <code>/usr/local/share</code> directory, and you want to switch to the <code>/usr/local/src</code>. You can do that by typing:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../src
[hemimorphite@ubuntu /usr/local/src]$</code></pre>
        
        <p>To change back to the previous working directory, pass the dash (-) character as an argument to the <code>cd</code> command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../src
[hemimorphite@ubuntu /usr/local/src]$ cd -
[hemimorphite@ubuntu /usr/local/share]$</code></pre>
        
        <p>To navigate to your home directory, simply type <code>cd</code>. Another way to return directly to your home directory is to use the tilde (~) character, as shown below:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~
[hemimorphite@ubuntu ~]$</code></pre>

        <p>For example, if you want to navigate to the <code>Downloads</code> directory, which is inside your home directory, you would type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~/Downloads
[hemimorphite@ubuntu ~/Downloads]$</code></pre>

        <p>You can also navigate to another user's home directory using the following syntax:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~satella
[hemimorphite@ubuntu /home/satella]$</code></pre>
        
        <p>If the directory you want to change to has spaces in its name, you should either surround the path with quotes or use the backslash (\) character to escape the space:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir "hello world"
[hemimorphite@ubuntu ~]$ cd "hello world"</code></pre>
        
        <p>Or</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir "hello world"
[hemimorphite@ubuntu ~]$ cd hello\ world</code></pre>

        <h5 class="post-subtitle">eval</h5>
        
        <p><code>eval</code> command is used on a Unix or Linux system to execute the arguments as a shell command. The <code>eval</code> command is helpful when you want to execute a Unix or Linux command that has been saved in a variable.</p>
        
        <p>The syntax of the <code>eval</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">eval [arguments]</code></pre>

        <p>The command or script that must be evaluated and run in this case is represented by <code>[arguments]</code>. It may contain commands, variables, and even sophisticated expressions.</p>
        
        <p>Storing a command in a variable is useful, especially when you want to store it with an option or flag appended to the command. In the following example, we will store the <code>expr</code> command in a variable named <code>command</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var1=10
[hemimorphite@ubuntu ~]$ var2=20
[hemimorphite@ubuntu ~]$ command='expr $var1 + $var2'
[hemimorphite@ubuntu ~]$ eval $command
30</code></pre>
        
        <p>In the following example, the <code>eval</code> command substitutes the <code>date</code> command placed within a string stored in the command variable. <code>eval</code> evaluates the string and executes the result:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ command="echo \$(date)"
[hemimorphite@ubuntu ~]$ eval $command
Fri Jun 14 18:47:57 +07 2024</code></pre>

        <h5 class="post-subtitle">exec</h5>

        <p>The <code>exec</code> command executes a shell command without creating a new process. Instead, it replaces the currently open shell operation.</p>
        
        <p>The syntax of the <code>exec</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">exec [-cl] [-a name] [command [arguments]]</code></pre>
        
        <p>If the <code>-l</code> option is supplied, the shell places a dash at the beginning of the zeroth argument passed to command. So if we ran the following command:</p>

        <pre><code class="language-bash hljs">exec -l tail -f /etc/passwd</code></pre>
        
        <p>Open a second terminal. Run the <code>ps auwwx</code> command and it would produce the following output in the process list.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps auwwx | grep tail
hemimor+    6977  0.0  0.0   8404  1008 pts/0    Ss+  22:03   0:00 -tail -f /etc/passwd
hemimor+    7163  0.0  0.0   9212  2372 pts/1    S+   22:23   0:00 grep --color=auto /etc/passwd</code></pre>

        <p>The <code>-c</code> option causes the supplied command to run with a empty environment. Environmental variables like <code>PATH</code>, are cleared before the command it run.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ bash
[hemimorphite@ubuntu ~]$ ps auwwx | grep tail
SHELL=/bin/bash
SESSION_MANAGER=local/ubuntu:@/tmp/.ICE-unix/1259,unix/ubuntu:/tmp/.ICE-unix/1259
QT_ACCESSIBILITY=1
COLORTERM=truecolor
XDG_CONFIG_DIRS=/etc/xdg/xdg-cinnamon:/etc/xdg
XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session0
GNOME_DESKTOP_SESSION_ID=this-is-deprecated
LANGUAGE=en_US
LC_ADDRESS=id_ID.UTF-8
LC_NAME=id_ID.UTF-8
[hemimorphite@ubuntu ~]$ exec -c printenv
[hemimorphite@ubuntu ~]$</code></pre>

        <p>The last option, <code>-a [name]</code>, will pass name as the first argument to command. The command will still run as expected, but the name of the process will change.</p>

        <pre><code class="language-bash hljs">exec -a HEMIMORPHITE tail -f /etc/passwd</code></pre>
        
        <p>Open a second terminal. Run the <code>ps auwwx</code> command and it would produce the following output in the process list.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps auwwx | grep HEMIMORPHITE
hemimor+    6977  0.0  0.0   8404  1008 pts/0    Ss+  22:03   0:00 HEMIMORPHITE -f /etc/passwd
hemimor+    7163  0.0  0.0   9212  2372 pts/1    S+   22:23   0:00 grep --color=auto HEMIMORPHITE</code></pre>

        <p>As you can see, <code>exec</code> command passed HEMIMORPHITE as first argument to command, therefore it shows in the process list with that name.</p>

        <p>The examples below demonstrate the behavior of the <code>exec</code> command in the terminal.</p>
        
        <p>Open the terminal and list the running processes</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps
 PID TTY          TIME CMD
8185 pts/0    00:00:00 bash
8192 pts/0    00:00:00 ps</code></pre>

        <p>The output shows the currently running Bash shell and the <code>ps</code> command. The Bash shell has a unique PID.</p>

        <p>To confirm, check the current process ID with:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ echo $$
8185</code></pre>

        <p>The PID is the same as the output from the <code>ps</code> command, indicating this is the currently running Bash process.</p>

        <p>Now, run <code>exec</code> followed by the <code>sleep</code> command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ exec sleep 100</code></pre>

        <p>The <code>sleep</code> command waits for 100 seconds.</p>

        <p>Open another terminal tab, list all currently running processes and use <code>grep</code> command to find <code>sleep</code> process:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps -ae | grep sleep
8185 pts/0    00:00:00 sleep</code></pre>

        <p>The PID for the process is the same as the Bash shell PID, indicating the <code>exec</code> command replaced the Bash shell process.</p>

        <p>The Bash session (terminal tab) closes when the one hundred seconds are complete and the process ends.</p>

        <p>Now, we will see how <code>exec</code> command works in Bash scripts.</p>

        <p>Create a script file with the following content:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while true
do
        echo "1. Update "
        echo "2. Upgrade "
        echo "3. Exit"
    read Input
    case "$Input" in
        1) exec sudo apt update ;;
        2) exec sudo apt upgrade  ;;
        3) break
    esac
done</code></pre>

        <p>Change the script permission to executable and run the script in the current environment to see the results:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
1. Update 
2. Upgrade 
3. Exit
</code></pre>

        <p>Executing the script with the <code>source</code> command applies the script behavior to the current Bash shell. Use <code>exec</code> to run Bash scripts within other programs for a clean exit.</p>

        <p>The <code>exec</code> command finds use in manipulating file descriptors for error logging in Bash scripts. The default Linux file descriptors are:</p>

        <ol>
            <li>stdin (0) - Standard in</li>
            <li>stdout (1) - Standard out</li>
            <li>stderr (2) - Standard error</li>
        </ol>

        <p>Create a Bash script with the following content:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat logging.sh
#!/bin/bash

# Create test.log file
touch test.log

# Save test.log to log_file variable
log_file="test.log"

# Redirect stdin to $log_file
exec 1>>$log_file

# Redirect stderr to the same place as stdin
exec 2>&1

echo "This line is added to the log file"
echo "And any other lines after"
eho "This line has an error and is logged as stderr"</code></pre>

        <p>Change the script permission to executable and run the script in the current environment to see the results:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ chmod +x logging.sh
[hemimorphite@ubuntu ~]$ ./logging.sh</code></pre>

        <p>The script does not output any code. Instead, all the output logs to the <code>test.log</code> file.</p>

        <p>Use the <code>cat</code> command to see the <code>test.log</code> file contents:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat test.log
This line is added to the log file
And any other lines after
./logging.sh: line 17: eho: command not found</code></pre>

        <h5 class="post-subtitle">exit</h5>

        <p><code>exit</code> command is used to exit the shell where it is currently running.</p>
        
        <p>The syntax of the <code>exit</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">exit [n]</code></pre>

        <p>It takes one parameter as <code>[n]</code> and exits the shell with a return of status <code>n</code>. If <code>[n]</code> is not provided, then it simply returns the status of last command that is executed.</p>

        <h5 class="post-subtitle">export</h5>

        <p>The <code>export</code> command is used to export environmental variables that are accessible by all processes running in the current shell session and its child processes.</p>

        <p>The syntax of the <code>export</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">export [-fn] [-p] [name[=value]]</code></pre>

        <p>If the <code>-f</code> option is supplied, the names musrt refer to shell functions.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ example_function() {
    echo "This is an example function."
}
[hemimorphite@ubuntu ~]$ export -f example_function 
[hemimorphite@ubuntu ~]$ bash -c example_function
This is an example function.</code></pre>
        
        <p>If the <code>-p</code> option is given or there is no option supplied, a list of names of all exported variables is displayed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export -p
declare -x DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/1000/bus"
declare -x DISPLAY=":0"
declare -x HOME="/home/hemimorphite"
declare -x HOSTTYPE="x86_64"
declare -x LANG="C.UTF-8"
declare -x LESSCLOSE="/usr/bin/lesspipe %s %s"
declare -x LESSOPEN="| /usr/bin/lesspipe %s"
declare -x LOGNAME="hemimorphite"
declare -x LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"
declare -x MOTD_SHOWN="update-motd"
declare -x NAME="DESKTOP-J3NDV0Q"
declare -x OLDPWD
declare -x PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
declare -x PULSE_SERVER="unix:/mnt/wslg/PulseServer"
declare -x PWD="/home/hemimorphite"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x TERM="xterm-256color"
declare -x USER="hemimorphite"
declare -x WAYLAND_DISPLAY="wayland-0"
declare -x WSL2_GUI_APPS_ENABLED="1"
declare -x WSLENV=""
declare -x WSL_DISTRO_NAME="Ubuntu"
declare -x WSL_INTEROP="/run/WSL/247687_interop"
declare -x XDG_DATA_DIRS="/usr/local/share:/usr/share:/var/lib/snapd/desktop"
declare -x XDG_RUNTIME_DIR="/run/user/1000/"</code></pre>

        <p>The output lists all the variables used in the current shell session, and it is usually the same as running <code>export</code> without options.</p>
        
        <p>The <code>-n</code> option removes the specified variables and functions from the list of exported variables.</p>
        
        <p>In the following example, we remove the <code>HOME</code> variable:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export -n HOME
[hemimorphite@ubuntu ~]$ export | grep HOME
[hemimorphite@ubuntu ~]$</code></pre>
        
        <p>If a variable name is followed by =value, the value of the variable is set to value.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export VARNAME="value"
[hemimorphite@ubuntu ~]$ printenv VARNAME
value</code></pre>

        <p>You also can assign a value to a variable first before exporting it using the <code>export</code> command. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ x=100
[hemimorphite@ubuntu ~]$ export x
[hemimorphite@ubuntu ~]$ printenv x
100</code></pre>
        
        <h5 class="post-subtitle">getopts</h5>

        <p>The <code>getopts</code> is used by shell scripts to parse positional parameters.</p>
        
        <p>The syntax of the <code>getopts</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">getopts optstring name [arg …]</code></pre>
        
        <p><code>optstring</code> contains the option characters to be recognized; if a character is followed by a colon, the <code>option</code> is expected to have an argument, which should be separated from it by whitespace.The colon (:) and question mark (?) may not be used as option characters. Each time it is invoked, <code>getopts</code> places the next option in the shell variable <code>name</code>, initializing name if it does not exist, and the index of the next argument to be processed into the variable <code>OPTIND</code>. <code>OPTIND</code> is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument, <code>getopts</code> places that argument into the variable <code>OPTARG</code>. The shell does not reset <code>OPTIND</code> automatically; it must be manually reset between multiple calls to <code>getopts</code> within the same shell invocation if a new set of parameters is to be used.</p>
        
        <p>Here's a simple example that demonstrates the basic usage of <code>getopts</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts "a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -b -a value1
Processing b : OPTIND is 2
Option b is set
Processing a : OPTIND is 4
Option a is set with argument: value1
[hemimorphite@ubuntu ~]$ ./demo.sh -a value1 -b
Processing a : OPTIND is 3
Option a is set with argument: value1
Processing b : OPTIND is 4
Option b is set</code></pre>
        
        <p>We mentioned above that the other variable that <code>getopts</code> will set for you is the index of where you are up to in processing the options; this is the <code>OPTIND</code> variable. It's the index of the next script argument to be processed, so if your script takes arguments: <code>demo.sh -b -a value1</code>, then as it's processing <code>-s</code>, the <code>OPTIND</code> is 2, because the next thing it will process will be the 2nd argument (<code>-a</code>). When it's processing <code>-a value1</code>, <code>OPTIND</code> is 4, because <code>value1</code> is the 3rd script argument and the next index is 4.</p>

        <p>When <code>getopts</code> reaches the end of the options, it exits with a status value of 1. It also sets name to the character <code>?</code> and sets <code>OPTIND</code> to the index of non-option argument. <code>getopts</code> recognizes the end of the options by any of the following situations:</p>

        <ul>
            <li>Finding an option that require an argument but not supply with an argument</li>
            <li>Finding an option that doesn't start with -</li>
            <li>Encountering an error (for example, an unrecognized option letter)</li>
        </ul>

        <p>If an invalid option is seen or a required argument of an option is not found, a question mark (<code>?</code>>) is placed in <code>name</code> and, prints an error message and unsets <code>OPTARG</code>.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts "a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -a
./demo.sh: option requires an argument -- a
Processing ? : OPTIND is 2
Invalid option: -
[hemimorphite@ubuntu ~]$ ./demo.sh -z
./demo.sh: illegal option -- z
Processing ? : OPTIND is 2
Invalid option: -</code></pre>

        <p>If the first character of <code>optstring</code> is a colon, silent error reporting is used.</p>
        
        <p>If an invalid option is seen and silent error reporting is used, a question mark (<code>?</code>>) is placed in <code>name</code> and, the option character found is placed in <code>OPTARG</code> and no error message is printed.</p>

        <p>If a required argument of an option is not found and silent error reporting is used, then a colon (<code>:</code>) is placed in <code>name</code> and <code>OPTARG</code> is set to the option character found.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts ":a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    :)
        echo "Argument missing"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -a
Processing : : OPTIND is 2
Argument missing
[hemimorphite@ubuntu ~]$ ./demo.sh -z
Processing ? : OPTIND is 2
Invalid option: -z</code></pre>

        <h5 class="post-subtitle">hash</h5>

        <p>The <code>hash</code> command affects the way the current shell remembers a command's path name, either by adding a path name to a list or purging the contents of the list.</p>

        <p>The syntax of the <code>hash</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">hash [-r] [-p filename] [-dt] [name]</code></pre>

        <p>When we run any commands or programs in the Linux shells, it records the location of the binary of these commands in a hash table.</p>
        
        <p>The commands are found by searching through the directories listed in <code>PATH</code>.</p>

        <p>To list the entries in the hash table, we can run the <code>hash</code> command without any arguments:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>
        
        <p>Since we haven't run any commands, there are no entries in the hash table.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ which ls >/dev/null
[hemimorphite@ubuntu ~]$ hash
hits	command
    1	/usr/bin/which
    2	/usr/bin/ls</code></pre>

        <p>We can run the hash command to add commands into the hash table without running it.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash whoami grep xargs
[hemimorphite@ubuntu ~]$ hash
hits	command
    0	/usr/bin/grep
    0	/usr/bin/whoami
    0	/usr/bin/xargs</code></pre>

        <p>The <code>hash</code> command resets the table when we supply the <code>-r</code> option:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash whoami grep xargs
[hemimorphite@ubuntu ~]$ hash
hits	command
    0	/usr/bin/grep
    0	/usr/bin/whoami
    0	/usr/bin/xargs
[hemimorphite@ubuntu ~]$ hash -r
[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>

        <p>We can remove specific commands from the table using the <code>-d</code> option followed by the command name.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ which ls >/dev/null
[hemimorphite@ubuntu ~]$ hash -d ls
[hemimorphite@ubuntu ~]$ hash
hits	command
    1	/usr/bin/which</code></pre>
        
        <p>The <code>hash</code> command provides us a way to set the path of commands manually using the <code>–p</code> option. We specify the <code>-p</code> option followed by the path to the binary and then the command name we want to associate it with.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash -p /usr/bin/date another-date
[hemimorphite@ubuntu ~]$ another-date
Sat Jun 15 07:17:01 PM WIB 2024</code></pre>
        
        <p>The <code>hash</code> command provides us a way to display the lists of commands in the hash table  using the <code>–l</code> option.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls
[hemimorphite@ubuntu ~]$ mkdir example
[hemimorphite@ubuntu ~]$ rmdir example
[hemimorphite@ubuntu ~]$ touch file
[hemimorphite@ubuntu ~]$ rm file
[hemimorphite@ubuntu ~]$ hash -l
builtin hash -p /usr/bin/ls ls
builtin hash -p /usr/bin/mkdir mkdir
builtin hash -p /usr/bin/rmdir rmdir
builtin hash -p /usr/bin/touch touch
builtin hash -p /usr/bin/rm rm</code></pre>

        <p>The <code>hash</code> command doesn't report any shell built-in commands.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ echo hello
hello
[hemimorphite@ubuntu ~]$ pwd
/home/hemimorphite
[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>

        <h5 class="post-subtitle">pwd</h5>

        <p>The <code>pwd</code> (print working directory) command is used to displays the full pathname of the current directory.</p>

        <p>The syntax of the <code>pwd</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">pwd [-LP]</code></pre>

        <p>The <code>-L</code> option is used to display the logical current directory. This means it shows the path you used to get to the directory, even if it involves symbolic links. The default behavior of <code>pwd</code> command is the same as <code>pwd -L</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ln -s /var/log link_to_log
[hemimorphite@ubuntu ~]$ cd link_to_log
[hemimorphite@ubuntu ~/link_to_log]$ pwd -L
/home/hemimorphite/link_to_log</code></pre>

        <p>When we use <code>pwd -L</code>, it returns <code>/home/hemimorphite/link_to_log</code>, which is the logical path we used.</p>

        <p>The <code>-P</code> option is used to display the physical current directory. This means it shows the actual location of the directory, ignoring symbolic links.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ln -s /var/log link_to_log
[hemimorphite@ubuntu ~]$ cd link_to_log
[hemimorphite@ubuntu ~/link_to_log]$ pwd -P
/var/log</code></pre>

        <p>After navigating to <code>link_to_log</code>, when we use <code>pwd -P</code>, it returns <code>/var/log</code>, which is the actual location of the directory.</p>
        
        <h5 class="post-subtitle">readonly</h5>

        <p>The <code>readonly</code> command is used to mark shell variables and functions as unchangeable. Once a variable or function is set as readonly, its value or function definition cannot be changed or unset.</p>

        <p>The syntax of the <code>readonly</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">readonly [-aAf] [-p] [name[=value]] …</code></pre>
        
        <p>The <code>readonly</code> command without option is used to mark shell variables as readonly or unchangeable.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var1="Initial value"
[hemimorphite@ubuntu ~]$ readonly var1
[hemimorphite@ubuntu ~]$ var1="New value"
bash: var1: readonly variable</code></pre>

        <p>The <code>-f</code> option is used to mark shell functions as readonly or unchangeable.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ func1() {
>   echo "This function is readonly"
> }
[hemimorphite@ubuntu ~]$ readonly -f func1
[hemimorphite@ubuntu ~]$ func1() {
>   echo "Change function output"
> }
bash: func1: readonly function</code></pre>

        <p>The <code>-a</code> option is used to mark indexed array variables as readonly or unchangeable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ declare -a countries
[hemimorphite@ubuntu ~]$ countries=("India" "France" "United Kingdom")
[hemimorphite@ubuntu ~]$ readonly -a countries
[hemimorphite@ubuntu ~]$ countries=("Japan" "Spanyol" "United State")
bash: countries: readonly variable</code></pre>

        <p>The <code>-A</code> option is used to mark associative array variables as readonly or unchangeable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ declare -A country_capitals
[hemimorphite@ubuntu ~]$ country_capitals=(["India"]="New Delhi" ["France"]="Paris" ["United Kingdom"]="London")
[hemimorphite@ubuntu ~]$ readonly -A country_capitals
[hemimorphite@ubuntu ~]$ country_capitals=(["Japan"]="Tokyo" ["Spanyol"]="Madrid" ["United State"]="Washington")
bash: country_capitals: readonly variable</code></pre>

        <p>The <code>-p</code> option is used to display the list of all readonly variables.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ readonly -p
declare -r BASHOPTS="checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:globasciiranges:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath"
declare -ar BASH_VERSINFO=([0]="5" [1]="1" [2]="16" [3]="1" [4]="release" [5]="x86_64-pc-linux-gnu")
declare -ir EUID="1000"
declare -ir PPID="260303"
declare -r SHELLOPTS="braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor"
declare -ir UID="1000"</code></pre>

        <p>The <code>-f</code> option is also used to display the list of all readonly functions.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ func1() {
>   echo "This function is readonly"
> }
[hemimorphite@ubuntu ~]$ readonly -f func1
[hemimorphite@ubuntu ~]$ readonly -f
func1 ()
{
    echo "This function is readonly"
}
declare -fr func1</code></pre>
        
        <h5 class="post-subtitle">return</h5>

        <p>The <code>return</code> command is used in the script to return the value called in the function. The <code>return</code> command is always used in the function, if used outside the function it has no effect. This command stops the execution of the function where it is used.</p>

        <p>The syntax of the <code>return</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">return [n]</code></pre>

        <p>The <code>return</code> command takes a parameter <code>[n]</code>, if n is mentioned then it returns <code>[n]</code> and if n is not mentioned then it returns the status of the last command executed within the function or script. n can only be a numeric value.</p>

        <p>The special variable <code>$?</code> is used to hold the return value and the status of last executed command.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ add() {
>   add=$(($1+$2))
>   return $add
> }
[hemimorphite@ubuntu ~]$ add 25 26
[hemimorphite@ubuntu ~]$ echo $?
51</code></pre>

        <h5 class="post-subtitle">shift</h5>

        <p>The <code>shift</code> command is used to shift the positional parameters (such as arguments passed to a bash script) to the left, putting each parameter in a lower position.</p>

        <p>The syntax of the <code>shift</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">shift [n]</code></pre>

        <p>The <code>shift</code> command takes a parameter <code>[n]</code>, if <code>[n]</code> is mentioned then the current positional parameters are shifted left <code>[n]</code> times. If <code>[n]</code> is not specified, the default value of n is 1. So the commands <code>shift 1</code> and <code>shift</code> (with no argument) do the same thing</p>

        <p>If a parameter is shifted to a position with a number less than 1, its value is discarded. So the command <code>shift</code> always discards the previous value of <code>$1</code>, and <code>shift 2</code> always discards the previous values of <code>$1</code> and <code>$2</code>.</p>

        <p>The special positional parameter <code>$0</code> is excluded from all shift operations, and never modified by the <code>shift</code> command.</p>
        
        <p>Parameters with a number 10 or greater can be referenced by putting the number in brackets, for example <code>${10}</code>, <code>${11}</code>, or <code>${12345}</code>.</p>

        <p>Bash keeps track of the total number of positional parameters. This number is stored in the special shell variable <code>$#</code>.</p>
                
        <p>The value of <code>$#</code> decreases by n every time you run <code>shift</code>.</p>
        
        <p>You can pass arguments to a bash script by typing them after the script's name when running it. Each argument should be separated by a space.</p>

        <p>Inside the script, you can access these arguments using special variables. <code>$1</code> represents the first argument, <code>$2</code> the second, and so on. Let's look at an example:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash
echo 1: $1
echo 1: $2
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh one two
1: one
1: two</code></pre>
        
        <p>You will encounter situations that require more than just <code>$1</code>, <code>$2</code>, etc. Bash provides <code>shift</code> command to help you manage these scenarios.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

USAGE="usage: $0 arg1 arg2 ... argN"

if (( $# == 0 )) 
then
    echo "$USAGE"
    exit 1 
fi
n=1
print "The arguments to the script are:" 
while (($#)) 
do
    echo $n: $1 
    n=$((n+1))
    shift 
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh one two three four five six
The arguments to the script are: 
1: one 
2: two 
3: three 
4: four
5: five
6: six</code></pre>
        
        <h5 class="post-subtitle">times</h5>

        <p>The <code>shift</code> command is used to print out the user and system times used by the shell and its children.</p>
        
        <h5 class="post-subtitle">trap</h5>
        
        <p>The <code>trap</code> command is used to catch any supported signal and react upon it.</p>

        <p>The syntax of the <code>trap</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">trap [-lp] [arg] [sigspec …]</code></pre>

        <p>If <code>arg</code> is absent (and there is a single <code>sigspec</code>) or equal to -, each specified signal's disposition is reset to the value it had when the shell was started. For example:</p>

        <pre><code class="language-bash hljs">trap - SIGINT SIGABRT</code></pre>

        <p>If <code>arg</code> is the null string, then the signal specified by each <code>sigspec</code> is ignored by the shell; in other words, the signal specified by each <code>sigspec</code> is disabled.</p>
        
        <pre><code class="language-bash hljs">trap "" SIGINT SIGABRT</code></pre>

        <p>The <code>-l</code> option causes the shell to print a list of all the signals and their numbers.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ trap -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX</code></pre>

        <p>The <code>trap -l</code> command doesn't display signals 32 and 33 in the output because they aren't supported on Linux.</p>

        <p>The <code>-p</code> option is used to display the trap commands.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ trap "echo SIGINT terminated the process" SIGINT
[hemimorphite@ubuntu ~]$ trap "echo SIGTERM terminated the process" SIGTERM
[hemimorphite@ubuntu ~]$ trap -p
trap -- 'echo SIGINT terminated the process' SIGINT
trap -- 'echo SIGTERM terminated the process' SIGTERM
[hemimorphite@ubuntu ~]$ trap -p SIGINT
trap -- 'echo SIGINT terminated the process' SIGINT
[hemimorphite@ubuntu ~]$ trap - SIGINT SIGTERM</code></pre>

        <p>If a <code>sigspec</code> is <code>0</code> or <code>EXIT</code>, <code>arg</code> is executed when the shell or subshell exits.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the subshell exits
trap "echo Exiting subshell..." EXIT
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh
Exiting subshell...</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the shell exits
trap "echo Exiting shell..." EXIT

exit
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
Exiting shell...
[hemimorphite@ubuntu ~]$ trap - EXIT</code></pre>
        
        <p>If a <code>sigspec</code> is <code>RETURN</code>, the command <code>arg</code> is executed each time the shell script finishes executing by the <code>.</code> or <code>source</code> builtins.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the script finishes executing
trap "echo Returning..." RETURN
[hemimorphite@ubuntu ~]$ . demo.sh
Returning...
[hemimorphite@ubuntu ~]$ trap - RETURN</code></pre>
        
        <p>If a <code>sigspec</code> is <code>DEBUG</code>, the command <code>arg</code> is executed before every simple command, <code>for</code> command, <code>case</code> command, <code>select</code> command, every arithmetic for command, and before the first command executes in a shell function.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo Executing..." DEBUG

echo Hello World

whoami

which echo
[hemimorphite@ubuntu ~]$ ./demo.sh
Executing...
Hello World
Executing...
hemimorphite
Executing...
/usr/bin/echo</code></pre>

        <p>If a <code>sigspec</code> is <code>ERR</code>, the command <code>arg</code> is executed whenever a pipeline (which may consist of a single simple command), a list, or a compound command returns a non-zero exit status. The <code>ERR</code> trap is not executed if the failed command is part of the command list immediately following an <code>until</code> or <code>while</code> keyword, part of the test following the <code>if</code> or <code>elif</code> reserved words, part of a command executed in a <code>&&</code> or <code>||</code> list except the command following the final <code>&&</code> or <code>||</code>, any command in a pipeline but the last, or if the command's return status is being inverted using <code>!</code>. These are the same conditions obeyed by the <code>errexit</code> (<code>-e</code>) option.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo An error occurred." ERR

# unknown command
getcommand
[hemimorphite@ubuntu ~]$ ./demo.sh
./demo.sh: line 6: getcommand: command not found
An error occurred.</code></pre>
        
        <p>We can use the <code>trap</code> command to intercept signals so that we can handle them.</p>

        <p>We can set and invoke handlers for any and all available signals</p>
        
        <p>We can even prevent the default action for all signals except <code>SIGKILL</code> and <code>SIGSTOP</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo 'sending SIGHUP signal'" 1
trap "echo 'sending SIGINT signal'" 2
trap "echo 'sending SIGQUIT signal'" 3
trap "echo 'sending SIGILL signal'" 4
trap "echo 'sending SIGTRAP signal'" 5
trap "echo 'sending SIGABRT signal'" 6
trap "echo 'sending SIGBUS signal'" 7
trap "echo 'sending SIGFPE signal'" 8
#trap "echo 'sending SIGKILL signal'" 9
trap "echo 'sending SIGUSR1 signal'" 10
trap "echo 'sending SIGSEGV signal'" 11
trap "echo 'sending SIGUSR2 signal'" 12
trap "echo 'sending SIGPIPE signal'" 13
trap "echo 'sending SIGALRM signal'" 14
trap "echo 'sending SIGTERM signal'" 15
trap "echo 'sending SIGSTKFLT signal'" 16
trap "echo 'sending SIGCHLD signal'" 17
trap "echo 'sending SIGCONT signal'" 18
#trap "echo 'sending SIGSTOP signal'" 19
trap "echo 'sending SIGTSTP signal'" 20
trap "echo 'sending SIGTTIN signal'" 21
trap "echo 'sending SIGTTOU signal'" 22
trap "echo 'sending SIGURG signal'" 23
trap "echo 'sending SIGXCPU signal'" 24
trap "echo 'sending SIGXFSZ signal'" 25
trap "echo 'sending SIGVTALRM signal'" 26
trap "echo 'sending SIGPROF signal'" 27
trap "echo 'sending SIGWINCH signal'" 28
trap "echo 'sending SIGIO signal'" 29
trap "echo 'sending SIGPWR signal'" 30
trap "echo 'sending SIGTSTP signal'" 31
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
[hemimorphite@ubuntu ~]$ kill -SIGHUP $$
sending SIGHUP signal
[hemimorphite@ubuntu ~]$ kill -SIGINT $$
sending SIGINT signal
[hemimorphite@ubuntu ~]$ kill -SIGQUIT $$
sending SIGQUIT signal
[hemimorphite@ubuntu ~]$ kill -SIGILL $$
sending SIGILL signal
[hemimorphite@ubuntu ~]$ kill -SIGTRAP $$
sending SIGTRAP signal
[hemimorphite@ubuntu ~]$ kill -SIGABRT $$
sending SIGABRT signal
[hemimorphite@ubuntu ~]$ kill -SIGBUS $$
sending SIGBUS signal
[hemimorphite@ubuntu ~]$ kill -SIGFPE $$
sending SIGFPE signal
[hemimorphite@ubuntu ~]$ kill -SIGUSR1 $$
sending SIGUSR1 signal
[hemimorphite@ubuntu ~]$ kill -SIGSEGV $$
sending SIGSEGV signal
[hemimorphite@ubuntu ~]$ kill -SIGUSR2 $$
sending SIGUSR2 signal
[hemimorphite@ubuntu ~]$ kill -SIGPIPE $$
sending SIGPIPE signal
[hemimorphite@ubuntu ~]$ kill -SIGALRM $$
sending SIGALRM signal
[hemimorphite@ubuntu ~]$ kill -SIGTERM $$
sending SIGTERM signal
[hemimorphite@ubuntu ~]$ kill -SIGSTKFLT $$
sending SIGSTKFLT signal
[hemimorphite@ubuntu ~]$ kill -SIGCHLD $$
sending SIGCHLD signal
[hemimorphite@ubuntu ~]$ kill -SIGCONT $$
sending SIGCONT signal
[hemimorphite@ubuntu ~]$ kill -SIGTSTP $$
sending SIGTSTP signal
[hemimorphite@ubuntu ~]$ kill -SIGTTIN $$
sending SIGTTIN signal
[hemimorphite@ubuntu ~]$ kill -SIGTTOU $$
sending SIGTTOU signal
[hemimorphite@ubuntu ~]$ kill -SIGURG $$
sending SIGURG signal
[hemimorphite@ubuntu ~]$ kill -SIGXCPU $$
sending SIGXCPU signal
[hemimorphite@ubuntu ~]$ kill -SIGXFSZ $$
sending SIGXFSZ signal
[hemimorphite@ubuntu ~]$ kill -SIGVTALRM $$
sending SIGVTALRM signal
[hemimorphite@ubuntu ~]$ kill -SIGPROF $$
sending SIGPROF signal
[hemimorphite@ubuntu ~]$ kill -SIGWINCH $$
sending SIGWINCH signal
[hemimorphite@ubuntu ~]$ kill -SIGIO $$
sending SIGIO signal
[hemimorphite@ubuntu ~]$ kill -SIGPWR $$
sending SIGPWR signal
[hemimorphite@ubuntu ~]$ kill -SIGTSTP $$
sending SIGTSTP signal
[hemimorphite@ubuntu ~]$ trap - SIGHUP SIGINT SIGQUIT SIGILL SIGTRAP SIGABRT SIGBUS SIGFPE SIGUSR1 SIGSEGV SIGUSR2 SIGPIPE SIGALRM SIGTERM SIGSTKFLT SIGCHLD SIGCONT SIGTSTP SIGTTIN SIGTTOU SIGURG SIGXCPU SIGXFSZ SIGVTALRM SIGPROF SIGWINCH SIGIO SIGPWR SIGTSTP</code></pre>

        <h5 class="post-subtitle">umask</h5>
        
        <p>The <code>umask</code> command is used to set default permissions for files or directories the user creates.</p>

        <p>The syntax of the <code>umask</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">umask [-p] [-S] [mode]</code></pre>

        <p>In Linux, each file is associated with an owner and a group and assigned with permission access rights for three different classes of users:</p>

        <ul>
            <li>The file owner</li>
            <li>The group members</li>
            <li>Everyone else</li>
        </ul>

        <p>There are three permissions types that apply to each class:</p>

        <ul>
            <li>The read permission</li>
            <li>The write permission</li>
            <li>The execute permission</li>
        </ul>

        <p>The following example shows the permissions for a directory:</p>

        <pre><code class="language-bash hljs">drwxr-xr-x 12 hemimorphite hemimorphite 4.0K Jun  16 20:51 dirname
|[-][-][-]    [----------] [----------]
| |  |  |           |           |       
| |  |  |           |           +----> Group
| |  |  |           +----------------> Owner
| |  |  +----------------------------> Others Permissions
| |  +-------------------------------> Group Permissions
| +----------------------------------> Owner Permissions
+------------------------------------> File Type</code></pre>
        
        <p>The first character represents the file type which can be a regular file (-), a directory (d), a symbolic link (l), or any other special type of file.</p>

        <p>Character <code>r</code> with an octal value of <code>4</code> stands for <code>read</code>, <code>w</code> with an octal value of <code>2</code> for <code>write</code>, <code>x</code> with an octal value of <code>1</code> for <code>execute</code> permission, and (<code>-</code>) with an octal value of <code>0</code> for no permissions.</p>

        <p>If we represent the file permissions using a numeric notation, we will come up to the number <code>755</code>:</p>

        <ul>
            <li>Owner: <code>rwx</code> = <code>4+2+1</code> = <code>7</code></li>
            <li>Group: <code>r-x</code> = <code>4+0+1</code> = <code>5</code></li>
            <li>Other: <code>r-x</code> = <code>4+0+1</code> = <code>5</code></li>
        </ul>

        <p>The first digit represents the special permissions, and if it is omitted, it means that no special permissions are set on the file. In the example above <code>755</code> is the same as <code>0755</code>. The first digit can be a combination of <code>4</code> for <code>setuid</code>, <code>2</code> for <code>setgid</code>, and <code>1</code> for Sticky Bit.</p>

        <p>On Linux systems, the default creation permissions are <code>666</code> for files, which gives read and write permission to user, group, and others, and to <code>777</code> for directories, which means read, write and execute permission to user, group, and others. By default, Linux does not allow a file to be created with execute permissions.</p>

        <p>The default creation permissions can be modified using the <code>umask</code> command.</p>

        <p><code>umask</code> affects only the current shell environment. On most Linux distributions, the <code>umask</code> value is set in the <code>pam_umask.so</code> or <code>/etc/profile</code> file.</p>

        <p>To view the current mask value:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask
022</code></pre>
        
        <p>The <code>umask</code> value contains the permission bits that will NOT be set on the newly created files and directories.</p>

        <p>Once we get the <code>umask</code> value, that is <code>022</code>, we can calculated the permissions for:</p>
        
        <ul>
            <li>Files: <code>666 - 022 = 644</code> (the default creation permissions for file – umask value = the permissions for file). The owner can read and modify the files. Group and others can only read the files.</li>
            <li>Directories: <code>777 - 022 = 755</code> (the default creation permissions for drectory – umask value = the permissions for drectory). The owner can <code>cd</code> into the directory, and list, read, modify, create or delete the files in the directory. Group and others can <code>cd</code> into the directory and list and read the files.</li>
        </ul>

        <p>If the <code>-S</code> option is supplied without a <code>mode</code> argument, the mask is printed in a symbolic format.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask -S
u=rwx,g=rx,o=rx</code></pre>

        <p>If the <code>-p</code> option is supplied, and <code>mode</code> is omitted, the output is in a form that may be reused as input.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask -p
umask 0022</code></pre>

        <h5 class="post-subtitle">unset</h5>

        <p>The <code>unset</code> is used to unset or undefine values and attributes of variables and functions.</p>

        <p>The syntax of the <code>unset</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">unset [-fnv] [name]</code></pre>

        <p>If the <code>-v</code> option is given, each <code>name</code> refers to a shell variable and that variable is removed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ varname="hemimorphite blog"
[hemimorphite@ubuntu ~]$ echo $varname
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -v varname
[hemimorphite@ubuntu ~]$ echo $varname

[hemimorphite@ubuntu ~]$</code></pre>

        <p>If the <code>-f</code> option is given, the names refer to shell functions, and the function definition is removed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ getname() {
>   echo "hemimorphite blog"
> }
[hemimorphite@ubuntu ~]$ getname
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -f getname
[hemimorphite@ubuntu ~]$ getname

[hemimorphite@ubuntu ~]$</code></pre>

        <p>If the <ocde>-n</ocde> option is supplied, and <code>name</code> is a variable with the <code>nameref</code> attribute, <code>name</code> will be unset rather than the variable it references.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var=blog
[hemimorphite@ubuntu ~]$ declare -n varnameref=${var}name
[hemimorphite@ubuntu ~]$ varnameref="hemimorphite blog"
[hemimorphite@ubuntu ~]$ echo $blogname
hemimorphite blog
[hemimorphite@ubuntu ~]$ echo $varnameref
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -n varnameref
[hemimorphite@ubuntu ~]$ echo $blogname
hemimorphite blog
[hemimorphite@ubuntu ~]$ echo $varnameref

[hemimorphite@ubuntu ~]$</code></pre>

        <p><code>-n</code> option has no effect if the <code>-f</code> option is supplied.</p>
        
        <p>If no options are supplied, each <code>name</code> refers to a variable or refers to a function; is removed.</p>

        <p>Readonly variables and functions can't be unset.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ readonly blogname="hemimorphite"
[hemimorphite@ubuntu ~]$ unset blogname
-bash: unset: blogname: cannot unset: readonly variable</code></pre>
        
        <h5 class="post-subtitle">test</h5>

        <p>The <code>test</code> command compares one element against another and returns true or false.</p>

        <p>The syntax of the <code>test</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">test expr</code></pre>

        <p>Or</p>

        <pre><code class="language-bash hljs">[ expr ]</code></pre>

        <p><code>test</code> exits with the status determined by <code>expr</code>. Placing the <code>expr</code> between square brackets ([ and ]) is the same as testing the <code>expr</code> with <code>test</code>. To see the exit status at the command prompt, <code>echo</code> the value <code>$?</code> A value of <code>0</code> means the expression evaluated as <code>true</code>, and a value of <code>1</code> means the expression evaluated as <code>false</code>.</p>

        <p>Expressions of <code>test</code> command take the following forms:</p>
        
        
        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <th style="min-width:10rem;">Expression</th>
                    <th style="min-width:30rem;">Description</th>
                    <th style="min-width:auto;">Example</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>expression</code>
                    </td>
                    <td>
                        <code>expression</code> is <code>true</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>! expression</code>
                    </td>
                    <td>
                        <code>expression</code> is <code>false</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test ! -z hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ ! -z hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>expression1 -a expression2</code>
                    </td>
                    <td>
                        both <code>expression1</code> and <code>expression2</code> are <code>true</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite -a hemimorphite != Hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite -a hemimorphite != Hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>expression1 -o expression2</code>
                    </td>
                    <td>either <code>expression1</code> or <code>expression2</code> is true </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -z hemimorphite -o hemimorphite != Hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -z hemimorphite -o hemimorphite != Hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-n string</code>
                    </td>
                    <td>the length of <code>string</code> is nonzero </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string</code>
                    </td>
                    <td>
                        equivalent to <code>-n string</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-z string</code>
                    </td>
                    <td>the length of <code>string</code> is zero</td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -z ''
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -z '' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string1 = string2</code>
                    </td>
                    <td>
                        the strings are equal
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 'hemimorphite blog' = 'hemimorphite blog'
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 'hemimorphite blog' = 'hemimorphite blog' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string1 != string2</code>
                    </td>
                    <td>the strings are not equal</td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 'hemimorphite blog' != 'Hemimorphite Blog'
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 'hemimorphite blog' != 'Hemimorphite Blog' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -eq integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> equals <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -eq 100
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -eq 100 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -ge integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is greater than or equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -ge 60
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -ge 60 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -gt integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is greater than <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -gt 60
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -gt 60 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -le integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is less than or equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -le 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -le 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -lt integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is less than <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -lt 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -lt 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -ne integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is not equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -ne 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -ne 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -ef file2</code>
                    </td>
                    <td>
                        <code>file1</code> and <code>file2</code> have the same device and inode (index node) numbers. The following metadata exists in an inode:
                        <ul>
                            <li>File type</li>
                            <li>Permissions</li>
                            <li>Owner ID</li>
                            <li>Group ID</li>
                            <li>Size of file</li>
                            <li>Time last accessed</li>
                            <li>Time last modified</li>
                            <li>Soft/Hard Links</li>
                            <li>Access Control List (ACLs)</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch doc1.txt
# create a hard link to doc1.txt
[hemimorphite@ubuntu ~]$ ln doc1.txt doc2.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc3.txt
[hemimorphite@ubuntu ~]$ test doc1.txt -ef doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test doc1.txt -ef doc3.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test doc2.txt -ef doc3.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc1.txt -ef doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc1.txt -ef doc3.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc2.txt -ef doc3.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -nt file2</code>
                    </td>
                    <td>
                        <code>file1</code> is newer (modification date) than <code>file2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch olddoc.txt
# create a newer file
[hemimorphite@ubuntu ~]$ touch newdoc.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ test newdoc.txt -nt olddoc.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ newdoc.txt -nt olddoc.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -ot file2</code>
                    </td>
                    <td>
                        <code>file1</code> is older (modification date) than <code>file2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch olddoc.txt
# create a newer file
[hemimorphite@ubuntu ~]$ touch newdoc.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ test olddoc.txt -ot newdoc.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ olddoc.txt -ot newdoc.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-b file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is block special (block device). A block special file acts as a direct interface to a block device. A block device is any device which performs data I/O in units of blocks.<br>
                        Examples of block special files:
                        <ul>
                            <li><code>dev/fdn</code>: mounted partitions of floppy disks. The letter <code>n</code> refers to a physical device</li>
                            <li><code>dev/scdn</code> or <code>dev/srn</code>: mounted partitions of SCSI CD-ROMs. The letter <code>n</code> refers to a physical device</li>
                            <li><code>dev/hdxn</code>: mounted partitions of Integrated Drive Electronics (IDE) controllers. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/hda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>dev/sdxn</code>: mounted partitions of SCSI disks. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/sda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>dev/mmcblkxpn</code>: mounted partitions of SD/MMC cards. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/sda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>/dev/loopn</code> — loop devices. These are special devices which allow a file in the filesystem to be used as a block device. The file may contain an entire filesystem of its own, and be accessed as if it were a mounted partition on a physical storage device. For example, an ISO disk image file may be mounted as a loop device.</li>
                            <li>etc</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -b /dev/sda1
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test -b /dev/loop1
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -b /dev/sda1 ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -b /dev/loop1 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-c file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is character special. A character special file is similar to a block device, but data is written one character (eight bits, or one byte) at a time.<br>
                        Examples of character special files:<br>
                        <ul>
                            <li><code>/dev/stdin</code> (Standard input)</li>
                            <li><code>/dev/stdout</code> (Standard output.)</li>
                            <li><code>/dev/stderr</code> (Standard error.)</li>
                            <li><code>/dev/random</code> (PRNG which may delay returning a value to acquire additional entropy)</li>
                            <li><code>/dev/urandom</code> (PRNG which always returns a value immediately, regardless of required entropy)</li>
                            <li><code>/dev/null</code> (The null device. Reading from this file always gets a null byte; writing to this file successfully does nothing)</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -c /dev/stdin
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test -c /dev/urandom
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -c /dev/stdin ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -c /dev/urandom ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-d file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a directory
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir docs
[hemimorphite@ubuntu ~]$ test -d docs
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -d docs ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-e file</code>
                    </td>
                    <td>
                        <code>file</code> exists
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ test -e specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -e specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-f file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a regular file
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ test -f specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -f specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-g file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is set-group-ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod g+s specs.txt
[hemimorphite@ubuntu ~]$ test -g specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -g specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-G file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is owned by the effective group ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
# user hemimorphite is in hemimorphite group and specs.txt is owned by hemimorphite group
[hemimorphite@ubuntu ~]$ test -G specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -G specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-h file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a symbolic link (same as <code>-L</code>)
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc2.txt
[hemimorphite@ubuntu ~]$ test -h doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -h doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-k file</code>
                    </td>
                    <td>
                        <code>file</code> exists and has its sticky bit set. When a directory or a file has the sticky bit set, its files can be deleted or renamed only by the file owner, directory owner and the root user.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ chmod +t doc1.txt
[hemimorphite@ubuntu ~]$ test -k doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -k doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-L file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a symbolic link (same as <code>-h</code>)
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc2.txt
[hemimorphite@ubuntu ~]$ test -L doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -L doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-O file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is owned by the effective user ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
# specs.txt is owned by hemimorphite
[hemimorphite@ubuntu ~]$ test -O specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -O specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-p file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a named pipe
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkfifo pipeone
[hemimorphite@ubuntu ~]$ test -p pipeone
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -p pipeone ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-r file</code>
                    </td>
                    <td>
                        <code>file</code> exists and read permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
[hemimorphite@ubuntu ~]$ test -r specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -r specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-s file</code>
                    </td>
                    <td>
                        <code>file</code> exists and has a size greater than zero
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ echo Bash Language Specification > specs.txt
[hemimorphite@ubuntu ~]$ test -s specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -s specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-S file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a socket. Sockets are Linux file descriptors that serve as the communication end-points for processes running on that device.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a socket
[hemimorphite@ubuntu ~]$ nc -Ul server.sock &
[hemimorphite@ubuntu ~]$ test -S server.sock
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -S server.sock ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-t fd</code>
                    </td>
                    <td>
                        file descriptor <code>fd</code> is opened on a terminal. File Descriptors are positive integers that act as abstract handles for IO/resources and files. All file descriptors that a process contains are stored in the directory <code>/proc/&lt;PID&gt;/fd/</code>. &lt;PID&gt; stands for the process ID.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch out.txt
# Opening file descriptors #4 for reading and writing
[hemimorphite@ubuntu ~]$ exec 4<>out.txt 
# $$ is the process ID of the current instance of Bash
[hemimorphite@ubuntu ~]$ test -t /proc/$$/fd/4
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -t /proc/$$/fd/4 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-u file</code>
                    </td>
                    <td>
                        <code>file</code> exists and its set-user-ID bit is set
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod u+s specs.txt
[hemimorphite@ubuntu ~]$ test -u specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -u specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-w file</code>
                    </td>
                    <td>
                        <code>file</code> exists and write permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod u+w specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
[hemimorphite@ubuntu ~]$ test -w specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -w specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-x file</code>
                    </td>
                    <td>
                        <code>file</code> exists and execute (or search) permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch build.sh
[hemimorphite@ubuntu ~]$ chmod u+x build.sh
[hemimorphite@ubuntu ~]$ ls -la build.sh
-rwxr--r-- 1 hemimorphite hemimorphite 0 Jun 18 15:56 build.sh
[hemimorphite@ubuntu ~]$ test -x build.sh
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -x build.sh ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux-command" class="tag">linux command</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/break" class="tag">break</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/" class="tag">:</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/" class="tag">.</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/cd" class="tag">cd</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/continue" class="tag">continue</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/eval" class="tag">eval</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/exec" class="tag">exec</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/exit" class="tag">exit</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/export" class="tag">export</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/getopts" class="tag">getopts</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/hash" class="tag">hash</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/pwd" class="tag">pwd</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/readonly" class="tag">readonly</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/return" class="tag">return</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/shift" class="tag">shift</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/times" class="tag">times</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/trap" class="tag">trap</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/umask" class="tag">umask</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/unset" class="tag">unset</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/test" class="tag">test</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-16" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="linux command" /><category term="break" /><category term=":" /><category term="." /><category term="cd" /><category term="continue" /><category term="eval" /><category term="exec" /><category term="exit" /><category term="export" /><category term="getopts" /><category term="hash" /><category term="pwd" /><category term="readonly" /><category term="return" /><category term="shift" /><category term="times" /><category term="trap" /><category term="umask" /><category term="unset" /><category term="test" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell builtin commands such as . (dot), : (colon), break, cd, continue, eval, exec, exit, export, getopts, hash, pwd, readonly, return, shift, times, trap, umask, unset and test with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Login and Non-Login Shell in Linux</title><link href="https://hemimorphite.github.io/zh/2024/06/14/difference-between-login-and-non-login-shell-in-linux/" rel="alternate" type="text/html" title="Difference Between Login and Non-Login Shell in Linux" /><published>2024-06-14T14:20:00+00:00</published><updated>2024-06-14T14:20:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/14/difference-between-login-and-non-login-shell-in-linux</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/14/difference-between-login-and-non-login-shell-in-linux/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Login and Non-Login Shell in Linux</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 14, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/linux.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Shell is a command interpreter or a program that reads and interprets commands issued to it by the user. The shell performs basic commands such as running programs, inputting text, and printing output. It is also responsible for handling errors and other situations that require user intervention. A shell can be used to automate existing tasks or to create new ones entirely.</p>

        <h5 class="post-subtitle">Login Shell</h5>

        <p>When a user successfully logs in to a Linux system via terminal, SSH, or switches to a user with the <code>su -</code> command, a Login shell is created.</p>

        <p>When a login shell starts, it executes a set of pre-configured scripts to set up the environment. You may run this command on the terminal to discover which shell you are using.</p>

        <pre><code class="language-bash hljs">echo $0</code></pre>

        <p>If the result is <code>-bash</code> or <code>-su</code>, you are on the login shell. Be certain that it has a hyphen (-) as a prefix.</p>

        <p>The following scripts are executed by the Login Shell:</p>

        <ol>
            <li>Login shell invokes <code>/etc/profile</code></li>
            <li><code>/etc/profile</code> invokes scripts in <code>/etc/profile.d/*.sh</code></li>
            <li>Then executes users <code>~/.bash_profile</code></li>
            <li><code>~/.bash_profile</code> invokes users <code>~/.bashrc</code></li>
        </ol>

        <h5 class="post-subtitle">Non-Login Shell</h5>
        
        <p>A non-login shell is started by a login shell. For example, a shell that you start from another shell or from a program is a non-login shell.</p>

        <p>A shell that is not used to log in to the system executes the following script to set the shell environment.</p>

        <ol>
            <li>Non login shell first executes <code>~/.bashrc</code></li>
            <li>Then <code>~/.bashrc</code> executes <code>/etc/bashrc</code></li>
            <li><code>/etc/bashrc</code> calls the scripts in <code>/etc/profile.d</code></li>
        </ol>

        <p>To find whether the current shell is a login shell or a non-login shell simply run the below command.</p>

        <pre><code class="language-bash hljs">echo $0</code></pre>

        <p>Login shell output will be <code>-bash</code> or <code>-su</code>.</p>

        <p>Non-login shell output will be <code>bash</code> or <code>su</code></p>  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/login-shell" class="tag">login shell</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/non-login-shell" class="tag">non-login shell</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-14" /><category term="linux" /><category term="login shell" /><category term="non-login shell" /><summary type="html"><![CDATA[Learn about the key differences between login and non-login shells in Linux, how they are initiated, and what impact they have on the environment settings for users.]]></summary></entry><entry xml:lang="en"><title type="html">mail Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/zh/2024/06/13/mail-command-on-ubuntu-22.04/" rel="alternate" type="text/html" title="mail Command on Ubuntu 22.04" /><published>2024-06-13T16:55:00+00:00</published><updated>2024-06-13T16:55:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">mail Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h5 class="post-subtitle">Install mail Command</h5>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>When prompted to configure the postfix package, press <b>TAB</b> to select <b>Ok</b> and confirm with <b>Enter</b>.</p>

        <figure class="post-figure">
        	<img src="/assets/images/postfix-01.png" alt="Postfix Configuration">
        </figure>

        <p>Select <b>Internet Site</b> in the package configuration window. Press <b>TAB</b> to select <b>Ok</b> and press <b>Enter</b> to confirm.</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-02.png" alt="Postfix Configuration">
        </figure>

		<p>Complete the basic configuration by entering the system mail name (the machine's fully qualified domain name).</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-03.png" alt="Postfix Configuration">
        </figure>

        <h5 class="post-subtitle">mail Command Options</h5>
		
		<table class="table table-bordered border-primary">
			<thead>
				<tr>
					<th>Argument</th>
					<th>Description</th>
					<th>Example</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><code>-s</code></td>
					<td>Specifies the subject of the email.</td>
					<td><code>mail -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-c</code></td>
					<td>Sends a carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -c cc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-b</code></td>
					<td>Sends a blind carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -b bcc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-a</code></td>
					<td>Adds an attachment to the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -a file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-q</code></td>
					<td>Reads a message from the specified file.</td>
					<td><code>mail -s 'Subject' -q file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-r</code></td>
					<td>Specifies the return address for the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -r from@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-v</code></td>
					<td>Verbose mode. Displays the details of the email sending process.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -v user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-f</code></td>
					<td>Reads messages from the specified mailbox file.</td>
					<td><code>mail -f /var/mail/user</code></td>
				</tr>
				<tr>
					<td><code>-i</code></td>
					<td>Ignores lines with only a dot.</td>
					<td><code>mail -i -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-E</code></td>
					<td>Does not send messages with an empty body.</td>
					<td><code>echo '' | mail -E -s 'Subject' user@example.com</code></td>
				</tr>
			</tbody>
		</table>

		<h5 class="post-subtitle">mail Command Examples</h5>

		<h6 class="post-subtitle">Example 1: Send Mail with Subject and Body</h6>

        <p>The basic way of using <code>mail</code> to send emails is to specify the email subject using the <code>-s</code> flag and add the recipient. The command then enters the interactive mode, asking if you want to send Ccs and asking for the email body.</p>

		<p>After entering all the information, press <b>Ctrl+D</b> to send the email.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna
Cc:
This is the email body</code></pre>
		
		<h6 class="post-subtitle">Example 2: Send Mail Using echo</h6>

		<p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the echo command output to the <code>mail</code> command.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" | mail -s "Email Subject" echidna</code></pre>
		
		<h6 class="post-subtitle">Example 3: Send Email Using Redirection</h6>
		
		<p>Another way to provide the email body is to use redirection (&lt;&lt;&lt;). Using redirection also avoids the <code>mail</code> command interactive mode and sends the email without any prompts.</p>
		
		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna &lt;&lt;&lt; "this is the email body"</code></pre>

		<h6 class="post-subtitle">Example 4: Send Email from File</h6>

        <p>The <code>mail</code> command allows users to provide the email body from an existing file. This option saves time and facilitates sending large messages without writing them in the command line.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" > file.txt
[satella@ubuntu ~]$ mail -s "Email Subject" echidna < file.txt</code></pre>
		
		<h6 class="post-subtitle">Example 4: Read Mail</h6>

        <p>Check the mailbox for the current user by running the <code>mail</code> command without any options or flags.</p>
        
		<pre><code class="language-bash hljs">[minerva@ubuntu ~]$ mail
"/var/mail/minerva": 8 messages 8 new
U   1 satella@ubuntu Thu Jun 13 20:52  17/532   this is email subject
U   2 satella@ubuntu Thu Jun 13 20:54  16/488   this is email subject
U   3 satella@ubuntu Thu Jun 13 20:58  16/488   this is email subject
U   4 satella@ubuntu Thu Jun 13 20:59  16/488   this is email subject
U   5 satella@ubuntu Thu Jun 13 21:02  16/488   this is email subject
U   6 satella@ubuntu Thu Jun 13 21:05  16/492   this is email subject 1
U   7 satella@ubuntu Thu Jun 13 21:06  16/492   this is email subject 1
U   8 satella@ubuntu Thu Jun 13 22:07  16/416   Subject
?</code></pre>
		
		<p>To open an email, enter the email number and press Enter. For example, we will open email number 8:</p>

		<pre><code class="language-bash hljs">? 8
Return-Path: &lt;satella@ubuntu&gt;
X-Original-To: minerva
Delivered-To: minerva@ubuntu
Received: by ubuntu (Postfix, from userid 1001)
	id 453F4A257B; Thu, 13 Jun 2024 22:07:00 +0700 (WIB)
Subject: Subject
To: minerva@ubuntu
User-Agent: mail (GNU Mailutils 3.14)
Date: Thu, 13 Jun 2024 22:07:00 +0700
Message-Id: &lt;20240613150700.453F4A257B@ubuntu&gt;
From: satella@ubuntu
X-UID: 8
Status: O

?</code></pre>

        <p>After opening the email, the command waits for further input from the user. Open the next email by entering (+) in the prompt, or access the previous email by entering (-). Return to the mailbox by pressing Ctrl+D.</p>

		<h6 class="post-subtitle">Example 5: Delete Mail</h6>
		
		<p>To delete an email, open the email you want to delete, press <code>d</code>, and confirm with Enter. To delete multiple emails at once, open the mailbox and enter <code>d</code> followed by the email numbers you want to delete.</p>
		
		<p>For example, the following command deletes emails numbered 1 and 2:</p>

        <pre><code class="language-bash hljs">d 1 2</code></pre>
		
		<p>To delete a range of emails, specify the first and last email in the range separated by a dash. For example, to delete emails 1-10, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d 1-10</code></pre>

        <p>To delete all received mail, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d*</code></pre>

	</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mail" class="tag">mail</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="ubuntu 22.04" /><category term="mail" /><summary type="html"><![CDATA[Learn how to use the mail command on Ubuntu 22.04 with this detailed guide. Includes examples and usage tips to help you master email management from the command line.]]></summary></entry><entry xml:lang="en"><title type="html">Bourne Shell Environment Variables</title><link href="https://hemimorphite.github.io/zh/2024/06/13/bourne-shell-environment-variables/" rel="alternate" type="text/html" title="Bourne Shell Environment Variables" /><published>2024-06-13T14:21:00+00:00</published><updated>2024-06-13T14:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Environment Variables</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">CDPATH</h5>

        <p>A colon-separated list of directories used as a search path for the <code>cd</code> builtin command.</p>

        <p>If the target directory of the <code>cd</code> command is specified as a relative path name, the <code>cd</code> command first looks for the target directory in the current directory (<code>.</code>). If the target is not found, the path names listed in the <code>CDPATH</code> variable are searched consecutively until the target directory is found and the directory change is completed. If the target directory is not found, the current working directory is left unmodified. For example, the <code>CDPATH</code> variable is set to <code>/home/hemimorphite</code>, and four directories exist under <code>/home/hemimorphite</code>, <code>layouts</code>, <code>posts</code>, <code>assets</code> and <code>vendors</code>. If you are in the <code>/home/hemimorphite/posts</code> directory and type <code>cd vendors</code>, you change directories to <code>/home/hemimorphite/vendors</code>, even though you do not specify a full path.</p>

        <h5 class="post-subtitle">HOME</h5>

        <p>The current user's home directory; the default for the <code>cd</code> builtin command. The value of this variable is also used by tilde expansion (<code>~</code>).</p>

        <pre><code class="language-bash hljs">cd $HOME
# OR
cd ~</code></pre>

        <h5 class="post-subtitle">IFS</h5>
        
        <p>A list of characters that separate fields; used when the shell splits words as part of expansion.</p>

        <p>The default value is a space, a tab, and a newline (<code>IFS=$' \t\n'</code>).</p>

        <p>You can print it with the following command:</p>

        <pre><code class="language-bash hljs">cat -etv &lt;&lt;&lt;"$IFS"</code></pre>

        <p>You should see something as follows on your Linux terminal:</p>

        <pre><code class="language-bash hljs"> ^I$
$</code></pre>

        <p>The <code>IFS</code> variable is commonly used with <code>read</code> command, parameter expansions and command substitution.</p>
        
        <p>In the <code>read</code> command, if multiple variable-name arguments are specified, <code>IFS</code> is used to split the line of input so that each variable gets a single field of the input. (The last variable gets all the remaining fields, if there are more fields than variables.) Any whitespace characters in <code>IFS</code> will be trimmed from the beginning and end of the input line, even when only one variable is given.</p>

        <pre><code class="language-bash hljs"># Using default IFS=$' \t\n'
[hemimorphite@ubuntu ~]$ read -r a b c &lt;&lt;&lt; '   A      B  C'
[hemimorphite@ubuntu ~]$ echo "$a $b $c"
A B C</code></pre>

        <pre><code class="language-bash hljs"># Using a custom IFS value
[hemimorphite@ubuntu ~]$ IFS=: read -r user pwhash uid gid gecos home shell \
    &lt;&lt;&lt; 'root:*:0:0:System Administrator:/var/root:/bin/sh'
[hemimorphite@ubuntu ~]$ echo "$user $pwhash $uid $gid $gecos $home $shell"
root * 0 0 System Administrator /var/root /bin/sh</code></pre>

        <p>If <code>IFS</code> contains a mixture of whitespace and non-whitespace characters then any non-whitespace IFS character or IFS whitespace characters (any sequence of one or more whitespace IFS characters count as single whitespace) acts as a single field delimiter. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=' ,'
[hemimorphite@ubuntu ~]$ sentence="This is        a, simple,     example"
[hemimorphite@ubuntu ~]$ printf 'word -> "%s" \n' $sentence
word -> "This" 
word -> "is" 
word -> "a" 
word -> "simple" 
word -> "example"</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=$' \t\n' read -r a b c \
    &lt;&lt;&lt; 'the    plain gold      ring'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=the= =plain= =gold      ring=</code></pre>
        
        <p>The above example shows that splitting and delimiter-consolidation are not performed on the remaining part of a line when assigning excess fields to the last variable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=: read -r a b c \
    &lt;&lt;&lt; '1:2:::3::4'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=1= =2= =::3::4=</code></pre>
        
        <p>Note that out of the three consecutive colons which follow field 2, precisely one colon was removed in order to terminate field 2. The remaining two colons, as well as two more colons later on, were all left untouched, and assigned to variable <code>c</code> verbatim.</p>

        <h5 class="post-subtitle">OPTARG</h5>

        <p>The value of the option processed by the <code>getopts</code> builtin.</p>

        <p>Let's create a bash script called <code>command.sh</code></p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

# Parse command-line options
while getopts ":f:d:" flag; do
    case $flag in
    f) echo "The filename is: ${OPTARG}"
      ;;
    d) echo "The directory is: ${OPTARG}"
    esac
done</code></pre>

        <p>The Bash script utilizes the <code>getopts</code> command to parse command-line options. It specifies two options, <code>-f</code>  and <code>-d</code> in the optstring. As there is a colon (:) after both options, if triggered each of them requires an argument.</p>

        <p>Inside the loop, a <code>case</code> statement is used to check the currently processed option. If the option <code>-f</code> is encountered, the script prints out the filename specified with the option using the special variable <code>OPTARG</code>. Similarly, if the option <code>-d</code> is found, the script displays the directory provided with the option using <code>OPTARG</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -f file1.txt -d /home hemimorphite
The filename is: file1.txt
The directory is: /home hemimorphite</code></pre>
        
        <h5 class="post-subtitle">OPTERR</h5>
        
        <p><code>OPTERR</code> controls if Bash displays errors generated by the <code>getopts</code> builtin command. <code>getopts</code> does not print errors if <code>OPTERR</code> has a value of <code>0</code>. Value <code>1</code> enables the errors.</p>

        <p>The default value is <code>1</code>.</p>

        <h5 class="post-subtitle">OPTIND</h5>

        <p>The index of the next parameter/argument processed by the <code>getopts</code> builtin.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

while getopts "ab:c" flag; do
    echo "$flag" "$OPTIND" "$OPTARG"
done</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -ac -b value1
a 1
c 2
b 4 value1</code></pre>

        <p>In <code>./command.sh -ac -b value1</code>, arg1 is <code>-ac</code>, arg2 is <code>-b</code>, arg3 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg1. So the index stored in <code>OPTIND</code> is <code>1</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg3 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>4</code> or the index of arg4.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -a -c -b value1
a 2
c 3
b 5 value1</code></pre>
        
        <p>In <code>./command.sh -a -c -b value1</code>, arg1 is <code>-a</code>, arg2 is <code>-c</code>, arg3 is <code>-b</code>, arg4 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg3. So the index stored in <code>OPTIND</code> is <code>3</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg4 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>5</code> or the index of arg5.</p>

        <h5 class="post-subtitle">PATH</h5>

        <p>A colon-separated list of directories in which the shell looks for commands. This is the variable that tells the bash shell where to find different executable files and scripts. The shell will check the directories listed in the <code>PATH</code> variable for the script you are trying to find.</p>
        
        <p>Let's say you wrote a little shell script called <code>hello</code> and have it located in a directory called <code>/home/hemimorphite/bin</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ cat hello
#!/bin/bash

echo Hello "$USER"
[hemimorphite@ubuntu ~/bin]$ chmod +x hello</code></pre>
        
        <p>Add <code>/home/hemimorphite/bin</code> to the <code>$PATH</code> variable with the following command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ export PATH=$PATH:/home/hemimorphite/bin</code></pre>

        <p>You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ hello
Hello hemimorphite</code></pre>

        <h5 class="post-subtitle">MAIL</h5>

        <p>Name of file to check for incoming mail.</p>

        <h5 class="post-subtitle">MAILCHECK</h5>

        <p>defines the interval in seconds when the shell should check for mail. (default 60 seconds).</p>

        <h5 class="post-subtitle">MAILPATH</h5>

        <p>List of filenames, separated by colons (:), to check for incoming mail.</p>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>Let us create a new user named satella, echidna, and minerva using the <code>useradd</code> command on Ubuntu:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/satella/ -m -G sudo satella
[hemimorphite@ubuntu ~/]$ sudo passwd satella
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/echidna/ -m -G sudo echidna
[hemimorphite@ubuntu ~/]$ sudo passwd echidna
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/minerva/ -m -G sudo minerva
[hemimorphite@ubuntu ~/]$ sudo passwd minerva</code></pre>

        <p>Where,</p>

        <ul>
            <li><code>-s /bin/bash</code>, set <code>/bin/bash</code> as login shell of the new account</li>
            <li><code>-d /home/satella/</code>, set <code>/home/satella/</code> as home directory of the new Ubuntu account</li>
            <li><code>-m</code>, create the user's home directory</li>
            <li><code>-G sudo</code>, make satella user can use <code>sudo</code> command</li>
        </ul>

        <p>Switch to user satella.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo su - satella
[satella@ubuntu ~/]$ </code></pre>

        <p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the <code>echo</code> command output to the <code>mail</code> command.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~/]$ echo "This is the email body" | mail -s "this is email subject" echidna, minerva</code></pre>
        
        <p>After 60 seconds (the value of <code>MAILCHECK</code>), on echidna's or minerva's prompt press <code>ENTER</code> and the prompt will print the message:</p>

        <pre><code class="language-bash hljs">You have mail in /var/mail/echidna</code></pre>

        <p>Shell will use the value of <code>MAIL</code> as the name of the file to check, unless <code>MAILPATH</code> is set; in which case, the shell will check each file in the <code>MAILPATH</code> list for new mail. You can use this mechanism to have the shell print a different message for each mail file: for each mail filename in <code>MAILPATH</code>, append a question mark followed by the message you want printed.</p>

        <p>You could define <code>MAILPATH</code> to be:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived.:\
/usr/mail/satella/minerva?There is new mail from Paul."</code></pre>

        <p>The backslashes at the end of each line allow you to continue your command on the next line. Now, if you get mail from echidna, the shell will print:</p>

        <pre><code class="language-bash hljs">Mail from Echidna has arrived.</code></pre>

        <p>You can also use the variable <code>$_</code> in the message to print the name of the current mail file or execute a command <code>$(date)</code> to displays the current date and time. For example:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived in $_ at $(date).:\
/usr/mail/satella/minerva?There is new mail from Paul in $_ at $(date)."</code></pre>
</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/special-variables" class="tag">special variables</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/cdpath" class="tag">CDPATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/home" class="tag">HOME</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ifs" class="tag">IFS</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optarg" class="tag">OPTARG</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/opterr" class="tag">OPTERR</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optind" class="tag">OPTIND</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/path" class="tag">PATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mail" class="tag">MAIL</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailcheck" class="tag">MAILCHECK</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailpath" class="tag">MAILPATH</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="special variables" /><category term="CDPATH" /><category term="HOME" /><category term="IFS" /><category term="OPTARG" /><category term="OPTERR" /><category term="OPTIND" /><category term="PATH" /><category term="MAIL" /><category term="MAILCHECK" /><category term="MAILPATH" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell environment variables such as CDPATH, HOME, IFS, OPTARG, OPTERR, OPTIND, PATH, MAIL, MAILCHECK, and MAILPATH with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Bourne Shell Special Variables</title><link href="https://hemimorphite.github.io/zh/2024/06/13/bourne-shell-special-variables/" rel="alternate" type="text/html" title="Bourne Shell Special Variables" /><published>2024-06-13T14:21:00+00:00</published><updated>2024-06-13T14:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/bourne-shell-special-variables</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/bourne-shell-special-variables/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Special Variables</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">CDPATH</h5>

        <p>A colon-separated list of directories used as a search path for the <code>cd</code> builtin command.</p>

        <p>If the target directory of the <code>cd</code> command is specified as a relative path name, the <code>cd</code> command first looks for the target directory in the current directory (<code>.</code>). If the target is not found, the path names listed in the <code>CDPATH</code> variable are searched consecutively until the target directory is found and the directory change is completed. If the target directory is not found, the current working directory is left unmodified. For example, the <code>CDPATH</code> variable is set to <code>/home/hemimorphite</code>, and four directories exist under <code>/home/hemimorphite</code>, <code>layouts</code>, <code>posts</code>, <code>assets</code> and <code>vendors</code>. If you are in the <code>/home/hemimorphite/posts</code> directory and type <code>cd vendors</code>, you change directories to <code>/home/hemimorphite/vendors</code>, even though you do not specify a full path.</p>

        <h5 class="post-subtitle">HOME</h5>

        <p>The current user's home directory; the default for the <code>cd</code> builtin command. The value of this variable is also used by tilde expansion (<code>~</code>).</p>

        <pre><code class="language-bash hljs">cd $HOME
# OR
cd ~</code></pre>

        <h5 class="post-subtitle">IFS</h5>
        
        <p>A list of characters that separate fields; used when the shell splits words as part of expansion.</p>

        <p>The default value is a space, a tab, and a newline (<code>IFS=$' \t\n'</code>).</p>

        <p>You can print it with the following command:</p>

        <pre><code class="language-bash hljs">cat -etv &lt;&lt;&lt;"$IFS"</code></pre>

        <p>You should see something as follows on your Linux terminal:</p>

        <pre><code class="language-bash hljs"> ^I$
$</code></pre>

        <p>The <code>IFS</code> variable is commonly used with <code>read</code> command, parameter expansions and command substitution.</p>
        
        <p>In the <code>read</code> command, if multiple variable-name arguments are specified, <code>IFS</code> is used to split the line of input so that each variable gets a single field of the input. (The last variable gets all the remaining fields, if there are more fields than variables.) Any whitespace characters in <code>IFS</code> will be trimmed from the beginning and end of the input line, even when only one variable is given.</p>

        <pre><code class="language-bash hljs"># Using default IFS=$' \t\n'
[hemimorphite@ubuntu ~]$ read -r a b c &lt;&lt;&lt; '   A      B  C'
[hemimorphite@ubuntu ~]$ echo "$a $b $c"
A B C</code></pre>

        <pre><code class="language-bash hljs"># Using a custom IFS value
[hemimorphite@ubuntu ~]$ IFS=: read -r user pwhash uid gid gecos home shell \
    &lt;&lt;&lt; 'root:*:0:0:System Administrator:/var/root:/bin/sh'
[hemimorphite@ubuntu ~]$ echo "$user $pwhash $uid $gid $gecos $home $shell"
root * 0 0 System Administrator /var/root /bin/sh</code></pre>

        <p>If <code>IFS</code> contains a mixture of whitespace and non-whitespace characters then any non-whitespace IFS character or IFS whitespace characters (any sequence of one or more whitespace IFS characters count as single whitespace) acts as a single field delimiter. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=' ,'
[hemimorphite@ubuntu ~]$ sentence="This is        a, simple,     example"
[hemimorphite@ubuntu ~]$ printf 'word -> "%s" \n' $sentence
word -> "This" 
word -> "is" 
word -> "a" 
word -> "simple" 
word -> "example"</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=$' \t\n' read -r a b c \
    &lt;&lt;&lt; 'the    plain gold      ring'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=the= =plain= =gold      ring=</code></pre>
        
        <p>The above example shows that splitting and delimiter-consolidation are not performed on the remaining part of a line when assigning excess fields to the last variable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=: read -r a b c \
    &lt;&lt;&lt; '1:2:::3::4'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=1= =2= =::3::4=</code></pre>
        
        <p>Note that out of the three consecutive colons which follow field 2, precisely one colon was removed in order to terminate field 2. The remaining two colons, as well as two more colons later on, were all left untouched, and assigned to variable <code>c</code> verbatim.</p>

        <h5 class="post-subtitle">OPTARG</h5>

        <p>The value of the option processed by the <code>getopts</code> builtin.</p>

        <p>Let's create a bash script called <code>command.sh</code></p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

# Parse command-line options
while getopts ":f:d:" flag; do
    case $flag in
    f) echo "The filename is: ${OPTARG}"
      ;;
    d) echo "The directory is: ${OPTARG}"
    esac
done</code></pre>

        <p>The Bash script utilizes the <code>getopts</code> command to parse command-line options. It specifies two options, <code>-f</code>  and <code>-d</code> in the optstring. As there is a colon (:) after both options, if triggered each of them requires an argument.</p>

        <p>Inside the loop, a <code>case</code> statement is used to check the currently processed option. If the option <code>-f</code> is encountered, the script prints out the filename specified with the option using the special variable <code>OPTARG</code>. Similarly, if the option <code>-d</code> is found, the script displays the directory provided with the option using <code>OPTARG</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -f file1.txt -d /home hemimorphite
The filename is: file1.txt
The directory is: /home hemimorphite</code></pre>
        
        <h5 class="post-subtitle">OPTERR</h5>
        
        <p><code>OPTERR</code> controls if Bash displays errors generated by the <code>getopts</code> builtin command. <code>getopts</code> does not print errors if <code>OPTERR</code> has a value of <code>0</code>. Value <code>1</code> enables the errors.</p>

        <p>The default value is <code>1</code>.</p>

        <h5 class="post-subtitle">OPTIND</h5>

        <p>The index of the next parameter/argument processed by the <code>getopts</code> builtin.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

while getopts "ab:c" flag; do
    echo "$flag" "$OPTIND" "$OPTARG"
done</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -ac -b value1
a 1
c 2
b 4 value1</code></pre>

        <p>In <code>./command.sh -ac -b value1</code>, arg1 is <code>-ac</code>, arg2 is <code>-b</code>, arg3 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg1. So the index stored in <code>OPTIND</code> is <code>1</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg3 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>4</code> or the index of arg4.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -a -c -b value1
a 2
c 3
b 5 value1</code></pre>
        
        <p>In <code>./command.sh -a -c -b value1</code>, arg1 is <code>-a</code>, arg2 is <code>-c</code>, arg3 is <code>-b</code>, arg4 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg3. So the index stored in <code>OPTIND</code> is <code>3</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg4 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>5</code> or the index of arg5.</p>

        <h5 class="post-subtitle">PATH</h5>

        <p>A colon-separated list of directories in which the shell looks for commands. This is the variable that tells the bash shell where to find different executable files and scripts. The shell will check the directories listed in the <code>PATH</code> variable for the script you are trying to find.</p>
        
        <p>Let's say you wrote a little shell script called <code>hello</code> and have it located in a directory called <code>/home/hemimorphite/bin</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ cat hello
#!/bin/bash

echo Hello "$USER"
[hemimorphite@ubuntu ~/bin]$ chmod +x hello</code></pre>
        
        <p>Add <code>/home/hemimorphite/bin</code> to the <code>$PATH</code> variable with the following command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ export PATH=$PATH:/home/hemimorphite/bin</code></pre>

        <p>You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ hello
Hello hemimorphite</code></pre>

        <h5 class="post-subtitle">MAIL</h5>

        <p>Name of file to check for incoming mail.</p>

        <h5 class="post-subtitle">MAILCHECK</h5>

        <p>defines the interval in seconds when the shell should check for mail. (default 60 seconds).</p>

        <h5 class="post-subtitle">MAILPATH</h5>

        <p>List of filenames, separated by colons (:), to check for incoming mail.</p>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>Let us create a new user named satella, echidna, and minerva using the <code>useradd</code> command on Ubuntu:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/satella/ -m -G sudo satella
[hemimorphite@ubuntu ~/]$ sudo passwd satella
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/echidna/ -m -G sudo echidna
[hemimorphite@ubuntu ~/]$ sudo passwd echidna
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/minerva/ -m -G sudo minerva
[hemimorphite@ubuntu ~/]$ sudo passwd minerva</code></pre>

        <p>Where,</p>

        <ul>
            <li><code>-s /bin/bash</code>, set <code>/bin/bash</code> as login shell of the new account</li>
            <li><code>-d /home/satella/</code>, set <code>/home/satella/</code> as home directory of the new Ubuntu account</li>
            <li><code>-m</code>, create the user's home directory</li>
            <li><code>-G sudo</code>, make satella user can use <code>sudo</code> command</li>
        </ul>

        <p>Switch to user satella.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo su - satella
[satella@ubuntu ~/]$ </code></pre>

        <p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the <code>echo</code> command output to the <code>mail</code> command.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~/]$ echo "This is the email body" | mail -s "this is email subject" echidna, minerva</code></pre>
        
        <p>After 60 seconds (the value of <code>MAILCHECK</code>), on echidna's or minerva's prompt press <code>ENTER</code> and the prompt will print the message:</p>

        <pre><code class="language-bash hljs">You have mail in /var/mail/echidna</code></pre>

        <p>Shell will use the value of <code>MAIL</code> as the name of the file to check, unless <code>MAILPATH</code> is set; in which case, the shell will check each file in the <code>MAILPATH</code> list for new mail. You can use this mechanism to have the shell print a different message for each mail file: for each mail filename in <code>MAILPATH</code>, append a question mark followed by the message you want printed.</p>

        <p>You could define <code>MAILPATH</code> to be:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived.:\
/usr/mail/satella/minerva?There is new mail from Paul."</code></pre>

        <p>The backslashes at the end of each line allow you to continue your command on the next line. Now, if you get mail from echidna, the shell will print:</p>

        <pre><code class="language-bash hljs">Mail from Echidna has arrived.</code></pre>

        <p>You can also use the variable <code>$_</code> in the message to print the name of the current mail file or execute a command <code>$(date)</code> to displays the current date and time. For example:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived in $_ at $(date).:\
/usr/mail/satella/minerva?There is new mail from Paul in $_ at $(date)."</code></pre>
</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/special-variables" class="tag">special variables</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/cdpath" class="tag">CDPATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/home" class="tag">HOME</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ifs" class="tag">IFS</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optarg" class="tag">OPTARG</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/opterr" class="tag">OPTERR</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optind" class="tag">OPTIND</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/path" class="tag">PATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mail" class="tag">MAIL</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailcheck" class="tag">MAILCHECK</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailpath" class="tag">MAILPATH</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="special variables" /><category term="CDPATH" /><category term="HOME" /><category term="IFS" /><category term="OPTARG" /><category term="OPTERR" /><category term="OPTIND" /><category term="PATH" /><category term="MAIL" /><category term="MAILCHECK" /><category term="MAILPATH" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell predefined special variables such as CDPATH, HOME, IFS, OPTARG, OPTERR, OPTIND, PATH, MAIL, MAILCHECK, and MAILPATH with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Bash Special Variables</title><link href="https://hemimorphite.github.io/zh/2024/06/13/bash-special-variables/" rel="alternate" type="text/html" title="Bash Special Variables" /><published>2024-06-13T14:21:00+00:00</published><updated>2024-06-13T14:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/bash-special-variables</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/bash-special-variables/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bash Special Variables</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">CDPATH</h5>

        <p>A colon-separated list of directories used as a search path for the <code>cd</code> builtin command.</p>

        <p>If the target directory of the <code>cd</code> command is specified as a relative path name, the <code>cd</code> command first looks for the target directory in the current directory (<code>.</code>). If the target is not found, the path names listed in the <code>CDPATH</code> variable are searched consecutively until the target directory is found and the directory change is completed. If the target directory is not found, the current working directory is left unmodified. For example, the <code>CDPATH</code> variable is set to <code>/home/hemimorphite</code>, and four directories exist under <code>/home/hemimorphite</code>, <code>layouts</code>, <code>posts</code>, <code>assets</code> and <code>vendors</code>. If you are in the <code>/home/hemimorphite/posts</code> directory and type <code>cd vendors</code>, you change directories to <code>/home/hemimorphite/vendors</code>, even though you do not specify a full path.</p>

        <h5 class="post-subtitle">HOME</h5>

        <p>The current user's home directory; the default for the <code>cd</code> builtin command. The value of this variable is also used by tilde expansion (<code>~</code>).</p>

        <pre><code class="language-bash hljs">cd $HOME
# OR
cd ~</code></pre>

        <h5 class="post-subtitle">IFS</h5>
        
        <p>A list of characters that separate fields; used when the shell splits words as part of expansion.</p>

        <p>The default value is a space, a tab, and a newline (<code>IFS=$' \t\n'</code>).</p>

        <p>You can print it with the following command:</p>

        <pre><code class="language-bash hljs">cat -etv &lt;&lt;&lt;"$IFS"</code></pre>

        <p>You should see something as follows on your Linux terminal:</p>

        <pre><code class="language-bash hljs"> ^I$
$</code></pre>

        <p>The <code>IFS</code> variable is commonly used with <code>read</code> command, parameter expansions and command substitution.</p>
        
        <p>In the <code>read</code> command, if multiple variable-name arguments are specified, <code>IFS</code> is used to split the line of input so that each variable gets a single field of the input. (The last variable gets all the remaining fields, if there are more fields than variables.) Any whitespace characters in <code>IFS</code> will be trimmed from the beginning and end of the input line, even when only one variable is given.</p>

        <pre><code class="language-bash hljs"># Using default IFS=$' \t\n'
[hemimorphite@ubuntu ~]$ read -r a b c &lt;&lt;&lt; '   A      B  C'
[hemimorphite@ubuntu ~]$ echo "$a $b $c"
A B C</code></pre>

        <pre><code class="language-bash hljs"># Using a custom IFS value
[hemimorphite@ubuntu ~]$ IFS=: read -r user pwhash uid gid gecos home shell \
    &lt;&lt;&lt; 'root:*:0:0:System Administrator:/var/root:/bin/sh'
[hemimorphite@ubuntu ~]$ echo "$user $pwhash $uid $gid $gecos $home $shell"
root * 0 0 System Administrator /var/root /bin/sh</code></pre>

        <p>If <code>IFS</code> contains a mixture of whitespace and non-whitespace characters then any non-whitespace IFS character or IFS whitespace characters (any sequence of one or more whitespace IFS characters count as single whitespace) acts as a single field delimiter. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=' ,'
[hemimorphite@ubuntu ~]$ sentence="This is        a, simple,     example"
[hemimorphite@ubuntu ~]$ printf 'word -> "%s" \n' $sentence
word -> "This" 
word -> "is" 
word -> "a" 
word -> "simple" 
word -> "example"</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=$' \t\n' read -r a b c \
    &lt;&lt;&lt; 'the    plain gold      ring'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=the= =plain= =gold      ring=</code></pre>
        
        <p>The above example shows that splitting and delimiter-consolidation are not performed on the remaining part of a line when assigning excess fields to the last variable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=: read -r a b c \
    &lt;&lt;&lt; '1:2:::3::4'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=1= =2= =::3::4=</code></pre>
        
        <p>Note that out of the three consecutive colons which follow field 2, precisely one colon was removed in order to terminate field 2. The remaining two colons, as well as two more colons later on, were all left untouched, and assigned to variable <code>c</code> verbatim.</p>

        <h5 class="post-subtitle">OPTARG</h5>

        <p>The value of the option processed by the <code>getopts</code> builtin.</p>

        <p>Let's create a bash script called <code>command.sh</code></p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

# Parse command-line options
while getopts ":f:d:" flag; do
    case $flag in
    f) echo "The filename is: ${OPTARG}"
      ;;
    d) echo "The directory is: ${OPTARG}"
    esac
done</code></pre>

        <p>The Bash script utilizes the <code>getopts</code> command to parse command-line options. It specifies two options, <code>-f</code>  and <code>-d</code> in the optstring. As there is a colon (:) after both options, if triggered each of them requires an argument.</p>

        <p>Inside the loop, a <code>case</code> statement is used to check the currently processed option. If the option <code>-f</code> is encountered, the script prints out the filename specified with the option using the special variable <code>OPTARG</code>. Similarly, if the option <code>-d</code> is found, the script displays the directory provided with the option using <code>OPTARG</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -f file1.txt -d /home hemimorphite
The filename is: file1.txt
The directory is: /home hemimorphite</code></pre>
        
        <h5 class="post-subtitle">OPTERR</h5>
        
        <p><code>OPTERR</code> controls if Bash displays errors generated by the <code>getopts</code> builtin command. <code>getopts</code> does not print errors if <code>OPTERR</code> has a value of <code>0</code>. Value <code>1</code> enables the errors.</p>

        <p>The default value is <code>1</code>.</p>

        <h5 class="post-subtitle">OPTIND</h5>

        <p>The index of the next parameter/argument processed by the <code>getopts</code> builtin.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

while getopts "ab:c" flag; do
    echo "$flag" "$OPTIND" "$OPTARG"
done</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -ac -b value1
a 1
c 2
b 4 value1</code></pre>

        <p>In <code>./command.sh -ac -b value1</code>, arg1 is <code>-ac</code>, arg2 is <code>-b</code>, arg3 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg1. So the index stored in <code>OPTIND</code> is <code>1</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg3 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>4</code> or the index of arg4.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -a -c -b value1
a 2
c 3
b 5 value1</code></pre>
        
        <p>In <code>./command.sh -a -c -b value1</code>, arg1 is <code>-a</code>, arg2 is <code>-c</code>, arg3 is <code>-b</code>, arg4 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg3. So the index stored in <code>OPTIND</code> is <code>3</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg4 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>5</code> or the index of arg5.</p>

        <h5 class="post-subtitle">PATH</h5>

        <p>A colon-separated list of directories in which the shell looks for commands. This is the variable that tells the bash shell where to find different executable files and scripts. The shell will check the directories listed in the <code>PATH</code> variable for the script you are trying to find.</p>
        
        <p>Let's say you wrote a little shell script called <code>hello</code> and have it located in a directory called <code>/home/hemimorphite/bin</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ cat hello
#!/bin/bash

echo Hello "$USER"
[hemimorphite@ubuntu ~/bin]$ chmod +x hello</code></pre>
        
        <p>Add <code>/home/hemimorphite/bin</code> to the <code>$PATH</code> variable with the following command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ export PATH=$PATH:/home/hemimorphite/bin</code></pre>

        <p>You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ hello
Hello hemimorphite</code></pre>

        <h5 class="post-subtitle">MAIL</h5>

        <p>Name of file to check for incoming mail.</p>

        <h5 class="post-subtitle">MAILCHECK</h5>

        <p>defines the interval in seconds when the shell should check for mail. (default 60 seconds).</p>

        <h5 class="post-subtitle">MAILPATH</h5>

        <p>List of filenames, separated by colons (:), to check for incoming mail.</p>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>Let us create a new user named satella, echidna, and minerva using the <code>useradd</code> command on Ubuntu:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/satella/ -m -G sudo satella
[hemimorphite@ubuntu ~/]$ sudo passwd satella
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/echidna/ -m -G sudo echidna
[hemimorphite@ubuntu ~/]$ sudo passwd echidna
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/minerva/ -m -G sudo minerva
[hemimorphite@ubuntu ~/]$ sudo passwd minerva</code></pre>

        <p>Where,</p>

        <ul>
            <li><code>-s /bin/bash</code>, set <code>/bin/bash</code> as login shell of the new account</li>
            <li><code>-d /home/satella/</code>, set <code>/home/satella/</code> as home directory of the new Ubuntu account</li>
            <li><code>-m</code>, create the user's home directory</li>
            <li><code>-G sudo</code>, make satella user can use <code>sudo</code> command</li>
        </ul>

        <p>Switch to user satella.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo su - satella
[satella@ubuntu ~/]$ </code></pre>

        <p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the <code>echo</code> command output to the <code>mail</code> command.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~/]$ echo "This is the email body" | mail -s "this is email subject" echidna, minerva</code></pre>
        
        <p>After 60 seconds (the value of <code>MAILCHECK</code>), on echidna's or minerva's prompt press <code>ENTER</code> and the prompt will print the message:</p>

        <pre><code class="language-bash hljs">You have mail in /var/mail/echidna</code></pre>

        <p>Shell will use the value of <code>MAIL</code> as the name of the file to check, unless <code>MAILPATH</code> is set; in which case, the shell will check each file in the <code>MAILPATH</code> list for new mail. You can use this mechanism to have the shell print a different message for each mail file: for each mail filename in <code>MAILPATH</code>, append a question mark followed by the message you want printed.</p>

        <p>You could define <code>MAILPATH</code> to be:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived.:\
/usr/mail/satella/minerva?There is new mail from Paul."</code></pre>

        <p>The backslashes at the end of each line allow you to continue your command on the next line. Now, if you get mail from echidna, the shell will print:</p>

        <pre><code class="language-bash hljs">Mail from Echidna has arrived.</code></pre>

        <p>You can also use the variable <code>$_</code> in the message to print the name of the current mail file or execute a command <code>$(date)</code> to displays the current date and time. For example:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived in $_ at $(date).:\
/usr/mail/satella/minerva?There is new mail from Paul in $_ at $(date)."</code></pre>
</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/special-variables" class="tag">special variables</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/cdpath" class="tag">CDPATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/home" class="tag">HOME</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ifs" class="tag">IFS</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optarg" class="tag">OPTARG</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/opterr" class="tag">OPTERR</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/optind" class="tag">OPTIND</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/path" class="tag">PATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mail" class="tag">MAIL</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailcheck" class="tag">MAILCHECK</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/mailpath" class="tag">MAILPATH</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="special variables" /><category term="CDPATH" /><category term="HOME" /><category term="IFS" /><category term="OPTARG" /><category term="OPTERR" /><category term="OPTIND" /><category term="PATH" /><category term="MAIL" /><category term="MAILCHECK" /><category term="MAILPATH" /><summary type="html"><![CDATA[Learn how to properly use Bash predefined special variables such as CDPATH, HOME, IFS, OPTARG, OPTERR, OPTIND, PATH, MAIL, MAILCHECK, and MAILPATH with practical examples to enhance your shell scripting skills.]]></summary></entry></feed>