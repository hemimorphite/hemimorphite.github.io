<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/zh/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/zh/" rel="alternate" type="text/html" /><updated>2024-06-10T12:31:50+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</title><link href="https://hemimorphite.github.io/zh/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04" /><published>2024-06-10T12:00:00+00:00</published><updated>2024-06-10T12:00:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/dotnet.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Step 1: Get the PowerShell version 7.4.2 release</h4>

        <p>Download a release version of PowerShell <code>powershell-7.4.2-linux-x64.tar.gz
        </code> from <a href="https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz">Github</a></p>

        <pre><code class="language-bash hljs">wget https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz</code></pre>

        <p>Create powershell directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/powershell-7.4.2</code></pre>

        <p>Extract the files in <code>powershell-7.4.2-linux-x64.tar.gz</code> to <code>/opt/powershell-7.4.2</code></p>

        <pre><code class="language-bash hljs">sudo tar -zxf powershell-7.4.2-linux-x64.tar.gz -C /opt/powershell</code></pre>

        <p>Install PowerShell using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/pwsh pwsh /opt/powershell-7.4.2/pwsh 10</code></pre>

        <h4>Step 2: Install Prerequisite Packages</h4>

        <p>Install the prerequisite packages for running <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">sudo apt install -y libicu-dev</code></pre>

        <p>Install the prerequisite packages for building powershell from source.</p>

        <pre><code class="language-bash hljs">sudo apt install -y git</code></pre>

        <p>Download dotnet SDK Version 8.0.204 from <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">Microsoft</a></p>

        <pre><code class="language-bash hljs">wget https://download.visualstudio.microsoft.com/download/pr/0a1b3cbd-b4af-4d0d-9ed7-0054f0e200b4/4bcc533c66379caaa91770236667aacb/dotnet-sdk-8.0.204-linux-x64.tar.gz</code></pre>

        <p>Create dotnet directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Extract the files to <code>/opt</code> directory.</p>

        <pre><code class="language-bash hljs">sudo tar -zxf dotnet-sdk-8.0.204-linux-x64.tar.gz -C /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Install dotnet using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/dotnet dotnet /opt/dotnet-sdk-8.0.204/dotnet 10</code></pre>

        <h4>Step 3: Download PowerShell's sources</h4>

        <p>Clone the PowerShell repository from <a href="https://github.com/PowerShell/PowerShell">Github</a>.</p>

        <pre><code class="language-bash hljs">git clone https://github.com/PowerShell/PowerShell.git</code></pre>

        <p>Check out a tag version 7.4.2:</p>

        <pre><code class="language-bash hljs">git checkout tags/v7.4.2</code></pre>

        <p>Change directory to powershell source directory.</p>

        <pre><code class="language-bash hljs">cd PowerShell-7.4.2</code></pre>

        <h4>Step 4: Build PowerShell's sources</h4>

        <p>Run <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">pwsh</code></pre>

        <p>Then run the following commands for building the PowerShell source.</p>

        <pre><code class="language-bash hljs">Import-Module ./build.psm1
Start-PSBuild</code></pre>
        
        <p>If everything went right, PowerShell is now built. The <code>Start-PSBuild</code> script will output the location of the executable:</p>

        <pre><code class="language-bash hljs">./src/powershell-unix/bin/Debug/net8.0/linux-x64/pwsh</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/powershell" class="tag">powershell</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/dotnet" class="tag">dotnet</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="ubuntu 22.04" /><category term="powershell" /><category term="dotnet" /><summary type="html"><![CDATA[Learn how to build PowerShell version 7.4.2 on Ubuntu 22.04 with step-by-step instructions and guidelines. Master the process of compiling and installing PowerShell on your Ubuntu system.]]></summary></entry><entry xml:lang="en"><title type="html">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/zh/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/" rel="alternate" type="text/html" title="Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04" /><published>2024-06-10T06:50:00+00:00</published><updated>2024-06-10T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p><code>update-alternatives</code> is a command line utility in Linux systems that is used to maintain symbolic links for determining the default commands. It is commonly used in systems with multiple versions of the same command installed, such as different versions of Java, Python, or editors like Vim or Emacs. <code>update-alternatives</code> allows you to choose which version of the command should be used as the default system-wide.</p>

        <p>When you install multiple versions of a command or program, they are usually installed in different directories. <code>update-alternatives</code> creates symbolic links in the system's <code>bin</code> directories (e.g., <code>/usr/bin</code>) to point to the specific version of the program you want to use. These symbolic links are used as the default command when you run the command's name in the terminal.</p>

        <p>For example, suppose you have multiple versions of Java installed on your system, such as Java 17, 21, and 22. If you want to use Java 21 as the default Java version, you can use the <code>update-alternatives</code> command to create a symbolic link for the <code>java</code> command to point to the Java 21 binary. This will make Java 21 the default version that is used when you run <code>java</code> in the terminal.</p>

        <p>Download multiple versions of Java using <code>wget</code> command.</p>

        <pre><code class="language-bash hljs">wget https://download.oracle.com/java/22/latest/jdk-22_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</code></pre>
        
        <p>Extract it to <code>opt</code> directory</p>

        <pre><code class="language-bash hljs">sudo tar -zxf jdk-22_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-21_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-17_linux-x64_bin.tar.gz -C /opt</code></pre>
        
        <p>Install multiple versions of Java using <code>update-alternatives</code> command with <code>--install</code> option.</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/java java /opt/jdk-17.0.11/bin/java 10
sudo update-alternatives --install /usr/bin/java java /opt/jdk-21.0.3/bin/java 20
sudo update-alternatives --install /usr/bin/java java /opt/jdk-22.0.1/bin/java 30</code></pre>
        
        <p><code>/usr/bin/java</code> is the path of the symlink, <code>java</code> is the name of the symlink, <code>/opt/jdk-17.0.11/bin/java</code> is the path of the binary file for which you want to create the symbolic link, <code>10</code> is the priority.</p>

        <p>To list all entries of alternatives in the system, use</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --get-selections</code></pre>
        
        <p>To list all alternatives of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --list java</code></pre>
        
        <p>In automatic mode, the alternatives pointed to java version which have the highest priority. To switch to automatic mode, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --auto java</code></pre>
        
        <p>To remove an alternative of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --remove java /opt/jdk-17.0.11/bin/java</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/update-alternatives" class="tag">update-alternatives</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="ubuntu 22.04" /><category term="update-alternatives" /><summary type="html"><![CDATA[Learn how to effectively manage multiple versions of packages using the update-alternatives command in Ubuntu 22.04. This command allows you to easily switch between different versions of software packages on your system.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Git Merge and Git Rebase</title><link href="https://hemimorphite.github.io/zh/2024/05/04/difference-between-git-merge-and-git-rebase/" rel="alternate" type="text/html" title="Difference Between Git Merge and Git Rebase" /><published>2024-05-04T06:50:00+00:00</published><updated>2024-05-04T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Git Merge and Git Rebase</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 04, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Managing repository history is one of the critical parts of keeping your code base scalable. Many approaches might be helpful in one case and not work in another.</p>
        
        <p><code>git rebase</code> and <code>git merge</code> are two git utilities that are designed to combine commit history from one branch to another branch.</p>

        <h4>Git Merge</h4>

        <p><code>git merge</code> is a command used to combine changes from two or more branches into a single branch. When a merge is performed, Git creates a new commit that incorporates the changes from both branches. The resulting commit history looks like a tree, with multiple branches merging into a single trunk.</p>

        <p>To perform a merge, first, ensure you are on the branch that you want to merge changes into (e.g., <code>main</code> branch). Then, run the following command:</p>

        <pre><code class="language-bash hljs">git merge &lt;branch-name&gt;</code></pre>

        <p>where <code>&lt;branch-name&gt;</code> is the name of the branch containing the changes you want to merge. Git will create a new merge commit that combines the changes from both branches. If there are conflicts between the changes in the two branches, Git will prompt you to resolve them before the merge can be completed.</p>

        <p>There are two types of merge:</p>

        <ol>
            <li>Fast-forward merge</li>
            <li>Three-way merge</li>
        </ol>

        <h5>Fast-forward Merge</h5>

        <p>Imagine we are having two branches:</p>

        <ol>
            <li>Parent branch (<code>main</code>)</li>
            <li>Child branch (<code>feature</code>)</li>
        </ol>

        <p>We made changes and commits to the <code>main</code> branch.</p>

        <p>At the second commit on <code>main</code> branch the <code>feature</code> branch got created, and then we made changes and commits to the <code>feature</code> branch only. We didn't make any changes and commits on the <code>main</code> branch.</p>

        <p>If there will be only two branches <code>main</code> and <code>feature</code>, and no new changes and commits have been performed on your <code>main</code> branch since the <code>feature</code> branch got created in this case git will perform fast-forward merge.</p>

        <p>In the Fast-forward merge, git simply moves the pointer from the <code>main</code> branch to the last commit of the <code>feature</code> branch.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-28.jpg" alt="Fast-forward Merge">
        </figure>

        <p>In the Fast-forward merge, there is no chance of conflicts because the changes and commits are in the <code>feature</code> branch only, not on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projecta && cd projecta

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add a file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add some content to the home.html
echo "&lt;p&gt;content for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>

        <p>Now, there are two commits available at the <code>main</code> branch. To confirm that we'll check the log using <code>git log</code> command</p>

        <p>Now we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add some content again to the home.html
echo "&lt;p&gt;content 2 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 3"

# add some content again to the home.html
echo "&lt;p&gt;content 3 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 4"</code></pre>
        
        <p>Now, there will be four commits available at the <code>feature</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <p>Switch back to the <code>main</code> branch and merge the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>Now, there will be four commits available at the <code>main</code> branch.</p>

        <h5>Three-way Merge</h5>

        <p>Three-way merge is a common merging strategy used in Git to combine changes from two different branches or commits into a single unified result. It is designed to handle situations where multiple branches have made conflicting changes to the same file or lines of code.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-27.jpg" alt="Three-way Merge">
        </figure>

        <p>When performing a three-way merge, Git identifies three versions of the code:</p>

        <ol>
            <li>The common ancestor: This is the base version of the code that both branches originally diverged from. It represents the last common commit between the two branches.</li>
            <li>The ours version: This represents the version of the code in the branch you are currently on (usually the branch you are merging into).</li>
            <li>The theirs version: This represents the version of the code in the branch you are merging in (usually the branch being merged into the current branch).</li>
        </ol>

        <p>Git uses these three versions of the code to intelligently merge the changes. It compares the differences between the common ancestor and the ours version and also between the common ancestor and the theirs version. Then, it combines these changes, considering both sets of modifications, to create a merged version of the file.</p>

        <p>During the merge process, if there are conflicting changes (i.e., changes that overlap and cannot be automatically merged), Git will mark those conflicts and pause the merge. It prompts the user to manually resolve the conflicts by editing the affected file(s) to choose which changes to keep. Once the conflicts are resolved, the user can complete the merge by committing the changes.</p>

        <p>Now, we'll create two files named <code>home.html</code> and <code>about.html</code> and create two commits.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectb && cd projectb

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>  

        <p>Now, there are two commits available at the <code>main</code> branch.</p>
        
        <p>Next we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"</code></pre>
        
        <p>Then there will be a total of four commits at the <code>feature</code> branch. Two commits from the <code>main</code> branch and the other two commits from <code>feature</code> branch i.e. the child branch.</p>

        <p>Now we'll switch back to the <code>main</code> branch and create a file <code>contact.html</code> on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>So, There will be three commits available at the <code>main</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>A new commit will be created. That commit is considered as the merge commit.</p>

        <h4>Git Rebase</h4>

        <p>Rebasing is often used as an alternative to merging. Rebasing a branch updates one branch with another by applying the commits of one branch on top of the commits of another branch. For example, if working on a <code>feature</code> branch that is out of date with a <code>main</code> branch, rebasing the feature <code>feature</code> onto <code>main</code> will allow all the new commits from <code>main</code> to be included in <code>feature</code>.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-29.jpg" alt="Rebase">
        </figure>

        <p>For the above example, this is what it looks like from the command line:</p>

        <pre><code class="language-bash hljs">git rebase feature main</code></pre>

        <p>However, it is more common to first checkout a branch and then run the rebase command with the name of the branch you wish to rebase on to:</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>The golden rule of <code>git rebase</code> is to never use it on public branches.</p>

        <p>For example, think about what would happen if you rebased <code>main</code> onto your <code>feature</code> branch. The rebase moves all of the commits in <code>main</code> onto the tip of <code>feature</code>. The problem is that this only happened in your repository. All of the other developers are still working with the original <code>main</code>.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectc && cd projectc

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"

# create feature branch and switch to it
git checkout -b feature

# add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"

# switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>Now we come back to the <code>feature</code> branch, but we want to have a linear history, moving the <code>feature</code> to the tip of <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>To confirm that we'll check the log using <code>git log</code> command</p>

        <pre><code class="language-bash hljs">git log --graph</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-30.png" alt="linear history">
        </figure>

        <p>Having a linear history, we can do a fast-forward merge by merging the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout main
git merge feature</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-merge" class="tag">git merge</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-rebase" class="tag">git rebase</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-04" /><category term="git" /><category term="git merge" /><category term="git rebase" /><summary type="html"><![CDATA[Understanding the difference between Git merge and Git rebase is crucial for effective version control and collaboration. Learn the distinctions between these two essential Git commands.]]></summary></entry><entry xml:lang="en"><title type="html">List of Common WSL Commands</title><link href="https://hemimorphite.github.io/zh/2024/05/01/list-of-common-wsl-commands/" rel="alternate" type="text/html" title="List of Common WSL Commands" /><published>2024-05-01T07:28:00+00:00</published><updated>2024-05-01T07:28:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands-</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">List of Common WSL Commands</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 01, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/wsldistribution.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Here is a list of some of the most common WSL commands:</p>

        <ul>
            <li><code>wsl</code>: This command will start a new WSL session</li>
            <li><code>wsl -l</code>: This command will list all of the installed WSL distributions</li>
            <li><code>wsl --list --online</code>: This command will list all of the available WSL distributions</li>
            <li><code>wsl --list --running</code>: This command will list all of the running WSL distributions</li>
            <li><code>wsl -d &lt;distribution name&gt;</code>: This command will run the specified distribution</li>
            <li><code>wsl --install &lt;distribution name&gt;</code>: This command will install the specified distribution</li>
            <li><code>wsl --unregister &lt;distribution name&gt;</code>: This command will remove the specified distribution to free up the disk space</li>
            <li><code>wsl --shutdown</code>: This command will shut down all running WSL sessions</li>
            <li><code>wsl --terminate &lt;distribution name&gt;</code>: This command will terminate the WSL session for the specified distribution</li>
            <li><code>wsl --set-version &lt;version number&gt;</code>: This command will set the default WSL version</li>
            <li><code>wsl --status</code>:  This command will display the status of all running WSL sessions</li>
            <li><code>wsl --import &lt;distribution name&gt; &lt;tarball path&gt;</tarball></code>: This command will import a new WSL distribution from a tarball file</li>
            <li><code>wsl --mount &lt;source path&gt; &lt;source path&gt;</code>: This command will mount a Windows file system path to a WSL mount point</li>
            <li><code>wsl --unmount &lt;mount point&gt;</code>: This command will unmount a WSL mount point</li>
            <li><code>wsl --default &lt;distribution name&gt;</code>: This command will set the default WSL distribution</li>
        </ul>

        <p>In WSL, your Windows drives are mounted under the <code>/mnt</code> directory. So, for example, your C drive would be available at <code>/mnt/c/</code>. <code>cd /mnt/c/Users/&lt;YourWindowsUsername&gt;/</code></p>

        <p>For WSL 2, you can access the Linux file system by navigating to <code>\\wsl$\&lt;DistributionName&gt;</code> in File Explorer.</p>

        <p>WSL configurations can be modified by editing the file: <code>C:\Users\&lt;YourWindowsUsername&gt;\.wslconfig</code>.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/windows" class="tag">windows</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/wsl" class="tag">wsl</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-01" /><category term="linux" /><category term="windows" /><category term="wsl" /><summary type="html"><![CDATA[Looking for a quick reference guide to WSL commands? Look no further! Our website provides a comprehensive list to help you navigate the Windows Subsystem for Linux effortlessly.]]></summary></entry><entry xml:lang="en"><title type="html">Move WSL File System to Another Drive</title><link href="https://hemimorphite.github.io/zh/2024/04/30/move-wsl-file-system-to-another-drive/" rel="alternate" type="text/html" title="Move WSL File System to Another Drive" /><published>2024-04-30T16:50:00+00:00</published><updated>2024-04-30T16:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/30/move-wsl-file-system-to-another-drive</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/30/move-wsl-file-system-to-another-drive/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Move WSL File System to Another Drive</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 30, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/wsldistribution.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>First, you need to know the WSL distribution name which you want to move to another drive. List the installed WSL distributions on your computer:</p>

        <pre><code class="language-bash hljs"># PowerShell
wsl -l -v</code></pre>

        <p>If you are using a username different than <code>root</code>, you need to check the username:</p>
        
        <pre><code class="language-bash hljs"># Linux Terminal
whoami</code></pre>

        <p>Shut down all the WSL distros running on Windows:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
wsl --shutdown</code></pre>

        <p>Next, you are going to create a backup for your WSL distribution <code>Ubuntu</code>:</p>

        <pre><code class="language-bash hljs"># PowerShell
mkdir D:\backup
wsl --export Ubuntu D:\backup\ubuntu.tar</code></pre>
        
        <p>Wait till the WSL export is over (it may take much time). A TAR archive with your WSL distribution file system will appear in the target directory.</p>

        <p>When finished, you can remove the WSL distribution to free up the disk space</p>

        <pre><code class="language-bash hljs"># PowerShell
wsl --unregister Ubuntu</code></pre>

        <p>Create a directory for your WSL distribution on a new drive and import the TAR archive to WSL using this command:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
mkdir D:\WSL
wsl --import Ubuntu D:\WSL\ D:\backup\ubuntu.tar</code></pre>

        <p>By default Ubuntu will use <code>root</code> as the default user, to change it to another user name (we got it earlier), run:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
cd $env:USERPROFILE\AppData\Local\Microsoft\WindowsApps
ubuntu config --default-user johndoe</code></pre>
        
        <p>Start the WSL distribution:</p>

        <pre><code class="language-bash hljs">wsl -d Ubuntu</code></pre>

    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/windows" class="tag">windows</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/wsl" class="tag">wsl</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-30" /><category term="linux" /><category term="windows" /><category term="wsl" /><summary type="html"><![CDATA[Learn how to move the Windows Subsystem for Linux (WSL) file system to another drive with step-by-step instructions, ensuring a smooth transition and efficient use of storage space.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Git Pull and Git Fetch</title><link href="https://hemimorphite.github.io/zh/2024/04/21/difference-between-git-pull-and-git-fetch/" rel="alternate" type="text/html" title="Difference Between Git Pull and Git Fetch" /><published>2024-04-21T08:10:00+00:00</published><updated>2024-04-21T08:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/21/difference-between-git-pull-and-git-fetch</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/21/difference-between-git-pull-and-git-fetch/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Git Pull and Git Fetch</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 21, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Create a repository on Github</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-18.jpg" alt="Create a repository on Github">
        </figure>

        <p>Generate a personal access token on GitHub to authenticate the access to the GitHub repo. Navigate to your Github <b>account settings</b>, then <b>Developer Settings</b>. Click the <b>Personal access tokens</b> menu, then click <b>Generate new token</b>.</p>

        <p>Enter a name for the token under <b>Token Name</b>, choose the expiry time. Under the <b>Repository access</b> section choose <b>only selected repositories</b>. Click the "Select Repositories" button and choose the repository created. Under the "Permissions" section expand "Repository Permissions". Scroll down to "Contents" and select "Access: Read and Write". Scroll down to the bottom and click Generate token.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-19.jpg" alt="Generate a personal access token on GitHub">
        </figure>

        <p>Then create a new local repository</p>  

        <pre><code class="language-bash hljs">mkdir fantastic-blog && cd fantastic-blog
git init --initial-branch=main</code></pre>

        <p>Create a new file <code>home.html</code> with contents</p>

        <pre><code class="language-bash hljs">touch home.html
echo "&lt;h1&gt;Blog Header&lt;/h1&gt;" > home.html</code></pre>
        
        <p>Add <code>home.html</code> to the repository staging area and create a commit</p>
        
        <pre><code class="language-bash hljs">git add home.html
git commit -m "added home.html to the repo"</code></pre>
        
        <p>Create a remote branch and push the local repo to remote repo</p>
        
        <pre><code class="language-bash hljs">git remote add origin https://github.com/chonkarexsaurus/fantastic-blog.git
git push origin main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-24.png" alt="create a local repository">
        </figure>

        <p>Now both the local and remote repositories are in sync.</p>

        <p>Update the <code>home.html</code> file in the Github repository by adding a <code>&lt;p&gt;paragraph one&lt;/p&gt;</code> in the file.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-20.jpg" alt="update remote repository">
        </figure>

        <p>Now the local repository has 1 commit but the remote repository already has 2 commits.</p>
        
        <p>Download the latest changes by using <code>git fetch</code> command.</p>

        <pre><code class="language-bash hljs">git fetch origin</code></pre>
        
        <p>Now that you've downloaded the latest changes, you can compare your local branch to remote branch</p>
        
        <pre><code class="language-bash hljs">git diff main origin/main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-21.jpg" alt="fetch remote repository">
        </figure>

        <p>To approve the changes and merge them into your local <code>main</code> branch use <code>git merge</code> command:</p>

        <pre><code class="language-bash hljs">git checkout main
git merge origin/main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-22.jpg" alt="merge remote repository">
        </figure>

        <p>The <code>origin/main</code> and <code>main</code> branches now point to the same commit, and you are synchronized with the upstream developments.</p>

        <p>Let's add another line of code in our <code>home.html</code> file in the remote repository.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-23.jpg" alt="update remote repository">
        </figure>

        <p>Now there are 3 commits in the remote repository, and 2 commits in the local repository</p>

        <p>To synchronize your local repository with the central repository's <code>main</code> branch run <code>git pull</code> command.</p>

        <pre><code class="language-bash hljs">git pull origin main</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-25.jpg" alt="synchronize repository">
        </figure>

        <p>Difference between Git Fetch and Git Pull</p>

        <table class="table table-bordered border-primary">
            <thead>
                <th>Git Fetch</th>
                <th>Git Pull</th>
            </thead>
            <tbody>
            <tr>
                <td>Used to fetch all changes from the remote repository to the local repository without merging into the current working directory</td>
                <td>Brings the copy of all the changes from a remote repository and merges them into the current working directory</td>
            </tr>
            <tr>
                <td>Repository data is updated in the .git directory</td>
                <td>The working directory is updated directly</td>
            </tr>
            <tr>
                <td>Review of commits and changes can be done</td>
                <td>Updates the changes to the local repository immediately</td>
            </tr>
            <tr>
                <td>No possibility of merge conflicts</td>
                <td>Merge conflicts are possible if the remote and the local repositories have done changes at the same place</td>
            </tr>
            <tr>
                <td>Git fetch basically imports the commits to local branches so as to keep up-to-date that what everybody is working on</td>
                <td>Git Pull basically brings the local branch up-to-date with the remote copy that will also updates the other remote tracking branches</td>
            </tr>
            </tbody>
        </table>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-pull" class="tag">git pull</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-fetch" class="tag">git fetch</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-21" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="git pull" /><category term="git fetch" /><summary type="html"><![CDATA[Understand the key differences between Git pull and Git fetch. Learn when to use each command to effectively manage your Git repositories and collaborate with your team.]]></summary></entry><entry xml:lang="en"><title type="html">Tracking Branch in Git</title><link href="https://hemimorphite.github.io/zh/2024/04/20/tracking-branch-in-git/" rel="alternate" type="text/html" title="Tracking Branch in Git" /><published>2024-04-20T15:38:00+00:00</published><updated>2024-04-20T15:38:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/20/tracking-branch-in-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/20/tracking-branch-in-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Tracking Branch in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 20, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>A tracking branch is a branch that is linked to a remote branch.</p>

        <p>A local branch can track a remote branch using <code>git branch</code> command with long option <code>--set-upstream-to=</code> or short option <code>-u</code> followed by a branch name. If no branch name is specified, then it defaults to the current branch. For example,</p>

        <pre><code class="language-bash hljs">git branch -u origin/issue-1</code></pre>

        <p>or longer option:</p>

        <pre><code class="language-bash hljs">git branch --set-upstream-to=origin/issue-1</code></pre>

        <p>When you clone a repository, it generally automatically creates a <code>main</code> branch that tracks <code>origin/main</code>. That's why <code>git push</code> and <code>git pull</code> work out of the box with no other arguments.</p>

        <p>You can Check out a local branch from a remote branch by creating what is called a tracking branch. Tracking branches are local branches that have a direct relationship to a remote branch. If you're on a tracking branch and type <code>git push</code>, Git automatically knows which server and branch to push to. Also, running <code>git pull</code> while on one of these branches fetches all the remote references and then automatically merges in the corresponding remote branch.</p>

        <pre><code class="language-bash hljs">git checkout --track origin/serverfix</code></pre>

        <p>That command creates a local <code>serverfix</code> branch with the same content of <code>origin/serverfix</code>, and makes it a tracking branch of <code>origin/serverfix</code>.</p>

        <p>To set up a local branch with a different name than the remote branch:</p>

        <pre><code class="language-bash hljs">git checkout -b sf --track origin/serverfix</code></pre>

        <p>That command creates a local <code>sf</code> branch with the same content of <code>origin/serverfix</code>, and makes it a tracking branch of <code>origin/serverfix</code>.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/tracking-branch" class="tag">tracking branch</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-20" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="tracking branch" /><summary type="html"><![CDATA[A tracking branch in Git is associated with a remote branch and allows you to easily push and pull changes. Learn how to set up and work with tracking branches effectively.]]></summary></entry><entry xml:lang="en"><title type="html">Clone Remote Branches in Git</title><link href="https://hemimorphite.github.io/zh/2024/04/20/clone-remote-branches-in-git/" rel="alternate" type="text/html" title="Clone Remote Branches in Git" /><published>2024-04-20T08:16:00+00:00</published><updated>2024-04-20T08:16:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/20/clone-remote-branches-in-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/20/clone-remote-branches-in-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Clone Remote Branches in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 20, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Clone Only Single, Specific Remote Branch in Git</h4>

        <p>To clone only single, specific a remote branch, use the <code>git clone</code> command followed by <code>--single-branch</code> flag, <code>--branch</code> flag and the remote repository url.</p>

        <pre><code class="language-bash hljs">git clone --branch &lt;remote-branch-name&gt; --single-branch &lt;remote-repo-url&gt;</code></pre>

        <h4>Clone All Remote Branches in Git</h4>

        <p>The <code>git clone</code> command is used to create a copy of a remote repository on your local machine. By default, this command only clones the <code>main</code> branch (usually <code>master</code> or <code>main</code>).</p>

        <pre><code class="language-bash hljs">git clone &lt;remote-repo-url&gt;</code></pre>

        <p>When you run <code>git clone</code> without followed by flags, the following actions occur:</p>

        <ol>
            <li>A new folder called <code>repo</code> is made</li>
            <li>It is initialized as a Git repository</li>
            <li>A remote named <code>origin</code> is created, pointing to the URL you cloned from
            </li>
            <li>All of the repository's files and commits are downloaded there</li>
            <li>The default branch is checked out</li>
        </ol>

        <p>After cloning, navigate to the directory of the cloned repository:</p>

        <pre><code class="language-bash hljs">cd &lt;repository-name&gt;</code></pre>

        <p>To fetch all branches from the remote, you can use:</p>

        <pre><code class="language-bash hljs">git fetch --all</code></pre>

        <p>This command fetches all objects from the remote repository but doesn't create local branches for them.</p>

        <p>After fetching, you can show all branches, including remote ones by <code>git branch -a</code> command.</p>

        <p>To create local branches from remote branches, you have to check out each branch:</p>

        <pre><code class="language-bash hljs">git checkout -b &lt;local-branch-name&gt; &lt;origin/remote-branch-name&gt;</code></pre>

        <p>Manually checking out each branch can be tiresome if the repository has numerous branches. Here's a simple command to automate the process:</p>

        <pre><code class="language-bash hljs">for branch in `git branch -r | grep -v HEAD`;do
    git checkout -b $branch $branch
done</code></pre>
        
        <p>This command loops through each remote branch and creates a corresponding local branch.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/clone-branches" class="tag">clone branches</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-20" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="clone branches" /><summary type="html"><![CDATA[Learn how to effectively clone remote branches in Git, whether you need to clone all branches or just a specific branch. This guide provides step-by-step instructions on how to accomplish this task.]]></summary></entry><entry xml:lang="en"><title type="html">Working with Remote Repositories</title><link href="https://hemimorphite.github.io/zh/2024/04/19/working-with-remote-repositories/" rel="alternate" type="text/html" title="Working with Remote Repositories" /><published>2024-04-19T03:50:00+00:00</published><updated>2024-04-19T03:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/19/working-with-remote-repositories</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/19/working-with-remote-repositories/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Working with Remote Repositories</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 19, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>URLs are long, complicated, and easy to mistype. It's much easier to give each remote a name. The <code>git remote</code> command lets us manage a list of remotes for each git repository.</p>

        <p>To add a new remote repository, you can use the <code>git remote add</code> command, followed by a remote name for the remote repository and remote repository URL.</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-repository-url&gt;</code></pre>

        <p>For example, to add a remote repository with the remote name <code>origin</code> and the URL <code>https://github.com/user/repo.git</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote add origin https://github.com/user/repo.git</code></pre>

        <p>To rename a remote repository, you can use the <code>git remote rename</code> command followed by the current remote name of the remote repository and the new remote name you want to assign.</p>

        <pre><code class="language-bash hljs">git remote rename &lt;old-remote-name&gt; &lt;new-remote-name&gt;</code></pre>

        <p>For example, to rename a remote repository with the shortname <code>origin</code> to <code>upstream</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote rename origin upstream</code></pre>

        <p>To remove a remote repository, you can use the <code>git remote remove</code> command followed by the remote name of the remote repository.</p>

        <pre><code class="language-bash hljs">git remote remove &lt;remote-name&gt;</code></pre>

        <p>For example, to remove a remote repository with the remote name <code>upstream</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote remove upstream</code></pre>

        <p>To fetch updates from a remote repository, you can use the <code>git fetch</code> command followed by the remote name of the remote repository. This command will download the latest changes from the remote repository without merging them into your local branch.</p>

        <pre><code class="language-bash hljs">git fetch &lt;remote-name&gt;</code></pre>

        <p>For example, to fetch updates from a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git fetch origin</code></pre>

        <p>To merge the fetched changes into your local branch, you can use the <code>git merge</code> command. However, a more convenient way to accomplish this is to use the <code>git pull</code> command, which fetches and merges the changes in a single step. To pull updates from a remote repository, use the <code>git pull</code> command followed by the remote name of the remote repository and the remote branch you want to pull from.</p>

        <pre><code class="language-bash hljs">git pull &lt;remote-name&gt; &lt;remote-branch-name&gt;</code></pre>

        <p>For example, to pull updates from the <code>main</code> branch of a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git pull origin main</code></pre>

        <p>To push changes to a remote repository, use the <code>git push</code> command followed by the remote name of the remote repository and the local branch name you want to push.</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;local-branch-name&gt;</code></pre>

        <p>For example, to push changes from your local <code>main</code> branch to a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git push origin main</code></pre>  

        <p>To check the status of remote branches, you can use the <code>git remote show</code> command, followed by the remote name of the remote repository. This command will display information about the remote branches, such as their status compared to your local branches and any new branches that have been added to the remote repository.</p>

        <pre><code class="language-bash hljs">git remote show &lt;remote-name&gt; &lt;remote-branch-name&gt;</code></pre>

        <p>For example, to check the status of remote branches for a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote show origin main</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/remote-repository" class="tag">remote repository</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-19" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="remote repository" /><summary type="html"><![CDATA[Learn how to effectively clone remote branches in Git, whether you need to clone all branches or just a specific branch. This guide provides step-by-step instructions on how to accomplish this task.]]></summary></entry><entry xml:lang="en"><title type="html">Git Refs, Git Heads and Git HEAD</title><link href="https://hemimorphite.github.io/zh/2024/04/18/git-refs-git-heads-and-git-head/" rel="alternate" type="text/html" title="Git Refs, Git Heads and Git HEAD" /><published>2024-04-18T14:10:00+00:00</published><updated>2024-04-18T14:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/18/git-refs-git-heads-and-git-head</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/18/git-refs-git-heads-and-git-head/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Git Refs, Git Heads and Git HEAD</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 18, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>In Git, a <b>ref</b> is a human readable name that references a Git commit ID. A <b>ref</b> is essentially a pointer to a commit. Examples of refs are Git branch names such as <code>main</code> and <code>dev</code>. Another example of refs are Git tags such as <code>v0.1</code> or <code>v0.2</code>. You can think of each of these as a variable name that points to a commit ID. The commit ID that a ref points to is dynamic so it can change over time.</p>

        <p>Refs are stored in a special hidden location in your Git repository at the path <code>.git/refs/</code>.</p>

        <p>In Git, a <b>head</b> is a <b>ref</b> that points to the tip (latest commit) of a branch. You can view your repository's heads in the path <code>.git/refs/heads/</code>. In this path you will find one file for each branch, and the content in each file will be the commit ID of the tip (most recent commit) of that branch.</p>

        <p>For example, there is literally a file called <code>main</code> in that path that contains the commit ID of the tip (most recent commit) of the <code>main</code> branch. When you make a new commit on a branch or pull commits from a remote, the head file for that branch is always updated to reflect the commit ID of the tip (most recent commit) of the branch. In this way, your branch name ref always stays in sync with the most recent commit at the tip of the branch.</p>

        <p>Git refs and Git heads are simply pointers to commits, in the form of text files where the file name represents the name of the ref/head and the content is the commit ID that the ref points to.</p>

        <p>HEAD is a special ref that points to the commit you are currently working on - the currently checked out commit in your Git working directory. By default, you'll view the tip of the <code>main</code> branch on a repository, unless the <code>main</code> branch of your repository has a different name. The tip of the <code>main</code> branch is the most recent commit on the <code>main</code> branch of your codebase.</p>

        <p>You can find out where HEAD points to by opening the <code>.git/HEAD</code> file in your repository:</p>

        <pre><code class="language-bash hljs">cat .git/HEAD</code></pre>

        <p>Normally you will get something like this (branch name):</p>

        <pre><code class="language-bash hljs">ref: refs/heads/main</code></pre>

        <p>Git HEADs can represent a particular commit in the history of a project. This is because Git lets you check out different points in a repository's history to view how your project has evolved.</p>

        <p>We can check out a specific commit using the checkout command.</p>

        <pre><code class="language-bash hljs">git checkout 82a31ec32441cd06daa5e0397a73f4159cdaad4b</code></pre>

        <p>This command will check out a commit from our repository's history. This makes the HEAD does not point to a branch, but instead points to a specific commit or it is called a detached HEAD state. This means we are viewing a commit rather than a branch.</p>

        <p>You will get a commit ID by opening the <code>.git/HEAD</code> file:</p>

        <pre><code class="language-bash hljs">82a31ec32441cd06daa5e0397a73f4159cdaad4b</code></pre>

        <p>You can fix detached HEAD in Git by switching branches</p>

        <pre><code class="language-bash hljs">git checkout main</code></pre>

        <p>In Git, you can use any of the signs caret(^) or tilde(~) to go backward.</p>

        <p>The tilde(~) sign refers to the first parent in the commit history. <code>HEAD~</code> is always the same as HEAD^, similarly <code>HEAD~~</code> is always the same as <code>HEAD^^</code>, and so on.</p>

        <p>The caret(^) sign refer to the nth parent in the commit history. <code>HEAD^</code> is equivalent to <code>HEAD^1</code>.</p>

        <p>Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.</p>

        <pre><code class="language-bash hljs">G   H   I   J
\ /     \ /
 D   E   F
  \  |  / \
   \ | /   |
    \|/    |
     B     C
      \   /
       \ /
        A        


A =      = A^0
B = A^   = A^1     = A~1
C = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-head" class="tag">Git HEAD</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-refs" class="tag">Git Refs</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git-heads" class="tag">Git Heads</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-18" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="Git HEAD" /><category term="Git Refs" /><category term="Git Heads" /><summary type="html"><![CDATA[Learn about Git Refs, Git Heads, and Git HEAD in version control systems. Understand the differences and how they can be used in your Git workflows. Explore the concepts of HEAD^ and HEAD~.]]></summary></entry></feed>