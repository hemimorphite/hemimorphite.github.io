<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/zh/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/zh/" rel="alternate" type="text/html" /><updated>2024-04-11T08:21:25+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">Local Repository vs Remote Repository</title><link href="https://hemimorphite.github.io/zh/2024/04/11/local-repository-vs-remote-repository/" rel="alternate" type="text/html" title="Local Repository vs Remote Repository" /><published>2024-04-11T07:30:00+00:00</published><updated>2024-04-11T07:30:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/11/local-repository-vs-remote-repository</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/11/local-repository-vs-remote-repository/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Local Repository vs Remote Repository</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/gitrepository.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Local Repository</h4>

        <p>A local repository is hosted on a local machine for an individual user.</p>

        <p>Some essential Git commands for working with a local repository:</p>

        <p>1. Set Git configuration values like username and email on a global level:</p>

        <pre><code class="language-bash hljs">git config --global user.name "John Doe"
git config --global user.email johndoe@example.com</code></pre>

        <p>2. Initialize a new local repository:</p>

        <pre><code class="language-bash hljs">git init</code></pre>

        <p>3. Add files or directories to the staging area:</p>

        <pre><code class="language-bash hljs">git add &lt;file1/directory1&gt; &lt;file2/directory2&gt;</code></pre>
        
        <p>4. Remove files or directories from a Git repository:</p>

        <pre><code class="language-bash hljs"># remove files
git rm &lt;file1&gt; &lt;file2&gt;

# remove directories
git rm -r &lt;directory1&gt; &lt;directory2&gt;</code></pre>

        <p>5. View the state of the working directory and the staging area:</p>

        <pre><code class="language-bash hljs">git status</code></pre>

        <p>6. Commit changes to the local repository:</p>

        <pre><code class="language-bash hljs">git commit -m "Commit message"</code></pre>

        <p>7. View the commit history:</p>

        <pre><code class="language-bash hljs">git log</code></pre>
        
        <p>8. Create a new branch:</p>

        <pre><code class="language-bash hljs">git branch &lt;branch-name&gt;</code></pre>
        
        <p>9. Switch to a different branch:</p>

        <pre><code class="language-bash hljs">git checkout &lt;branch-name&gt;</code></pre>
        
        <h4>Remote Repository</h4>

        <p>A remote repository is hosted on a remote (this could be on the internet or an off-site server; it could even be the same machine in a different path) and is shared among multiple team members.</p>
        
        <p>Some essential Git commands for working with a remote repository:</p>
        
        <p>1. Clone a remote repository:</p>

        <pre><code class="language-bash hljs">git clone &lt;remote-url&gt;</code></pre>
        
        <p>2. Add a remote repository:</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-url&gt;</code></pre>

        <p>3. Push local commits to a remote repository:</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;branch-name&gt;</code></pre>

        <p>4. Pull the latest changes from a remote repository:</p>

        <pre><code class="language-bash hljs">git pull &lt;remote-name&gt; &lt;branch-name&gt;</code></pre>

        <p>5. Fetch the latest changes from a remote repository:</p>

        <pre><code class="language-bash hljs">git fetch &lt;remote-name&gt;</code></pre>

        <p>6. Create a new branch in the remote repository:</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/local-repository" class="tag">local repository</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/remote-repository" class="tag">remote repository</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-11" /><category term="git" /><category term="local repository" /><category term="remote repository" /><summary type="html"><![CDATA[Understand the differences between local repository and remote repository in Git. Learn how to effectively manage your code and collaborate with teams using Git.]]></summary></entry><entry xml:lang="en"><title type="html">Deploy a Jekyll Site to Github Pages</title><link href="https://hemimorphite.github.io/zh/2024/04/10/deploy-a-jekyll-site-to-github-pages/" rel="alternate" type="text/html" title="Deploy a Jekyll Site to Github Pages" /><published>2024-04-10T13:30:00+00:00</published><updated>2024-04-10T13:30:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/10/deploy-a-jekyll-site-to-github-pages</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/10/deploy-a-jekyll-site-to-github-pages/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Deploy a Jekyll Site to Github Pages</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/githubpages.png" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Create a new repository on Github by clicking the new button</p>
        
        <figure class="post-figure">
            <img src="/assets/images/githubpages-01.png" alt="Create a new repository">
        </figure>

        <p>Your repository must be named <code>&lt;username&gt;.github.io</code> and must be public. Then click Create Repository button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-02.png" alt="repository name">
        </figure>

        <p>Fork the <a href="https://github.com/daattali/beautiful-jekyll" target="_blank">Beautiful Jekyll repo</a>:</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-03.png" alt="Fork repository">
        </figure>

        <p>Rename the repository name to <code>&lt;username&gt;.github.io</code> and click Create Fork button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-04.png" alt="Create Fork">
        </figure>

        <p>Click on the repository settings tab.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-05.png" alt="Setting repository">
        </figure>

        <p>From the left-hand side menu, click Pages under the Code and Automation section.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-06.png" alt="Pages menu">
        </figure>

        <p>In the Build and Deployment section, choose the branch (i.e. <code>master</code>) from which you would like GitHub Pages to deploy your website and click save button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-07.png" alt="Choose branch to publish Github Pages">
        </figure>

        <p>Edit the <code>_config.yml</code> file to change any settings you want. To edit the file, first click on it to view the file, and on the next page click on the pencil icon to edit it. After changing the settings, click the green Commit changes button to save these edits.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/githubpages-08.png" alt="Edit the _config.yml">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-09.png" alt="Edit button">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-10.png" alt="Commit Changes">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-11.png" alt="Commit Changes">
        </figure>

        <p>You can now view your site at https://chonkarexsaurus.github.io.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/jekyll" class="tag">jekyll</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/github-pages" class="tag">github pages</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-10" /><category term="jekyll" /><category term="github pages" /><summary type="html"><![CDATA[Learn how to deploy your Jekyll site to GitHub Pages with our step-by-step guide. Easy instructions for hosting your site on GitHub Pages.]]></summary></entry><entry xml:lang="en"><title type="html">Install Jekyll on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/zh/2024/04/09/install-jekyll-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Install Jekyll on Ubuntu 22.04" /><published>2024-04-09T15:10:00+00:00</published><updated>2024-04-09T15:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/09/install-jekyll-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/09/install-jekyll-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Install Jekyll on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 09, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/jekyll.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Install Ruby:</p>
        
        <pre><code class="language-bash hljs">sudo apt-get install -y build-essential ruby-dev git</code></pre>        

        <p>Avoid installing RubyGems packages (called gems) as the root user. Set up a gem installation directory for your user account. The following commands will add environment variables to your <code>~/.bashrc</code> file to configure the gem installation path:</p>

        <pre><code class="language-bash hljs">echo 'export GEM_HOME="$HOME/gems"' >> ~/.bashrc
echo 'export PATH="$HOME/gems/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc</code></pre>

        <p>Install Jekyll and Bundler:</p>

        <pre><code class="language-bash hljs">gem install jekyll bundler</code></pre>

        <p>Clone the <a href="https://github.com/daattali/beautiful-jekyll" target="_blank">Beautiful Jekyll repo</a>:</p>

        <pre><code class="language-bash hljs">git clone https://github.com/daattali/beautiful-jekyll.git</code></pre>

        <p>Navigate to your blog directory and install all dependencies:</p>

        <pre><code class="language-bash hljs">cd beautiful-jekyll
bundle install</code></pre>

        <p>Run your site locally:</p>

        <pre><code class="language-bash hljs">bundle exec jekyll serve</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/jekyll-01.png" alt="Run Jekyll">
        </figure>

        <p>You can now view your site at http://localhost:4000.</p>        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/jekyll" class="tag">jekyll</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-09" /><category term="linux" /><category term="ubuntu 22.04" /><category term="jekyll" /><summary type="html"><![CDATA[Learn how to install Jekyll on Ubuntu 22.04 with step-by-step instructions in this comprehensive guide. Explore the process of setting up Jekyll to build static websites on your Ubuntu system.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3</title><link href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dns-server/" rel="alternate" type="text/html" title="Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3" /><published>2023-08-16T15:00:59+00:00</published><updated>2023-08-16T15:00:59+00:00</updated><id>https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dns-server</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dns-server/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 16, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/fedora38.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Fedora Server 38 as a router tutorial series!</p>

        <ol>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm/">Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/">Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dns-server/">Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>One of the most popular programs for Linux operating systems providing DNS forwarder service is dnsmasq.</p>
        
        <p>Fedora Server 38 comes with <code>systemd-resolved</code> which you need to disable since it binds to port 53 which will conflict with dnsmasq port.</p>

        <p>Disable the systemd-resolved DNS listeners to free up port 53 by uncommenting <code>DNSStubListener</code> and setting it to <code>no</code> in <code>/etc/systemd/resolved.conf</code>.</p>

        <pre><code class="language-bash hljs">DNSStubListener=no</code></pre>        

        <p>Disable the systemd-resolved DNSSEC, DNSOverTLS, LLMNR, and MulticastDNS by uncommenting them and setting it to <code>no</code> in <code>/etc/systemd/resolved.conf</code>.</p>

        <pre><code class="language-bash hljs">DNSSEC=no
DNSOverTLS=no
MulticastDNS=no
LLMNR=no</code></pre>

        <p>In order to configure dnsmasq to act as cache for the host on which it is running, uncomment <code>DNS</code> and set it to <code>127.0.0.1</code> to force host to perform local DNS lookup.</p>

        <pre><code class="language-bash hljs">DNS=127.0.0.1</code></pre>

        <p>Restart the <code>systemd-resolved</code> service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-resolved</code></pre>

        <p>Once that is done, install dnsmasq:</p>

        <pre><code class="language-bash hljs">sudo apt -y install dnsmasq</code></pre>

        <p>To enable DNS forwarder service, you need to configure <code>/etc/dnsmasq.conf</code>.</p>

        <p>Set the port on which dnsmasq will listen for DNS requests. This default to UDP port 53.</p>

        <pre><code class="language-bash hljs">port=53</code></pre>

        <p>Disable forwarding of names without a dot or domain part by uncommenting:</p>

        <pre><code class="language-bash hljs">domain-needed</code></pre>

        <p>Add a local-only domain:</p>

        <pre><code class="language-bash hljs">local=/app/</code></pre>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>

        <p>By default, DNS uses TCP and UDP port 53. Open the DNS port, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=53/tcp
sudo firewall-cmd --zone=public --permanent --add-port=53/udp</code></pre>

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --reload</code></pre>

        <p>Next, you will need to edit your <code>/etc/hosts</code> file and add the local DNS server entries.</p>

        <pre><code class="language-bash hljs">172.16.0.100    bulbasaur.app
172.16.0.101    ivysaur.app
172.16.0.102    venusaur.app</code></pre>        

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>
        
        <p>Install <code>dnsutils</code> package:</p>

        <pre><code class="language-bash hljs">sudo dnf -y install dnsutils</code></pre>

        <p>To test if the local DNS server is working or not, run:</p>

        <pre><code class="language-bash hljs">dig bulbasaur.app
dig ivysaur.app
dig venusaur.app</code></pre>
        
        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; bulbasaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 39436
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;bulbasaur.app.                 IN      A

;; ANSWER SECTION:
bulbasaur.app.          0       IN      A       172.16.0.100

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:51:03 WIB 2023
;; MSG SIZE  rcvd: 58


; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; ivysaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28024
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;ivysaur.app.                   IN      A

;; ANSWER SECTION:
ivysaur.app.            0       IN      A       172.16.0.101

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:51:03 WIB 2023
;; MSG SIZE  rcvd: 56


; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; venusaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7234
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;venusaur.app.                  IN      A

;; ANSWER SECTION:
venusaur.app.           0       IN      A       172.16.0.102

;; Query time: 1 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:51:03 WIB 2023
;; MSG SIZE  rcvd: 57</code></pre>

        <p>To test a reverse IP lookup, run:</p>

        <pre><code class="language-bash hljs">dig -x 172.16.0.100
dig -x 172.16.0.101
dig -x 172.16.0.102</code></pre>        
        
        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; -x 172.16.0.100
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24505
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;100.0.16.172.in-addr.arpa.     IN      PTR

;; ANSWER SECTION:
100.0.16.172.in-addr.arpa. 0    IN      PTR     bulbasaur.app.

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:52:03 WIB 2023
;; MSG SIZE  rcvd: 81


; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; -x 172.16.0.101
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 45987
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;101.0.16.172.in-addr.arpa.     IN      PTR

;; ANSWER SECTION:
101.0.16.172.in-addr.arpa. 0    IN      PTR     ivysaur.app.

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:52:03 WIB 2023
;; MSG SIZE  rcvd: 79


; &lt;&lt;&gt;&gt; DiG 9.18.17 &lt;&lt;&gt;&gt; -x 172.16.0.102
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 32116
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;102.0.16.172.in-addr.arpa.     IN      PTR

;; ANSWER SECTION:
102.0.16.172.in-addr.arpa. 0    IN      PTR     venusaur.app.

;; Query time: 1 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Wed Aug 16 21:52:03 WIB 2023
;; MSG SIZE  rcvd: 80</code></pre>

        <p>Run the tests on the client computers as well to check if the local DNS server is working or not.</p>        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/fedora-38" class="tag">fedora 38</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ufw" class="tag">ufw</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/dns" class="tag">DNS</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-16" /><category term="qemu" /><category term="linux" /><category term="fedora 38" /><category term="ufw" /><category term="DNS" /><summary type="html"><![CDATA[This tutorial provides step-by-step instructions on how to set up Fedora Server 38 as a DNS Server using Qemu/KVM. Learn how to configure network settings and create virtual machines to build your own virtual network infrastructure.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2</title><link href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" rel="alternate" type="text/html" title="Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2" /><published>2023-08-16T09:38:59+00:00</published><updated>2023-08-16T09:38:59+00:00</updated><id>https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 16, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/fedora38.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Fedora Server 38 as a router tutorial series!</p>

        <ol>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm/">Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/">Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dns-server/">Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>One of the most popular programs for Linux operating systems providing DHCP service is dnsmasq.</p>
        
        <p>Install dnsmasq:</p>

        <pre><code class="language-bash hljs">sudo dnf -y install dnsmasq</code></pre>

        <p>The response should look similar to this:</p>
        
        <pre><code class="language-bash hljs">Fedora 38 - x86_64                                                                        1.3 MB/s |  83 MB     01:02    
Fedora 38 openh264 (From Cisco) - x86_64                                                  504  B/s | 2.5 kB     00:05    
Fedora Modular 38 - x86_64                                                                376 kB/s | 2.8 MB     00:07    
Fedora 38 - x86_64 - Updates                                                              1.4 MB/s |  30 MB     00:21    
Fedora Modular 38 - x86_64 - Updates                                                      402 kB/s | 2.1 MB     00:05    
Dependencies resolved.
==========================================================================================================================
 Package                     Architecture               Version                         Repository                   Size
==========================================================================================================================
Installing:
 dnsmasq                     x86_64                     2.89-5.fc38                     updates                     357 k

Transaction Summary
==========================================================================================================================
Install  1 Package

Total download size: 357 k
Installed size: 768 k
Downloading Packages:
dnsmasq-2.89-5.fc38.x86_64.rpm                                                            253 kB/s | 357 kB     00:01    
--------------------------------------------------------------------------------------------------------------------------
Total                                                                                     126 kB/s | 357 kB     00:02     
Fedora 38 - x86_64 - Updates                                                              1.2 MB/s | 1.6 kB     00:00    
Importing GPG key 0xEB10B464:
 Userid     : "Fedora (38) &lt;fedora-38-primary@fedoraproject.org&gt;"
 Fingerprint: 6A51 BBAB BA3D 5467 B617 1221 809A 8D7C EB10 B464
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-38-x86_64
Key imported successfully
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                                                                  1/1 
  Running scriptlet: dnsmasq-2.89-5.fc38.x86_64                                                                       1/1 
  Installing       : dnsmasq-2.89-5.fc38.x86_64                                                                       1/1 
  Running scriptlet: dnsmasq-2.89-5.fc38.x86_64                                                                       1/1 
  Verifying        : dnsmasq-2.89-5.fc38.x86_64                                                                       1/1 

Installed:
  dnsmasq-2.89-5.fc38.x86_64                                                                                              

Complete!</code></pre>

        <p>To enable DHCP service, you need to configure <code>/etc/dnsmasq.conf</code>.</p>

        <p>By default dnsmasq enables DNS service. You can turn it off by changing the port to 0:</p>

        <pre><code class="language-bash hljs">port=0</code></pre>
        
        <p>The DHCPv4 server is activated by specifying an IPv4 address range and a router:</p>

        <pre><code class="language-bash hljs">dhcp-range=set:enp0s5v4,172.16.0.2,172.16.0.254,255.255.255.0,12h

dhcp-option=tag:enp0s5v4,option:router,172.16.0.1</code></pre>

        <p>The above configuration instructs dnsmasq to offer IPv4 addresses between <code>172.16.0.2</code> and <code>172.16.0.254</code> with a subnet <code>255.255.255.0</code> on the interface <code>enp0s5</code>. Issued IPs will have a lease lifetime of twelve hours, after which clients will need to request a renewed lease.</p>

        <p>Make sure the following options and other options are commented out:</p>

        <pre><code class="language-bash hljs">#interface=lo

#bind-interfaces</code></pre>

        <pre><code class="language-bash hljs">dhcp-range=set:enp0s5v4,172.16.0.2,172.16.0.254,255.255.255.0,12h

dhcp-option=tag:enp0s5v4,option:router,172.16.0.1</code></pre>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>        

        <p>By default DHCP uses UDP ports 68 and 67 to initiate communication between the IPv4 client and server. If port 67 is in use by another process, DHCP server cannot communicate with DHCPv4 clients.</p>

        <p>To open UDP port 67 in ufw, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=67/udp</code></pre>

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --reload</code></pre>

        <p>Dnsmasq also provides full IPv6 support.</p>
                
        <p>The DHCPv6 server is activated by specifying an IPv6 address range and enabling IPv6 Router Advertisement feature:</p>

        <pre><code class="language-bash hljs">dhcp-range=set:enp0s5v6,::2,::ffff,constructor:enp0s5,slaac,64,12h

enable-ra</code></pre>
        
        <p>The above configuration instructs dnsmasq to offer IPv6 addresses between <code>fd62:bf06:3a25:7670::2</code> and <code>fd62:bf06:3a25:7670::ffff</code> with prefix length 64 bits on the interface <code>enp0s5</code>.</p>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>

        <p>By default DHCP uses UDP ports 546 and 547 to initiate communication between the IPv6 client and server. If port 547 is in use by another process, DHCP server cannot communicate with DHCPv6 clients.</p>

        <p>To open UDP port 547 in ufw, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=547/udp</code></pre>

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --reload</code></pre>

        <p>Now the client computers should obtain IPv4 address and IPv6 address automatically.</p>

        <figure class="post-figure">
            <img src="/assets/images/fedoradhcpserver-01.jpg" alt="configuring Fedora Server 38 as DHCP server">
        </figure>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/fedora-38" class="tag">fedora 38</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/firewalld" class="tag">firewalld</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/dhcp" class="tag">DHCP</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-16" /><category term="qemu" /><category term="linux" /><category term="fedora 38" /><category term="firewalld" /><category term="DHCP" /><summary type="html"><![CDATA[This tutorial provides step-by-step instructions on how to set up Fedora Server 38 as a DHCP Server using Qemu/KVM. Learn how to configure network settings and create virtual machines to build your own virtual network infrastructure.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1</title><link href="https://hemimorphite.github.io/zh/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm/" rel="alternate" type="text/html" title="Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1" /><published>2023-08-15T13:10:20+00:00</published><updated>2023-08-15T13:10:20+00:00</updated><id>https://hemimorphite.github.io/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 15, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/fedora38.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Fedora Server 38 as a router tutorial series!</p>

        <ol>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/15/setup-fedora-server-38-as-a-nat-router-with-qemu-kvm/">Setup Fedora Server 38 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/">Setup Fedora Server 38 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/16/setup-fedora-server-38-as-a-dns-server/">Setup Fedora Server 38 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>This is how it will look like the virtual network we are going to build:</p>
        
        <figure class="post-figure">
            <img src="/assets/images/fedoranat-01.jpg" alt="configuring Fedora Server 38 as a NAT router">
        </figure>

        <ul>
            <li><b>enp0s4</b>: WAN interface</li>
            <li><b>enp0s5</b>: LAN interface with a ipv4 subnet prefix address 172.16.0.0/24</li>
            <li><b>192.168.0.15</b>: the first IPv4 address of Fedora Server 38 as WAN IPv4 address</li>
            <li><b>172.16.0.1</b>: the second IPv4 address of Fedora Server 38 as LAN IPv4 Gateway</li>
            <li><b>172.16.0.11</b>: the IPv4 address of the first client</li>
            <li><b>172.16.0.12</b>: the IPv4 address of the second client</li>
        </ul>

        <p>First, we need to have three qemu images:</p>

        <ul>
            <li>Fedora Server 38 distro as a router gateway</li>
            <li>Fedora Desktop 38 distro as a client 1</li>
            <li>Fedora Desktop 38 distro as a client 2</li>
        </ul>

        <p>Then, we need set up a linux bridge (which will act as a layer 2 switch) and three tap interfaces on the host computer to connect three qemu images to each other.</p>

        <p>We can create a new tap interface using <code>tunctl</code> command. In order to use <code>tunctl</code> command, you need to install <code>uml-utilities</code> package on Ubuntu:</p>

        <pre><code class="language-bash hljs">sudo apt install uml-utilities</code></pre>

        <p>Or <code>tunctl</code> package on Fedora:</p>

        <pre><code class="language-bash hljs">sudo dnf install tunctl</code></pre>

        <p>We need to create a tap interface for each of the virtual machines, then we will need to create three different tap interfaces:</p>

        <pre><code class="language-bash hljs">sudo tunctl -u $USER -t tap1
sudo tunctl -u $USER -t tap2
sudo tunctl -u $USER -t tap3</code></pre>

        <p>Next, we bring the tap interfaces up:</p>

        <pre><code class="language-bash hljs">sudo ip link set dev tap1 up 
sudo ip link set dev tap2 up
sudo ip link set dev tap3 up</code></pre>
        
        <p>Then, we create a network bridge using <code>brctl</code> command:</p>

        <pre><code class="language-bash hljs">sudo brctl addbr br0</code></pre>

        <p>Bring up the network bridge:</p>

        <pre><code class="language-bash hljs">sudo ip link set dev br0 up</code></pre>

        <p>Then we attach the tap interfaces to the bridge interface:</p>

        <pre><code class="language-bash hljs">sudo brctl addif br0 tap1
sudo brctl addif br0 tap2
sudo brctl addif br0 tap3</code></pre>
        
        <p>Start the Fedora Server 38 virtual machine by specifying two network interfaces (WAN interface and LAN interface) with unique mac addresses:</p>
        
        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Fedora Server 38 Router" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=fedorarouter.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev user,id=net0,ipv4=on,net=192.168.0.0/24,ipv6=on,ipv6-net=fd65:9513:8ed6:5dc7::/64,dns=192.168.0.1,ipv6-dns=fd65:9513:8ed6:5dc7::1 \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=46:34:84:53:93:78,netdev=net0 \
-netdev tap,id=net1,ifname="tap1",script=no,downscript=no \
-device e1000-82545em,addr=05.0,bus=pcie.0,mac=35:93:59:28:34:55,netdev=net1</code></pre>
        
        <p>List all the available devices/network interfaces using <code>nmcli</code> command:</p>

        <pre><code class="language-bash hljs">sudo nmcli device status</code></pre>

        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">enp0s4  ethernet  connected               enp0s4     
lo      loopback  connected (externally)  lo         
enp0s5  ethernet  disconnected            --</code></pre>
        
        <p>WAN interface <code>enp0s4</code> sets to DHCP and LAN interface <code>enp0s5</code> sets to static IP.</p>

        <p>Create a LAN interface connection <code>enp0s5</code>:</p>

        <pre><code class="language-bash hljs">sudo nmcli connection add type ethernet con-name enp0s5</code></pre>

        <p>Attach the <code>enp0s5</code> device to the connection <code>enp0s5</code>:</p>
        
        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s5 connection.interface-name enp0s5</code></pre>

        <p>Modify the connection <code>enp0s5</code> to use a static IP.</p>

        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s5 ipv4.addresses 172.16.0.1/24
sudo nmcli connection modify enp0s5 ipv6.addresses fd62:bf06:3a25:7670::1/64</code></pre>
        
sudo nmcli connection modify enp0s6 ipv4.addresses 172.17.0.1/24
sudo nmcli connection modify enp0s6 ipv6.addresses fdf4:1106:0655:089f::1/64

        <p>Then, change the connection addressing method from <code>auto</code> to <code>manual</code>.</p>
        
        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s5 ipv4.method manual
sudo nmcli connection modify enp0s5 ipv6.method manual</code></pre>
        
        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart NetworkManager</code></pre>

        <p>Next, we need to enable IP Masquerading. The purpose of IP Masquerading is to allow machines with private IP addresses on your network to access the Internet through the machine doing the masquerading.</p>

        <p>To enable IP Masquerading in firewalld, run:</p>
        
        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-masquerade</code></pre>

        <p>IP forwarding plays a fundamental role on a router. This is the functionality that allows a router to forward traffic from one network interface to another network interface.</p>

        <p>To enable IP forwarding in firewalld, run:</p>
        
        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-forward</code></pre>    

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --reload</code></pre>

        <p>Then, we also need to IP forwarding on the Fedora Server system by creating sysctl configuration file <code>90-override.conf</code> in <code>/etc/sysctl.d/</code> and add the following line:.</p>        

        <pre><code class="language-bash hljs">net.ipv4.ip_forward=1

net.ipv6.conf.default.forwarding=1</code></pre>        

        <p>Next, execute the <code>sysctl</code> command to enable the new settings in the configuration file:</p>

        <pre><code class="language-bash hljs">sysctl -p /etc/sysctl.d/90-override.conf</code></pre>

        <!--<p>Dynamic Host Configuration Protocol or DHCP is an IP network protocol that relies on client-server architecture to automatically set IP addresses and other attributes to an IP host to enable information transfer between network nodes.</p>

        <p>DHCPv4 servers have a UDP port number of 67, so listen for messages addressed to this port number. On the other hand, DHCPv4 clients have the UDP port number 68 and only respond to messages sent to number 68.</p>

        <p>DHCPv4 and DHCPv6 UDP port numbers are different. DHCPv6 servers have a UDP port number of 547 and DHCPv6 clients have the UDP port number 546.</p>

        <p>In order to enable communication between the built-in DHCPv4 server of <code>systemd-networkd</code> on UDP port 67 and the built-in DHCPv4 client of <code>systemd-networkd</code> on UDP port 68, you need to open UDP port 67 in ufw:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=67/udp</code></pre>

        <p>The same as DHCPv6 server of <code>systemd-networkd</code> on UDP port 547 and the built-in DHCPv6 client of <code>systemd-networkd</code> on UDP port 546, you need to open UDP port 547 in ufw:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=547/udp</code></pre>-->

        <p>Start the Ubuntu Desktop 22.04 virtual machines by specifying one network interface (only LAN interface) with unique mac addresses:</p>

        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Fedora Desktop 38 Client 1" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=fedoraclient1.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev tap,id=net0,ifname="tap2",script=no,downscript=no \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=68:98:35:90:34:56,netdev=net0</code></pre>
        
        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Fedora Desktop 38 Client 2" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=fedoraclient2.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev tap,id=net0,ifname="tap3",script=no,downscript=no \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=82:54:65:76:38:28,netdev=net0</code></pre>
        
        <p>List all the available devices/network interfaces using <code>nmcli</code> command:</p>

        <pre><code class="language-bash hljs">sudo nmcli device status</code></pre>

        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">lo      loopback  connected (externally)  lo         
enp0s4  ethernet  disconnected            --</code></pre>
        
        <p>Create a LAN interface connection <code>enp0s4</code>:</p>

        <pre><code class="language-bash hljs">sudo nmcli connection add type ethernet con-name enp0s4</code></pre>

        <p>Attach the <code>enp0s4</code> device to the connection <code>enp0s4</code>:</p>
        
        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 connection.interface-name enp0s4</code></pre>

        <p>On the first client:</p>

        <p>Modify the connection <code>enp0s4</code> to use a static IP.</p>

        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 ipv4.addresses 172.16.0.11/24
sudo nmcli connection modify enp0s4 ipv6.addresses fd62:bf06:3a25:7670::11/64</code></pre>
        
        <p>Configure the default gateway.</p>

        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 ipv4.gateway 172.16.0.1
sudo nmcli connection modify enp0s4 ipv6.gateway fd62:bf06:3a25:7670::1</code></pre>

        <p>Then, change the connection addressing method from <code>auto</code> to <code>manual</code>.</p>
        
        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 ipv4.method manual
sudo nmcli connection modify enp0s4 ipv6.method manual</code></pre>
        
        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart NetworkManager</code></pre>

        <p>On the second client:</p>

        <p>Modify the connection <code>enp0s4</code> to use a static IP.</p>

        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 ipv4.addresses 172.16.0.12/24
sudo nmcli connection mod enp0s4 ipv6.addresses fd62:bf06:3a25:7670::12/64</code></pre>
        
        <p>Configure the default gateway.</p>

        <pre><code class="language-bash hljs">sudo nmcli connection modify enp0s4 ipv4.gateway 172.16.0.1
sudo nmcli connection mod enp0s4 ipv6.addresses fd62:bf06:3a25:7670::1</code></pre>

        <p>Then, change the connection addressing method from <code>auto</code> to <code>manual</code>.</p>
        
        <pre><code class="language-bash hljs">sudo nmcli connection mod enp0s4 ipv4.method manual
sudo nmcli connection mod enp0s4 ipv6.method manual</code></pre>

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart NetworkManager</code></pre>        
        
        <p>Configure <code>systemd-resolved</code> to use Google Public DNS so your system can have internet access. Edit <code>/etc/systemd/resolved.conf</code>, uncomment and change the <code>DNS</code> to <code>8.8.8.8</code></p>

        <pre><code class="language-bash hljs">DNS=8.8.8.8</code></pre>        

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-resolved</code></pre>

        <p>Try to ping google.com to check internet connectivity. You should have internet access now.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/fedora-38" class="tag">fedora 38</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/firewalld" class="tag">firewalld</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/nat" class="tag">NAT</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-15" /><category term="qemu" /><category term="linux" /><category term="fedora 38" /><category term="firewalld" /><category term="NAT" /><summary type="html"><![CDATA[This tutorial provides step-by-step instructions on how to set up Fedora Server 38 as a NAT router using Qemu/KVM. Learn how to configure network settings and create virtual machines to build your own virtual network infrastructure.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3</title><link href="https://hemimorphite.github.io/zh/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server/" rel="alternate" type="text/html" title="Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3" /><published>2023-08-13T15:48:59+00:00</published><updated>2023-08-13T15:48:59+00:00</updated><id>https://hemimorphite.github.io/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 13, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Ubuntu Server 22.04 as a router tutorial series!</p>

        <ol>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm/">Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server/">Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li class="active"><a href="https://hemimorphite.github.io/zh/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server/">Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>One of the most popular programs for Linux operating systems providing DNS forwarder service is dnsmasq.</p>
        
        <p>Ubuntu 22.04 comes with <code>systemd-resolved</code> which you need to disable since it binds to port 53 which will conflict with dnsmasq port.</p>

        <p>Disable the systemd-resolved DNS listeners to free up port 53 by uncommenting <code>DNSStubListener</code> and setting it to <code>no</code> in <code>/etc/systemd/resolved.conf</code>.</p>

        <pre><code class="language-bash hljs">DNSStubListener=no</code></pre>        

        <p>Disable the systemd-resolved DNSSEC, DNSOverTLS, LLMNR, and MulticastDNS by uncommenting them and setting it to <code>no</code> in <code>/etc/systemd/resolved.conf</code>.</p>

        <pre><code class="language-bash hljs">DNSSEC=no
DNSOverTLS=no
MulticastDNS=no
LLMNR=no</code></pre>

        <p>In order to configure dnsmasq to act as cache for the host on which it is running, uncomment <code>DNS</code> and set it to <code>127.0.0.1</code> to force host to perform local DNS lookup.</p>

        <pre><code class="language-bash hljs">DNS=127.0.0.1</code></pre>

        <p>Restart the <code>systemd-resolved</code> service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-resolved</code></pre>

        <p>Once that is done, install dnsmasq:</p>

        <pre><code class="language-bash hljs">sudo apt -y install dnsmasq</code></pre>

        <p>To enable DNS forwarder service, you need to configure <code>/etc/dnsmasq.conf</code>.</p>

        <p>Set the port on which dnsmasq will listen for DNS requests. This default to UDP port 53.</p>

        <pre><code class="language-bash hljs">port=53</code></pre>

        <p>Disable forwarding of names without a dot or domain part by uncommenting:</p>

        <pre><code class="language-bash hljs">domain-needed</code></pre>

        <p>Add a local-only domain:</p>

        <pre><code class="language-bash hljs">local=/app/</code></pre>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>

        <p>By default, DNS uses TCP and UDP port 53. Open the DNS port, run:</p>

        <pre><code class="language-bash hljs">sudo firewall-cmd --zone=public --permanent --add-port=53/tcp
sudo firewall-cmd --zone=public --permanent --add-port=53/udp</code></pre>

        <p>Next, you will need to edit your <code>/etc/hosts</code> file and add the local DNS server entries.</p>

        <pre><code class="language-bash hljs">172.16.0.100    bulbasaur.app
172.16.0.101    ivysaur.app
172.16.0.102    venusaur.app</code></pre>        

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>
        
        <p>Install <code>dnsutils</code> package:</p>

        <pre><code class="language-bash hljs">sudo apt -y install dnsutils</code></pre>

        <p>To test if the local DNS server is working or not, run:</p>

        <pre><code class="language-bash hljs">dig bulbasaur.app
dig ivysaur.app
dig venusaur.app</code></pre>
        
        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; bulbasaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 62416
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;bulbasaur.app.         IN  A

;; ANSWER SECTION:
bulbasaur.app.      0   IN  A   172.16.0.100

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:24:05 UTC 2023
;; MSG SIZE  rcvd: 58


; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; ivysaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33069
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;ivysaur.app.           IN  A

;; ANSWER SECTION:
ivysaur.app.        0   IN  A   172.16.0.101

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:24:05 UTC 2023
;; MSG SIZE  rcvd: 56


; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; venusaur.app
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 50282
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;venusaur.app.          IN  A

;; ANSWER SECTION:
venusaur.app.       0   IN  A   172.16.0.102

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:24:05 UTC 2023
;; MSG SIZE  rcvd: 57</code></pre>

        <p>To test a reverse IP lookup, run:</p>

        <pre><code class="language-bash hljs">dig -x 172.16.0.100
dig -x 172.16.0.101
dig -x 172.16.0.102</code></pre>        
        
        <p>The response should look similar to this:</p>

        <pre><code class="language-bash hljs">; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; -x 172.16.0.100
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 13755
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;100.0.16.172.in-addr.arpa. IN  PTR

;; ANSWER SECTION:
100.0.16.172.in-addr.arpa. 0    IN  PTR bulbasaur.app.

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:26:19 UTC 2023
;; MSG SIZE  rcvd: 81


; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; -x 172.16.0.101
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 15516
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;101.0.16.172.in-addr.arpa. IN  PTR

;; ANSWER SECTION:
101.0.16.172.in-addr.arpa. 0    IN  PTR ivysaur.app.

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:26:19 UTC 2023
;; MSG SIZE  rcvd: 79


; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; -x 172.16.0.102
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47090
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;102.0.16.172.in-addr.arpa. IN  PTR

;; ANSWER SECTION:
102.0.16.172.in-addr.arpa. 0    IN  PTR venusaur.app.

;; Query time: 0 msec
;; SERVER: fe80::9a73:37ff:fe90:3457%3#53(fe80::9a73:37ff:fe90:3457%3%3) (UDP)
;; WHEN: Mon Aug 14 13:26:19 UTC 2023
;; MSG SIZE  rcvd: 80</code></pre>

        <p>Run the tests on the client computers as well to check if the local DNS server is working or not.</p>        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ufw" class="tag">ufw</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/dns" class="tag">DNS</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-13" /><category term="qemu" /><category term="linux" /><category term="ubuntu 22.04" /><category term="ufw" /><category term="DNS" /><summary type="html"><![CDATA[This tutorial will guide you through the process of configuring Ubuntu Server 22.04 to function as a DNS server. Learn step-by-step instructions to set up and optimize your Ubuntu server as a DNS server.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2</title><link href="https://hemimorphite.github.io/zh/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server/" rel="alternate" type="text/html" title="Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2" /><published>2023-08-12T15:38:59+00:00</published><updated>2023-08-12T15:38:59+00:00</updated><id>https://hemimorphite.github.io/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 12, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Ubuntu Server 22.04 as a router tutorial series!</p>

        <ol>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm/">Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li class="active"><a href="https://hemimorphite.github.io/zh/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server/">Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server/">Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>One of the most popular programs for Linux operating systems providing DHCP service is dnsmasq.</p>
        
        <p>Install dnsmasq:</p>

        <pre><code class="language-bash hljs">sudo apt -y install dnsmasq</code></pre>

        <p>The response should look similar to this:</p>
        
        <pre><code class="language-bash hljs">Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  dns-root-data dnsmasq-base
Suggested packages:
  resolvconf
The following NEW packages will be installed:
  dns-root-data dnsmasq dnsmasq-base
0 upgraded, 3 newly installed, 0 to remove and 49 not upgraded.
Need to get 379 kB of archives.
After this operation, 974 kB of additional disk space will be used.
Get:1 http://id.archive.ubuntu.com/ubuntu jammy/main amd64 dns-root-data all 2021011101 [5256 B]
Get:2 http://id.archive.ubuntu.com/ubuntu jammy-updates/main amd64 dnsmasq-base amd64 2.86-1.1ubuntu0.3 [354 kB]
Get:3 http://id.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 dnsmasq all 2.86-1.1ubuntu0.3 [19.2 kB]
Fetched 379 kB in 1s (575 kB/s)
debconf: delaying package configuration, since apt-utils is not installed
Selecting previously unselected package dns-root-data.
(Reading database ... 67590 files and directories currently installed.)
Preparing to unpack .../dns-root-data_2021011101_all.deb ...
Unpacking dns-root-data (2021011101) ...
Selecting previously unselected package dnsmasq-base.
Preparing to unpack .../dnsmasq-base_2.86-1.1ubuntu0.3_amd64.deb ...
Unpacking dnsmasq-base (2.86-1.1ubuntu0.3) ...
Selecting previously unselected package dnsmasq.
Preparing to unpack .../dnsmasq_2.86-1.1ubuntu0.3_all.deb ...
Unpacking dnsmasq (2.86-1.1ubuntu0.3) ...
Setting up dnsmasq-base (2.86-1.1ubuntu0.3) ...
Setting up dns-root-data (2021011101) ...
Setting up dnsmasq (2.86-1.1ubuntu0.3) ...
Created symlink /etc/systemd/system/multi-user.target.wants/dnsmasq.service → /lib/systemd/system/dnsmasq.service.
Job for dnsmasq.service failed because the control process exited with error code.
See "systemctl status dnsmasq.service" and "journalctl -xeu dnsmasq.service" for details.
invoke-rc.d: initscript dnsmasq, action "start" failed.
× dnsmasq.service - dnsmasq - A lightweight DHCP and caching DNS server
     Loaded: loaded (/lib/systemd/system/dnsmasq.service; enabled; vendor preset: enabled)
     Active: failed (Result: exit-code) since Fri 2023-08-11 16:02:30 UTC; 12ms ago
    Process: 1011 ExecStartPre=/etc/init.d/dnsmasq checkconfig (code=exited, status=0/SUCCESS)
    Process: 1032 ExecStart=/etc/init.d/dnsmasq systemd-exec (code=exited, status=2)
        CPU: 30ms

Aug 11 16:02:30 metapod systemd[1]: Starting dnsmasq - A lightweight DHCP and caching DNS server...
Aug 11 16:02:30 metapod dnsmasq[1032]: dnsmasq: failed to create listening socket for port 53: Address already in use
Aug 11 16:02:30 metapod dnsmasq[1032]: failed to create listening socket for port 53: Address already in use
Aug 11 16:02:30 metapod dnsmasq[1032]: FAILED to start up
Aug 11 16:02:30 metapod systemd[1]: dnsmasq.service: Control process exited, code=exited, status=2/INVALIDARGUMENT
Aug 11 16:02:30 metapod systemd[1]: dnsmasq.service: Failed with result 'exit-code'.
Aug 11 16:02:30 metapod systemd[1]: Failed to start dnsmasq - A lightweight DHCP and caching DNS server.
Processing triggers for dbus (1.12.20-2ubuntu4.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 78.)
debconf: falling back to frontend: Readline
Scanning processes...                                                                                                     
Scanning linux images...                                                                                                  

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.</code></pre>

        <p>If it complain about "dnsmasq: failed to create listening socket for port 53: Address already in use", you can ignore it.</p>

        <p>To enable DHCP service, you need to configure <code>/etc/dnsmasq.conf</code>.</p>

        <p>By default dnsmasq enables DNS service. You can turn it off by changing the port to 0:</p>

        <pre><code class="language-bash hljs">port=0</code></pre>
        
        <p>The DHCPv4 server is activated by specifying an IPv4 address range and a router:</p>

        <pre><code class="language-bash hljs">dhcp-range=set:enp0s5v4,172.16.0.2,172.16.0.254,255.255.255.0,12h

dhcp-option=tag:enp0s5v4,option:router,172.16.0.1</code></pre>

        <p>The above configuration instructs dnsmasq to offer IPv4 addresses between <code>172.16.0.2</code> and <code>172.16.0.254</code> with a subnet <code>255.255.255.0</code> on the interface <code>enp0s5</code>. Issued IPs will have a lease lifetime of twelve hours, after which clients will need to request a renewed lease.</p>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>        

        <p>By default DHCP uses UDP ports 68 and 67 to initiate communication between the IPv4 client and server. If port 67 is in use by another process, DHCP server cannot communicate with DHCPv4 clients.</p>

        <p>To open UDP port 67 in ufw, run:</p>

        <pre><code class="language-bash hljs">sudo ufw allow 67/udp</code></pre>

        <p>Dnsmasq also provides full IPv6 support.</p>
                
        <p>The DHCPv6 server is activated by specifying an IPv6 address range and enabling IPv6 Router Advertisement feature:</p>

        <pre><code class="language-bash hljs">dhcp-range=set:enp0s5v6,::2,::ffff,constructor:enp0s5,slaac,64,12h

enable-ra</code></pre>
        
        <p>The above configuration instructs dnsmasq to offer IPv6 addresses between <code>fde0:fa74:a7a2:87e4::2</code> and <code>fde0:fa74:a7a2:87e4::ffff</code> with prefix length 64 bits on the interface <code>enp0s5</code>.</p>

        <p>Restart the dnsmasq service to apply your changes:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart dnsmasq</code></pre>

        <p>By default DHCP uses UDP ports 546 and 547 to initiate communication between the IPv6 client and server. If port 547 is in use by another process, DHCP server cannot communicate with DHCPv6 clients.</p>

        <p>To open UDP port 547 in ufw, run:</p>

        <pre><code class="language-bash hljs">sudo ufw allow 547/udp</code></pre>

        <p>Now the client computers should obtain IPv4 address and IPv6 address automatically.</p>

        <figure class="post-figure">
            <img src="/assets/images/dhcpserver-01.jpg" alt="configuring Ubuntu Server 22.04 as DHCP server">
        </figure>

    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ufw" class="tag">ufw</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/dhcp" class="tag">DHCP</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-12" /><category term="qemu" /><category term="linux" /><category term="ubuntu 22.04" /><category term="ufw" /><category term="DHCP" /><summary type="html"><![CDATA[This tutorial will guide you through the process of configuring Ubuntu Server 22.04 to function as a DHCP server. Learn step-by-step instructions to set up and optimize your Ubuntu server as a DHCP server.]]></summary></entry><entry xml:lang="en"><title type="html">Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1</title><link href="https://hemimorphite.github.io/zh/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm/" rel="alternate" type="text/html" title="Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1" /><published>2023-08-08T15:38:59+00:00</published><updated>2023-08-08T15:38:59+00:00</updated><id>https://hemimorphite.github.io/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm</id><content type="html" xml:base="https://hemimorphite.github.io/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published August 08, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Welcome to configuring Ubuntu Server 22.04 as a router tutorial series!</p>

        <ol>
            <li class="active"><a href="https://hemimorphite.github.io/zh/2023/08/08/setup-ubuntu-server-22-04-as-a-nat-router-with-qemu-kvm/">Setup Ubuntu Server 22.04 as a NAT Router with Qemu/KVM, Part 1</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/12/setup-ubuntu-server-22.04-as-a-dhcp-server/">Setup Ubuntu Server 22.04 as a DHCP Server with Qemu/KVM, Part 2</a></li>
            <li><a href="https://hemimorphite.github.io/zh/2023/08/13/setup-ubuntu-server-22.04-as-a-dns-server/">Setup Ubuntu Server 22.04 as a DNS Server with Qemu/KVM, Part 3</a></li>
        </ol>

        <p>This is how it will look like the virtual network we are going to build:</p>
        
        <figure class="post-figure">
            <img src="/assets/images/nat-01.jpg" alt="configuring Ubuntu Server 22.04 as a NAT router">
        </figure>

        <ul>
            <li><b>enp0s4</b>: WAN interface</li>
            <li><b>enp0s5</b>: LAN interface with a ipv4 subnet prefix address 172.16.0.0/24</li>
            <li><b>192.168.0.15</b>: the first IPv4 address of Ubuntu Server 22.04 as WAN IPv4 address</li>
            <li><b>172.16.0.1</b>: the second IPv4 address of Ubuntu Server 22.04 as LAN IPv4 Gateway</li>
            <li><b>172.16.0.11</b>: the IPv4 address of the first client</li>
            <li><b>172.16.0.12</b>: the IPv4 address of the second client</li>
        </ul>

        <p>First, we need to have three qemu images:</p>

        <ul>
            <li>Ubuntu Server 22.04 distro as a router gateway</li>
            <li>Ubuntu Desktop 22.04 distro as a client 1</li>
            <li>Ubuntu Desktop 22.04 distro as a client 2</li>
        </ul>

        <p>Then, we need set up a linux bridge (which will act as a layer 2 switch) and three tap interfaces on the host computer to connect three qemu images to each other.</p>

        <p>We can create a new tap interface using <code>tunctl</code> command. In order to use <code>tunctl</code> command, you need to install <code>uml-utilities</code> package on Ubuntu:</p>

        <pre><code class="language-bash hljs">sudo apt install uml-utilities</code></pre>

        <p>Or <code>tunctl</code> package on Fedora:</p>

        <pre><code class="language-bash hljs">sudo dnf install tunctl</code></pre>

        <p>We need to create a tap interface for each of the virtual machines, then we will need to create three different tap interfaces:</p>

        <pre><code class="language-bash hljs">sudo tunctl -u $USER -t tap1
sudo tunctl -u $USER -t tap2
sudo tunctl -u $USER -t tap3</code></pre>

        <p>Next, we bring the tap interfaces up:</p>

        <pre><code class="language-bash hljs">sudo ip link set dev tap1 up 
sudo ip link set dev tap2 up
sudo ip link set dev tap3 up</code></pre>
        
        <p>Then, we create a network bridge using <code>brctl</code> command:</p>

        <pre><code class="language-bash hljs">sudo brctl addbr br0</code></pre>

        <p>Bring up the network bridge:</p>

        <pre><code class="language-bash hljs">sudo ip link set dev br0 up</code></pre>

        <p>Then we attach the tap interfaces to the bridge interface:</p>

        <pre><code class="language-bash hljs">sudo brctl addif br0 tap1
sudo brctl addif br0 tap2
sudo brctl addif br0 tap3</code></pre>
        
        <p>Start the Ubuntu Server 22.04 virtual machine by specifying two network interfaces (WAN interface and LAN interface) with unique mac addresses:</p>
        
        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Ubuntu Server 22.04 Router Gateway" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=ubunturouter.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev user,id=net0,ipv4=on,net=192.168.0.0/24,ipv6=on,ipv6-net=fdc8:45c7:c72b:b1e5::/64,dns=192.168.0.1,ipv6-dns=fdc8:45c7:c72b:b1e5::1 \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=38:24:10:62:34:78,netdev=net0 \
-netdev tap,id=net1,ifname="tap1",script=no,downscript=no \
-device e1000-82545em,addr=05.0,bus=pcie.0,mac=98:73:37:90:34:57,netdev=net1</code></pre>
        
        <p>List the network interfaces using <code>ip</code> command:</p>

        <pre><code class="language-bash hljs">ip addr show</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/nat-02.jpg" alt="configuring Ubuntu Server 22.04 as a NAT router">
        </figure>

        <p>WAN interface <code>enp0s4</code> sets to DHCP and LAN interface <code>enp0s5</code> sets to static IP.</p>

        <p>Create a network configuration file for WAN interface, <code>10-enp0s4.network</code>, in the <code>/etc/systemd/network/</code> directory.</p>

        <pre><code class="language-bash hljs">[Match]
Name=enp0s4

[Network]
DHCP=yes</code></pre>

        <p>And create a network configuration file for LAN interface, <code>10-enp0s5.network</code>, in the <code>/etc/systemd/network/</code> directory.</p>

        <pre><code class="language-bash hljs">[Match]
Name=enp0s5

[Network]
DHCP=no
Address=172.16.0.1/24
Address=fde0:fa74:a7a2:87e4::1/64</code></pre>        
        
        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-networkd</code></pre>

        <p>Then, we install <code>ufw</code> firewall:</p>

        <pre><code class="language-bash hljs">sudo apt install ufw</code></pre>

        <p>To enable UFW, use this command:</p>

        <pre><code class="language-bash hljs">sudo ufw enable</code></pre>

        <p>Next, we need to enable IP Masquerading. The purpose of IP Masquerading is to allow machines with private IP addresses on your network to access the Internet through the machine doing the masquerading.</p>

        <p>Now add rules to the <code>/etc/ufw/before.rules</code> file. The default rules only configure the filter table, and to enable masquerading the nat table will need to be configured. Add the following to the end of the file just after the <code>COMMIT</code>:</p>

        <pre><code class="language-bash hljs"># nat Table rules
*nat
:POSTROUTING ACCEPT [0:0]

# Forward traffic from eth1 through enp0s4.
-A POSTROUTING -o enp0s4 -j MASQUERADE

# don't delete the 'COMMIT' line or these nat table rules won't be processed
COMMIT</code></pre> 
        
        <p>IP forwarding plays a fundamental role on a router. This is the functionality that allows a router to forward traffic from one network interface to another network interface.</p>
        
        <p>Packet forwarding needs to be enabled in ufw and ensure that ufw is configured to support IPv6 so that it will manage firewall rules for IPv6 in addition to IPv4. Edit <code>/etc/default/ufw</code> change the <code>DEFAULT_FORWARD_POLICY</code> to <code>"ACCEPT"</code> and <code>IPV6</code> to <code>yes</code></p>

        <p>Finally, disable and re-enable ufw to apply the changes:</p>

        <pre><code class="language-bash hljs">sudo ufw disable && sudo ufw enable</code></pre>               

        <p>Then, we also need to IP forwarding on the Ubuntu Server system by editing <code>/etc/sysctl.conf</code> and uncomment the following line:.</p>        

        <pre><code class="language-bash hljs">net.ipv4.ip_forward=1

net.ipv6.conf.default.forwarding=1</code></pre>        

        <p>Next, execute the <code>sysctl</code> command to enable the new settings in the configuration file:</p>

        <pre><code class="language-bash hljs">sudo sysctl -p /etc/sysctl.conf</code></pre>

        <p>Dynamic Host Configuration Protocol or DHCP is an IP network protocol that relies on client-server architecture to automatically set IP addresses and other attributes to an IP host to enable information transfer between network nodes.</p>

        <p>DHCPv4 servers have a UDP port number of 67, so listen for messages addressed to this port number. On the other hand, DHCPv4 clients have the UDP port number 68 and only respond to messages sent to number 68.</p>

        <p>DHCPv4 and DHCPv6 UDP port numbers are different. DHCPv6 servers have a UDP port number of 547 and DHCPv6 clients have the UDP port number 546.</p>

        <p>In order to enable communication between the built-in DHCPv4 server of <code>systemd-networkd</code> on UDP port 67 and the built-in DHCPv4 client of <code>systemd-networkd</code> on UDP port 68, you need to open UDP port 67 in ufw:</p>

        <pre><code class="language-bash hljs">sudo ufw allow 67/udp</code></pre>

        <p>The same as DHCPv6 server of <code>systemd-networkd</code> on UDP port 547 and the built-in DHCPv6 client of <code>systemd-networkd</code> on UDP port 546, you need to open UDP port 547 in ufw:</p>

        <pre><code class="language-bash hljs">sudo ufw allow 547/udp</code></pre>

        <p>Start the Ubuntu Desktop 22.04 virtual machines by specifying one network interface (only LAN interface) with unique mac addresses:</p>

        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Ubuntu Desktop 22.04 Client 1" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=ubuntuclient1.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev tap,id=net0,ifname="tap2",script=no,downscript=no \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=68:98:35:90:34:56,netdev=net0</code></pre>
        
        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Ubuntu Desktop 22.04 Client 2" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device virtio-vga,addr=01.0 \
-drive file=ubuntuclient1.img,if=none,id=drive0 \
-device nvme,serial=364740043439,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev tap,id=net0,ifname="tap3",script=no,downscript=no \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=82:54:65:76:38:28,netdev=net0</code></pre>
        
        <p>Create a network configuration file for LAN interface, <code>10-enp0s4.network</code>, in the <code>/etc/systemd/network/</code> directory.</p>

        <p>On the first client:</p>

        <pre><code class="language-bash hljs">[Match]
Name=enp0s4

[Network]
DHCP=no
Address=172.16.0.11/24
Gateway=172.16.0.1
Address=fde0:fa74:a7a2:87e4::11/64
Gateway=fde0:fa74:a7a2:87e4::1</code></pre>
        
        <p>On the second client:</p>

        <pre><code class="language-bash hljs">[Match]
Name=enp0s4

[Network]
DHCP=no
Address=172.16.0.12/24
Gateway=172.16.0.1
Address=fde0:fa74:a7a2:87e4::12/64
Gateway=fde0:fa74:a7a2:87e4::1</code></pre>
        
        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-networkd</code></pre>

        <p>Configure <code>systemd-resolved</code> to use Google Public DNS so your system can have internet access. Edit <code>/etc/systemd/resolved.conf</code>, uncomment and change the <code>DNS</code> to <code>8.8.8.8</code></p>

        <pre><code class="language-bash hljs">DNS=8.8.8.8</code></pre>        

        <p>To apply the configuration, run:</p>

        <pre><code class="language-bash hljs">sudo systemctl restart systemd-resolved</code></pre>

        <p>Try to ping google.com to check internet connectivity. You should have internet access now.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ufw" class="tag">ufw</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/nat" class="tag">NAT</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-08" /><category term="day-08" /><category term="qemu" /><category term="linux" /><category term="ubuntu 22.04" /><category term="ufw" /><category term="NAT" /><summary type="html"><![CDATA[This tutorial will guide you through the process of configuring Ubuntu Server 22.04 to function as a NAT router. Learn step-by-step instructions to set up and optimize your Ubuntu server as a NAT router.]]></summary></entry><entry xml:lang="en"><title type="html">Getting Started with Qemu amd64 on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/zh/2023/07/31/getting-started-with-qemu-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Getting Started with Qemu amd64 on Ubuntu 22.04" /><published>2023-07-31T07:38:59+00:00</published><updated>2023-07-31T07:38:59+00:00</updated><id>https://hemimorphite.github.io/2023/07/31/getting-started-with-qemu-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2023/07/31/getting-started-with-qemu-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Getting Started with Qemu amd64 on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published July 31, 2023</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/qemu.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Installing QEMU on Ubuntu is pretty straightforward, run:</p>
        
        <pre><code class="language-bash hljs">sudo apt install qemu qemu-kvm</code></pre>

        <p>Run the following command to create an qcow2 image file 100GB in size in the current directory:</p>

        <pre><code class="language-bash hljs">qemu-img create -f qcow2 ubuntu.img 100G</code></pre>

        <p>Next, run the following command to start the Ubuntu installation:</p>

        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Ubuntu Server 22.04" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-boot menu=on \
-device virtio-vga,addr=01.0 \
-drive file=ubuntu.img,if=none,id=drive0 \
-device nvme,serial=694740036639,addr=02.0,bus=pcie.0,drive=drive0 \
-drive file=ubuntu-22.04.2-live-server-amd64.iso,format=raw,if=none,id=drive1 \
-device ich9-ahci,id=ahci0,addr=03.0,bus=pcie.0 \
-device ide-cd,serial=278674617506,drive=drive1,bus=ahci0.0 \
-netdev user,id=net0,ipv4=on,net=172.16.0.0/24,ipv6=on,ipv6-net=fdcc:7647:d52a:2cff::/64,dns=172.16.0.1,ipv6-dns=fdcc:7647:d52a:2cff::1 \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=b6:94:1b:12:34:56,netdev=net0</code></pre>

        <ul>
            <li><code>-name "Ubuntu Server 22.04"</code> specifies the name of the running guest system. The name is displayed in the window caption</li>
            <li>
                <span>
                <code>-machine type=pc-q35-2.12</code> specifies the type of the emulated machine.<br>
                Run <code>qemu-system-x86_64 -machine help</code> to view a list of supported machine types.<br>
                Run <code>qemu-system-x86_64 -machine type=pc-q35-2.12,help</code> to list all available properties of <code>pc-q35-2.12</code> machine.
                </span>     
            </li>
            <li><code>-accel kvm</code> specifies to use the hardware acceleration provided by kvm</li>
            <li><code>-boot menu=on</code> specifies manually to select boot drive</li>
            <li><code>-bios /usr/share/ovmf/OVMF.fd</code> specifies to boot with the TianoCore UEFI firmware</li>
            <li>
                <span>
                <code>-cpu host</code> specifies to emulate the host processor<br>
                Run <code>qemu-system-x86_64 -cpu help</code> to view a list of supported processors
                </span>
            </li> 
            <li><code>-smp 2</code> specifies how many CPUs will be emulated</li>
            
            <li><code>-m 4G</code> specifies the amount of memory (M stands for Megabyte, G for Gigabyte)</li>
            
            <li><code>-display sdl</code> specifies to display video output via SDL (usually in a separate graphics window)</li>

            <li>
                <span>
                <code>-device VGA,addr=01.0</code> specifies the type of the video card.<br>
                Run <code>qemu-system-x86_64 -device help</code> to view a list of video card types.<br>
                Run <code>qemu-system-x86_64 -device VGA,help</code> to list all available properties of <code>VGA</code> video card.
                </span>
            </li>
            
            <li><code>-drive file=ubuntu.img,if=none,id=drive0</code> specifies a virtual hard drive and use <code>ubuntu.img</code> image file</li>

            <li><code>-device nvme,serial=694740036639,addr=02.0,bus=pcie.0,drive=drive0</code> specifies to add a nvme storage device with serial number 694740036639 and PCIe address 02.0 (device number 02 and function number 0) on <code>pcie.0</code> bus (Root Bus)</li>
            
            <li><code>-drive file=ubuntu-22.04.2-live-server-amd64.iso,format=raw,if=none,id=drive1</code> specifies a virtual hard drive and use <code>ubuntu-22.04.2-live-server-amd64.iso</code> image file</li>

            <li><code>-device ich9-ahci,id=ahci0,addr=03.0,bus=pcie.0</code> specifies a virtual hard drive and use <code>ubuntu-22.04.2-live-server-amd64.iso</code> image file</li>

            <li><code>-device ide-cd,serial=278674617506,drive=drive1,bus=ahci0.0</code> specifies a virtual ide disk with serial number 278674617506 and ahci bus</li>

            <li><code>-netdev user,id=net0,ipv4=on,net=172.16.0.0/24,ipv6=on,ipv6-net=fdcc:7647:d52a:2cff::/64,dns=172.16.0.1,ipv6-dns=fdcc:7647:d52a:2cff::1</code> specifies to use user-mode networking with a built-in DHCPv4 server in the address range 172.16.0.0/24, a built-in DHCPv6 server in the address range fdcc:7647:d52a:2cff::/64, a IPv4 DNS Server 172.16.0.1 and a IPv6 DNS Server fdcc:7647:d52a:2cff::1</li>

            <li><code>-device e1000-82545em,addr=04.0,bus=pcie.0,mac=b6:94:1b:12:34:56,netdev=net0</code> specifies a virtual network device with mac address b6:94:1b:12:34:56 and PCIe address 04.0 (device number 04 and function number 0) on <code>pcie.0</code> bus (Root Bus)</li>
        </ul>

        <p>If you stopped the virtual machine after the installation or rebooted your system, you can start the existing virtual machine again with almost the same command as for the installation. We just don't need to specify the ISO image file this time.</p>

        <pre><code class="language-bash hljs">qemu-system-x86_64 -name "Ubuntu Server 22.04" \
-machine type=pc-q35-2.12 -accel kvm \
-m 4G -cpu host \
-display sdl \
-bios /usr/share/ovmf/OVMF.fd \
-device VGA,addr=01.0 \
-drive file=ubuntus01.img,if=none,id=drive0 \
-device nvme,serial=694740036639,addr=02.0,bus=pcie.0,drive=drive0 \
-netdev user,id=net0,ipv4=on,net=172.16.0.0/24,ipv6=on,ipv6-net=fdcc:7647:d52a:2cff::/64,dns=172.16.0.1,ipv6-dns=fdcc:7647:d52a:2cff::1 \
-device e1000-82545em,addr=04.0,bus=pcie.0,mac=b6:94:1b:12:34:56,netdev=net0</code></pre>

    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/zh/tag/qemu" class="tag">qemu</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/zh/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2023" /><category term="month-07" /><category term="day-31" /><category term="qemu" /><category term="linux" /><category term="ubuntu 22.04" /><summary type="html"><![CDATA[This tutorial provides a step-by-step guide on how to get started with Qemu amd64 on Ubuntu 22.04. Learn how to set up and use Qemu to run virtual machines on your Ubuntu system.]]></summary></entry></feed>