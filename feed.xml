<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/" rel="alternate" type="text/html" /><updated>2024-06-18T20:13:52+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">Bourne Shell Builtin Commands</title><link href="https://hemimorphite.github.io/2024/06/16/bourne-shell-builtin-commands/" rel="alternate" type="text/html" title="Bourne Shell Builtin Commands" /><published>2024-06-16T16:21:00+00:00</published><updated>2024-06-16T16:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/16/bourne-shell-builtin-commands</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/16/bourne-shell-builtin-commands/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Builtin Commands</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 16, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">: (a colon)</h5>

        <p><code>:</code> is a shell builtin command inherited from the Bourne Shell. It does nothing beyond expanding arguments and performing redirection and has return status zero. <code>:</code> is a no-op operator similar to <code>true</code> and <code>false</code>.</p>

        <p>The syntax of the <code>:</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">: [arguments]</code></pre>

        <p>The example below illustrated how <code>:</code> is used in parameter expansion by setting a default value combined with <code>:</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat ./input.sh
#!/usr/bin/env bash
read -p "Enter your name: " name
: ${name:=Hemimorphite}  # if the user entered an empty string
echo "$name"
[hemimorphite@ubuntu ~]$ ./input.sh
Enter your name:
Hemimorphite</code></pre>
        
        <p>If <code>:</code> is omitted, the default value is passed and treated as a command.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat ./input.sh
#!/usr/bin/env bash
read -p "Enter your name: " name
${name:=Hemimorphite}
echo "$name"
[hemimorphite@ubuntu ~]$ ./input.sh
Enter your name:
./input.sh: line 3: Hemimorphite: command not found
Hemimorphite</code></pre>
        
        <p>The usual way to do infinite loop in bash is using the <code>true</code> command in a <code>while</code> loop.</p>
        
        <pre><code class="language-bash hljs">#!/usr/bin/env bash
while true
    do 
    # ...
done</code></pre>
        
        <p>Alternatively, we can use <code>:</code> instead of <code>true</code> to create an infinite loop.</p>
        
        <pre><code class="language-bash hljs">#!/usr/bin/env bash
while :
        do 
        # ...
done</code></pre>

        <h5 class="post-subtitle">. (a period)</h5>
        
        <p>The dot command (<code>.</code>) is a command used to execute commands from a file in the current shell. In Bash, the <code>source</code> command is synonym to the dot command (<code>.</code>)</p>
        
        <p>The syntax of the <code>.</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">. filename [arguments]</code></pre>

        <p>When you run an executable script as <code>./hello.sh</code>, the commands are run in a new subshell, while when run as <code>. hello.sh</code> the current shell context will be used. This mean that the dot command will apply changes to your current shell.</p>

        <p>Let's look at the simple example below.</p>

        <pre><code class="language-bash hljs">#!/usr/bin/env bash
export A="hello world"
echo $A
</code></pre>

        <p>When run as an executable using <code>./hello.sh</code>, the <code>A</code> variable is not exported in your current shell and would just return an empty result.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./hello.sh 
hello world
[hemimorphite@ubuntu ~]$ echo $A</code></pre>

        <p>When run the same script with the dot command using <code>. hello.sh</code>, your current shell context will be changed.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ . hello.sh 
hello world
[hemimorphite@ubuntu ~]$ echo $A
hello world</code></pre>
        
        <h5 class="post-subtitle">break</h5>

        <p>Exit from a <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop.</p>
        
        <p>The syntax of the <code>break</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">break [n]</code></pre>

        <p><code>[n]</code> is an optional argument and must be greater than or equal to 1. When <code>[n]</code> is provided, the n-th enclosing loop is exited. <code>break 1</code> is equivalent to <code>break</code>.</p>

        <p>Here is an example of using the <code>break</code> statement inside nested <code>for</code> loops.</p>

        <p>When the argument <code>[n]</code> is not given, <code>break</code> terminates the innermost enclosing loop. The outer loops are not terminated:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..3}; do
    for j in {1..3}; do
        if [[ $j -eq 2 ]]; then
            break
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1
i: 1
j: 1
i: 2
j: 1
i: 3</code></pre>
        
        <p>If you want to exit from the outer loop, use <code>break 2</code>. Argument 2 tells <code>break</code> to terminate the second enclosing loop:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..3}; do
    for j in {1..3}; do
        if [[ $j -eq 2 ]]; then
            break 2
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1</code></pre>
        
        <h5 class="post-subtitle">continue</h5>

        <p>Resume the next iteration of a <code>for</code>, <code>while</code>, <code>until</code>, or <code>select</code> loop.</p>

        <p>The syntax of the <code>continue</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">continue [n]</code></pre>

        <p>The <code>[n]</code> argument is optional and can be greater than or equal to 1. When <code>[n]</code> is given, the n-th enclosing loop is resumed. <code>continue 1</code> is equivalent to <code>continue</code>.</p>
        
        <p>In the example below, once the current iterated item is equal to 9, the <code>continue</code> statement will cause execution to return to the beginning of the loop and to continue with the next iteration.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..10}
do
    if [[ $i == '9' ]]
    then
        continue
    fi
    echo "Number $i!"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
Number: 6
Number: 7
Number: 8
Number: 10</code></pre>
        
        <p>If you want to continue from the outer loop, use <code>continue 2</code>. Argument 2 tells <code>continue</code> to continue the second enclosing loop:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat loop.sh
#!/usr/bin/env bash

for i in {1..5}
do
    for j in {1..5}
    do
        if [[ $j -eq 2 ]]
        then
            continue 2
        fi
        echo "j: $j"
    done
    echo "i: $i"
done
[hemimorphite@ubuntu ~]$ ./loop.sh
j: 1
j: 2
j: 3
i: 1
j: 1
j: 2
j: 3
i: 3</code></pre>
        
        <h5 class="post-subtitle">cd</h5>

        <p>The <code>cd</code> command changes the working directory of the current shell execution environment to directory. If you specify directory as an absolute path name, beginning with /, this is the target directory. <code>cd</code> assumes the target directory to be the name just as you specified it. If you specify directory as a relative path name, cd assumes it to be relative to the current working directory.</p>
        
        <p>Two special symbols are also supported:</p>

        <ul>
            <li><code>.</code> Represents the current directory</li>
            <li><code>..</code> Represents the parent of the current directory</li>
        </ul>

        <p>The syntax of the <code>cd</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">cd [-L|[-P [-e]] [directory]</code></pre>

        <p>If <code>[directory]</code> is not supplied, the value of the <code>HOME</code> shell variable is used. If the shell variable <code>CDPATH</code> exists, it is used as a search path. If directory begins with a slash, <code>CDPATH</code> is not used.</p>

        <p>The <code>-P</code> option means to not follow symbolic links: symbolic links are resolved while <code>cd</code> is traversing directory and before processing an instance of <code>..</code> in directory. For example,</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ ln -s gallery/album/photos myalbum
[hemimorphite@ubuntu ~]$ cd -P myalbum
[hemimorphite@ubuntu ~/gallery/album/photos]$ pwd
/home/hemimorphite/gallery/album/photos</code></pre>
        
        <p>By default, the <code>-L</code> option is supplied, symbolic links in directory are resolved after <code>cd</code> processes an instance of <code>..</code> in directory.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ ln -s gallery/album/photos myalbum
[hemimorphite@ubuntu ~]$ cd myalbum
[hemimorphite@ubuntu ~/myalbum]$ pwd
/home/hemimorphite/myalbum</code></pre>
        
        <p>If the <code>-e</code> option is supplied with <code>-P</code> and the current working directory cannot be successfully determined after a successful directory change, <code>cd</code> will return an unsuccessful status.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ cd gallery/album/photos
[hemimorphite@ubuntu ~/gallery/album/photos]$ rmdir ../photos ../../album
[hemimorphite@ubuntu ~/gallery/album/photos]$ cd ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[hemimorphite@ubuntu ~/gallery/album/photos/..]$ echo $?
0</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir -p gallery/album/photos
[hemimorphite@ubuntu ~]$ cd gallery/album/photos
[hemimorphite@ubuntu ~/gallery/album/photos]$ rmdir ../photos ../../album
[hemimorphite@ubuntu ~/gallery/album/photos]$ cd -Pe ..
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
[hemimorphite@ubuntu ~/gallery/album/photos/..]$ echo $?
1</code></pre>

        <p>In the shell, the command <code>cd -</code> is a special case that changes the current working directory to the previous working directory by exchanging the values of the variables <code>PWD</code> and <code>OLDPWD</code>.</p>

        <p>In the following steps, the variable <code>curpath</code> represents an intermediate value used to simplify the description of the algorithm used by <code>cd</code>. There is no requirement that <code>curpath</code> be made visible to the application.</p>

        <ol>
            <li>
                If no directory operand is given and the <code>HOME</code> environment variable is empty or undefined, the default behavior is implementation-defined and no further steps shall be taken.<br>
                For example:<br>
                <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ HOME=
[hemimorphite@ubuntu ~]$ cd</code></pre>
            </li>
            <li>
                If no directory operand is given and the <code>HOME</code> environment variable is set to a non-empty value, the <code>cd</code> command shall behave as if the directory named in the <code>HOME</code> environment variable was specified as the directory operand.<br>
                For example:<br>
                <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ HOME=/home/hemimorphite
[hemimorphite@ubuntu ~]$ cd</code></pre>
            </li>
            <li>
                If the directory operand begins with a slash <code>/</code> character, set <code>curpath</code> to the operand and proceed to step 7
            </li>
            <li>
                If the directory operand is <code>.</code> or <code>..</code>, proceed to step 6
            </li>
            <li>
                Starting with the first pathname in the colon-separated <code>:</code> pathnames of <code>CDPATH</code> if the pathname is non-null, test if the concatenation of that pathname, add a <code>/</code> character if that pathname did not end with a <code>/</code> character, and the directory operand names a directory. If the pathname is null, test if the concatenation of dot, a <code>/</code> character, and the operand names a directory. In either case, if the resulting string names an existing directory, set <code>curpath</code> to that string and proceed to step 7. Otherwise, repeat this step with the next pathname in <code>CDPATH</code> until all pathnames have been tested.
            </li>
            <li>
                Set curpath to the directory operand.
            </li>
            <li>
                If the <code>-P</code> option is in effect, proceed to step 10. If <code>curpath</code> does not begin with a <code>/</code> character, set <code>curpath</code> to the string formed by the concatenation of the value of <code>PWD</code>, a <code>/</code> character if the value of <code>PWD</code> did not end with a <code>/</code> character, and <code>curpath</code>.
            </li>
            <li>
                The curpath value shall then be converted to canonical form as follows, considering each component from beginning to end, in sequence:
                <ol type="a">
                    <li><code>.</code> components and any <code>/</code> characters that separate them from the next component shall be deleted.</li>
                    <li>For each dot-dot component, if there is a preceding component and it is neither root nor dot-dot, then:
                        <ol type="i">
                            <li>If the preceding component does not refer (in the context of pathname resolution with symbolic links followed) to a directory, then the <code>cd</code> command shall display an appropriate error message and no further steps shall be taken.</li>
                            <li>The preceding component, all <code>/</code> characters separating the preceding component from dot-dot, dot-dot, and all <code>/</code> characters separating dot-dot from the following component (if any) shall be deleted.</li>
                        </ol>
                    </li>
                    <li>An implementation may further simplify <code>curpath</code> by removing any trailing <code>/</code> characters that are not also leading <code>/</code> characters, replacing multiple non-leading consecutive <code>/</code> characters with a single <code>/</code>, and replacing three or more leading <code>/</code> characters with a single <code>/</code>. If, as a result of this canonicalization, the curpath variable is null, no further steps shall be taken.</li>
                </ol>
            </li>
            <li>
                If <code>curpath</code> is longer than {PATH_MAX} bytes (including the terminating null) and the directory operand was not longer than {PATH_MAX} bytes (including the terminating null), then <code>curpath</code> shall be converted from an absolute pathname to an equivalent relative pathname if possible. This conversion shall always be considered possible if the value of <code>PWD</code>, with a trailing <code>/</code> added if it does not already have one, is an initial substring of <code>curpath</code>.  Whether or not it is considered possible under other circumstances is unspecified. Implementations may also apply this conversion if <code>curpath</code> is not longer than {PATH_MAX} bytes or the directory operand was longer than {PATH_MAX} bytes.
            </li>
            <li>The <code>cd</code> command shall then perform actions equivalent to the <code>chdir()</code> function called with <code>curpath</code> as the path argument. If these actions fail for any reason, the <code>cd</code> command shall display an appropriate error message and the remainder of this step shall not be executed. If the <code>-P</code> option is not in effect, the <code>PWD</code> environment variable shall be set to the value that <code>curpath</code> had on entry to step 9 (i.e., before conversion to a relative pathname). If the <code>-P</code> option is in effect, the <code>PWD</code> environment variable shall be set to the string that would be output by <code>pwd -P</code>. If there is insufficient permission on the new directory, or on any parent of that directory, to determine the current working directory, the value of the <code>PWD</code> environment variable is unspecified.</li>
        </ol>

        <p>If, during the execution of the above steps, the <code>PWD</code> environment variable is set, the <code>OLDPWD</code> environment variable shall also be set to the value of the old working directory.</p>

        <p>When specifying a directory to change to, you can use either absolute or relative path names. The absolute or full path starts from the system root <code>/</code>, and the relative path starts from your current directory.</p>

        <p>By default, when you log into your Linux system, your current working directory is set to your home directory. Assuming that the <code>Downloads</code> directory exists in your home directory, you can navigate to it by using the relative path to the directory:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cd Downloads</code></pre>

        <p>You can also navigate to the same directory by using its absolute path:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cd /home/hemimorphite/Downloads</code></pre>

        <p>On Unix-like operating systems, the current working directory is represented by a single dot (.). Two dots (..), one after the other, represent the parent directory or the directory immediately above the current one.</p>

        <p>If you type <code>cd .</code>, you will change into the current directory or, in other words, the command will do nothing.</p>

        <p>Suppose you are currently in the <code>/usr/local/share</code> directory. To switch to the <code>/usr/local</code> directory (one level up from the current directory), you would type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ..
[hemimorphite@ubuntu /usr/local]$</code></pre>

        <p>To move two levels up to the <code>/usr</code> directory, you type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../../
[hemimorphite@ubuntu /usr]$</code></pre>
        
        <p>Let's say you are in the <code>/usr/local/share</code> directory, and you want to switch to the <code>/usr/local/src</code>. You can do that by typing:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../src
[hemimorphite@ubuntu /usr/local/src]$</code></pre>
        
        <p>To change back to the previous working directory, pass the dash (-) character as an argument to the <code>cd</code> command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ../src
[hemimorphite@ubuntu /usr/local/src]$ cd -
[hemimorphite@ubuntu /usr/local/share]$</code></pre>
        
        <p>To navigate to your home directory, simply type <code>cd</code>. Another way to return directly to your home directory is to use the tilde (~) character, as shown below:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~
[hemimorphite@ubuntu ~]$</code></pre>

        <p>For example, if you want to navigate to the <code>Downloads</code> directory, which is inside your home directory, you would type:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~/Downloads
[hemimorphite@ubuntu ~/Downloads]$</code></pre>

        <p>You can also navigate to another user's home directory using the following syntax:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu /usr/local/share]$ cd ~satella
[hemimorphite@ubuntu /home/satella]$</code></pre>
        
        <p>If the directory you want to change to has spaces in its name, you should either surround the path with quotes or use the backslash (\) character to escape the space:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir "hello world"
[hemimorphite@ubuntu ~]$ cd "hello world"</code></pre>
        
        <p>Or</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir "hello world"
[hemimorphite@ubuntu ~]$ cd hello\ world</code></pre>

        <h5 class="post-subtitle">eval</h5>
        
        <p><code>eval</code> command is used on a Unix or Linux system to execute the arguments as a shell command. The <code>eval</code> command is helpful when you want to execute a Unix or Linux command that has been saved in a variable.</p>
        
        <p>The syntax of the <code>eval</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">eval [arguments]</code></pre>

        <p>The command or script that must be evaluated and run in this case is represented by <code>[arguments]</code>. It may contain commands, variables, and even sophisticated expressions.</p>
        
        <p>Storing a command in a variable is useful, especially when you want to store it with an option or flag appended to the command. In the following example, we will store the <code>expr</code> command in a variable named <code>command</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var1=10
[hemimorphite@ubuntu ~]$ var2=20
[hemimorphite@ubuntu ~]$ command='expr $var1 + $var2'
[hemimorphite@ubuntu ~]$ eval $command
30</code></pre>
        
        <p>In the following example, the <code>eval</code> command substitutes the <code>date</code> command placed within a string stored in the command variable. <code>eval</code> evaluates the string and executes the result:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ command="echo \$(date)"
[hemimorphite@ubuntu ~]$ eval $command
Fri Jun 14 18:47:57 +07 2024</code></pre>

        <h5 class="post-subtitle">exec</h5>

        <p>The <code>exec</code> command executes a shell command without creating a new process. Instead, it replaces the currently open shell operation.</p>
        
        <p>The syntax of the <code>exec</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">exec [-cl] [-a name] [command [arguments]]</code></pre>
        
        <p>If the <code>-l</code> option is supplied, the shell places a dash at the beginning of the zeroth argument passed to command. So if we ran the following command:</p>

        <pre><code class="language-bash hljs">exec -l tail -f /etc/passwd</code></pre>
        
        <p>Open a second terminal. Run the <code>ps auwwx</code> command and it would produce the following output in the process list.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps auwwx | grep tail
hemimor+    6977  0.0  0.0   8404  1008 pts/0    Ss+  22:03   0:00 -tail -f /etc/passwd
hemimor+    7163  0.0  0.0   9212  2372 pts/1    S+   22:23   0:00 grep --color=auto /etc/passwd</code></pre>

        <p>The <code>-c</code> option causes the supplied command to run with a empty environment. Environmental variables like <code>PATH</code>, are cleared before the command it run.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ bash
[hemimorphite@ubuntu ~]$ ps auwwx | grep tail
SHELL=/bin/bash
SESSION_MANAGER=local/ubuntu:@/tmp/.ICE-unix/1259,unix/ubuntu:/tmp/.ICE-unix/1259
QT_ACCESSIBILITY=1
COLORTERM=truecolor
XDG_CONFIG_DIRS=/etc/xdg/xdg-cinnamon:/etc/xdg
XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session0
GNOME_DESKTOP_SESSION_ID=this-is-deprecated
LANGUAGE=en_US
LC_ADDRESS=id_ID.UTF-8
LC_NAME=id_ID.UTF-8
[hemimorphite@ubuntu ~]$ exec -c printenv
[hemimorphite@ubuntu ~]$</code></pre>

        <p>The last option, <code>-a [name]</code>, will pass name as the first argument to command. The command will still run as expected, but the name of the process will change.</p>

        <pre><code class="language-bash hljs">exec -a HEMIMORPHITE tail -f /etc/passwd</code></pre>
        
        <p>Open a second terminal. Run the <code>ps auwwx</code> command and it would produce the following output in the process list.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps auwwx | grep HEMIMORPHITE
hemimor+    6977  0.0  0.0   8404  1008 pts/0    Ss+  22:03   0:00 HEMIMORPHITE -f /etc/passwd
hemimor+    7163  0.0  0.0   9212  2372 pts/1    S+   22:23   0:00 grep --color=auto HEMIMORPHITE</code></pre>

        <p>As you can see, <code>exec</code> command passed HEMIMORPHITE as first argument to command, therefore it shows in the process list with that name.</p>

        <p>The examples below demonstrate the behavior of the <code>exec</code> command in the terminal.</p>
        
        <p>Open the terminal and list the running processes</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps
 PID TTY          TIME CMD
8185 pts/0    00:00:00 bash
8192 pts/0    00:00:00 ps</code></pre>

        <p>The output shows the currently running Bash shell and the <code>ps</code> command. The Bash shell has a unique PID.</p>

        <p>To confirm, check the current process ID with:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ echo $$
8185</code></pre>

        <p>The PID is the same as the output from the <code>ps</code> command, indicating this is the currently running Bash process.</p>

        <p>Now, run <code>exec</code> followed by the <code>sleep</code> command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ exec sleep 100</code></pre>

        <p>The <code>sleep</code> command waits for 100 seconds.</p>

        <p>Open another terminal tab, list all currently running processes and use <code>grep</code> command to find <code>sleep</code> process:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ps -ae | grep sleep
8185 pts/0    00:00:00 sleep</code></pre>

        <p>The PID for the process is the same as the Bash shell PID, indicating the <code>exec</code> command replaced the Bash shell process.</p>

        <p>The Bash session (terminal tab) closes when the one hundred seconds are complete and the process ends.</p>

        <p>Now, we will see how <code>exec</code> command works in Bash scripts.</p>

        <p>Create a script file with the following content:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while true
do
        echo "1. Update "
        echo "2. Upgrade "
        echo "3. Exit"
    read Input
    case "$Input" in
        1) exec sudo apt update ;;
        2) exec sudo apt upgrade  ;;
        3) break
    esac
done</code></pre>

        <p>Change the script permission to executable and run the script in the current environment to see the results:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
1. Update 
2. Upgrade 
3. Exit
</code></pre>

        <p>Executing the script with the <code>source</code> command applies the script behavior to the current Bash shell. Use <code>exec</code> to run Bash scripts within other programs for a clean exit.</p>

        <p>The <code>exec</code> command finds use in manipulating file descriptors for error logging in Bash scripts. The default Linux file descriptors are:</p>

        <ol>
            <li>stdin (0) - Standard in</li>
            <li>stdout (1) - Standard out</li>
            <li>stderr (2) - Standard error</li>
        </ol>

        <p>Create a Bash script with the following content:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat logging.sh
#!/bin/bash

# Create test.log file
touch test.log

# Save test.log to log_file variable
log_file="test.log"

# Redirect stdin to $log_file
exec 1>>$log_file

# Redirect stderr to the same place as stdin
exec 2>&1

echo "This line is added to the log file"
echo "And any other lines after"
eho "This line has an error and is logged as stderr"</code></pre>

        <p>Change the script permission to executable and run the script in the current environment to see the results:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ chmod +x logging.sh
[hemimorphite@ubuntu ~]$ ./logging.sh</code></pre>

        <p>The script does not output any code. Instead, all the output logs to the <code>test.log</code> file.</p>

        <p>Use the <code>cat</code> command to see the <code>test.log</code> file contents:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat test.log
This line is added to the log file
And any other lines after
./logging.sh: line 17: eho: command not found</code></pre>

        <h5 class="post-subtitle">exit</h5>

        <p><code>exit</code> command is used to exit the shell where it is currently running.</p>
        
        <p>The syntax of the <code>exit</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">exit [n]</code></pre>

        <p>It takes one parameter as <code>[n]</code> and exits the shell with a return of status <code>n</code>. If <code>[n]</code> is not provided, then it simply returns the status of last command that is executed.</p>

        <h5 class="post-subtitle">export</h5>

        <p>The <code>export</code> command is used to export environmental variables that are accessible by all processes running in the current shell session and its child processes.</p>

        <p>The syntax of the <code>export</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">export [-fn] [-p] [name[=value]]</code></pre>

        <p>If the <code>-f</code> option is supplied, the names musrt refer to shell functions.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ example_function() {
    echo "This is an example function."
}
[hemimorphite@ubuntu ~]$ export -f example_function 
[hemimorphite@ubuntu ~]$ bash -c example_function
This is an example function.</code></pre>
        
        <p>If the <code>-p</code> option is given or there is no option supplied, a list of names of all exported variables is displayed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export -p
declare -x DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/1000/bus"
declare -x DISPLAY=":0"
declare -x HOME="/home/hemimorphite"
declare -x HOSTTYPE="x86_64"
declare -x LANG="C.UTF-8"
declare -x LESSCLOSE="/usr/bin/lesspipe %s %s"
declare -x LESSOPEN="| /usr/bin/lesspipe %s"
declare -x LOGNAME="hemimorphite"
declare -x LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"
declare -x MOTD_SHOWN="update-motd"
declare -x NAME="DESKTOP-J3NDV0Q"
declare -x OLDPWD
declare -x PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
declare -x PULSE_SERVER="unix:/mnt/wslg/PulseServer"
declare -x PWD="/home/hemimorphite"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x TERM="xterm-256color"
declare -x USER="hemimorphite"
declare -x WAYLAND_DISPLAY="wayland-0"
declare -x WSL2_GUI_APPS_ENABLED="1"
declare -x WSLENV=""
declare -x WSL_DISTRO_NAME="Ubuntu"
declare -x WSL_INTEROP="/run/WSL/247687_interop"
declare -x XDG_DATA_DIRS="/usr/local/share:/usr/share:/var/lib/snapd/desktop"
declare -x XDG_RUNTIME_DIR="/run/user/1000/"</code></pre>

        <p>The output lists all the variables used in the current shell session, and it is usually the same as running <code>export</code> without options.</p>
        
        <p>The <code>-n</code> option removes the specified variables and functions from the list of exported variables.</p>
        
        <p>In the following example, we remove the <code>HOME</code> variable:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export -n HOME
[hemimorphite@ubuntu ~]$ export | grep HOME
[hemimorphite@ubuntu ~]$</code></pre>
        
        <p>If a variable name is followed by =value, the value of the variable is set to value.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ export VARNAME="value"
[hemimorphite@ubuntu ~]$ printenv VARNAME
value</code></pre>

        <p>You also can assign a value to a variable first before exporting it using the <code>export</code> command. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ x=100
[hemimorphite@ubuntu ~]$ export x
[hemimorphite@ubuntu ~]$ printenv x
100</code></pre>
        
        <h5 class="post-subtitle">getopts</h5>

        <p>The <code>getopts</code> is used by shell scripts to parse positional parameters.</p>
        
        <p>The syntax of the <code>getopts</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">getopts optstring name [arg …]</code></pre>
        
        <p><code>optstring</code> contains the option characters to be recognized; if a character is followed by a colon, the <code>option</code> is expected to have an argument, which should be separated from it by whitespace.The colon (:) and question mark (?) may not be used as option characters. Each time it is invoked, <code>getopts</code> places the next option in the shell variable <code>name</code>, initializing name if it does not exist, and the index of the next argument to be processed into the variable <code>OPTIND</code>. <code>OPTIND</code> is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument, <code>getopts</code> places that argument into the variable <code>OPTARG</code>. The shell does not reset <code>OPTIND</code> automatically; it must be manually reset between multiple calls to <code>getopts</code> within the same shell invocation if a new set of parameters is to be used.</p>
        
        <p>Here's a simple example that demonstrates the basic usage of <code>getopts</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts "a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -b -a value1
Processing b : OPTIND is 2
Option b is set
Processing a : OPTIND is 4
Option a is set with argument: value1
[hemimorphite@ubuntu ~]$ ./demo.sh -a value1 -b
Processing a : OPTIND is 3
Option a is set with argument: value1
Processing b : OPTIND is 4
Option b is set</code></pre>
        
        <p>We mentioned above that the other variable that <code>getopts</code> will set for you is the index of where you are up to in processing the options; this is the <code>OPTIND</code> variable. It's the index of the next script argument to be processed, so if your script takes arguments: <code>demo.sh -b -a value1</code>, then as it's processing <code>-s</code>, the <code>OPTIND</code> is 2, because the next thing it will process will be the 2nd argument (<code>-a</code>). When it's processing <code>-a value1</code>, <code>OPTIND</code> is 4, because <code>value1</code> is the 3rd script argument and the next index is 4.</p>

        <p>When <code>getopts</code> reaches the end of the options, it exits with a status value of 1. It also sets name to the character <code>?</code> and sets <code>OPTIND</code> to the index of non-option argument. <code>getopts</code> recognizes the end of the options by any of the following situations:</p>

        <ul>
            <li>Finding an option that require an argument but not supply with an argument</li>
            <li>Finding an option that doesn't start with -</li>
            <li>Encountering an error (for example, an unrecognized option letter)</li>
        </ul>

        <p>If an invalid option is seen or a required argument of an option is not found, a question mark (<code>?</code>>) is placed in <code>name</code> and, prints an error message and unsets <code>OPTARG</code>.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts "a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -a
./demo.sh: option requires an argument -- a
Processing ? : OPTIND is 2
Invalid option: -
[hemimorphite@ubuntu ~]$ ./demo.sh -z
./demo.sh: illegal option -- z
Processing ? : OPTIND is 2
Invalid option: -</code></pre>

        <p>If the first character of <code>optstring</code> is a colon, silent error reporting is used.</p>
        
        <p>If an invalid option is seen and silent error reporting is used, a question mark (<code>?</code>>) is placed in <code>name</code> and, the option character found is placed in <code>OPTARG</code> and no error message is printed.</p>

        <p>If a required argument of an option is not found and silent error reporting is used, then a colon (<code>:</code>) is placed in <code>name</code> and <code>OPTARG</code> is set to the option character found.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

while getopts ":a:b" option; do
    echo "Processing $option : OPTIND is $OPTIND"
    case $option in
    a)
        echo "Option a is set with argument: $OPTARG"
        ;;
    b)
        echo "Option b is set"
        ;;
    :)
        echo "Argument missing"
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh -a
Processing : : OPTIND is 2
Argument missing
[hemimorphite@ubuntu ~]$ ./demo.sh -z
Processing ? : OPTIND is 2
Invalid option: -z</code></pre>

        <h5 class="post-subtitle">hash</h5>

        <p>The <code>hash</code> command affects the way the current shell remembers a command's path name, either by adding a path name to a list or purging the contents of the list.</p>

        <p>The syntax of the <code>hash</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">hash [-r] [-p filename] [-dt] [name]</code></pre>

        <p>When we run any commands or programs in the Linux shells, it records the location of the binary of these commands in a hash table.</p>
        
        <p>The commands are found by searching through the directories listed in <code>PATH</code>.</p>

        <p>To list the entries in the hash table, we can run the <code>hash</code> command without any arguments:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>
        
        <p>Since we haven't run any commands, there are no entries in the hash table.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ which ls >/dev/null
[hemimorphite@ubuntu ~]$ hash
hits	command
    1	/usr/bin/which
    2	/usr/bin/ls</code></pre>

        <p>We can run the hash command to add commands into the hash table without running it.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash whoami grep xargs
[hemimorphite@ubuntu ~]$ hash
hits	command
    0	/usr/bin/grep
    0	/usr/bin/whoami
    0	/usr/bin/xargs</code></pre>

        <p>The <code>hash</code> command resets the table when we supply the <code>-r</code> option:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash whoami grep xargs
[hemimorphite@ubuntu ~]$ hash
hits	command
    0	/usr/bin/grep
    0	/usr/bin/whoami
    0	/usr/bin/xargs
[hemimorphite@ubuntu ~]$ hash -r
[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>

        <p>We can remove specific commands from the table using the <code>-d</code> option followed by the command name.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ ls >/dev/null
[hemimorphite@ubuntu ~]$ which ls >/dev/null
[hemimorphite@ubuntu ~]$ hash -d ls
[hemimorphite@ubuntu ~]$ hash
hits	command
    1	/usr/bin/which</code></pre>
        
        <p>The <code>hash</code> command provides us a way to set the path of commands manually using the <code>–p</code> option. We specify the <code>-p</code> option followed by the path to the binary and then the command name we want to associate it with.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ hash -p /usr/bin/date another-date
[hemimorphite@ubuntu ~]$ another-date
Sat Jun 15 07:17:01 PM WIB 2024</code></pre>
        
        <p>The <code>hash</code> command provides us a way to display the lists of commands in the hash table  using the <code>–l</code> option.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ls
[hemimorphite@ubuntu ~]$ mkdir example
[hemimorphite@ubuntu ~]$ rmdir example
[hemimorphite@ubuntu ~]$ touch file
[hemimorphite@ubuntu ~]$ rm file
[hemimorphite@ubuntu ~]$ hash -l
builtin hash -p /usr/bin/ls ls
builtin hash -p /usr/bin/mkdir mkdir
builtin hash -p /usr/bin/rmdir rmdir
builtin hash -p /usr/bin/touch touch
builtin hash -p /usr/bin/rm rm</code></pre>

        <p>The <code>hash</code> command doesn't report any shell built-in commands.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ echo hello
hello
[hemimorphite@ubuntu ~]$ pwd
/home/hemimorphite
[hemimorphite@ubuntu ~]$ hash
hash: hash table empty</code></pre>

        <h5 class="post-subtitle">pwd</h5>

        <p>The <code>pwd</code> (print working directory) command is used to displays the full pathname of the current directory.</p>

        <p>The syntax of the <code>pwd</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">pwd [-LP]</code></pre>

        <p>The <code>-L</code> option is used to display the logical current directory. This means it shows the path you used to get to the directory, even if it involves symbolic links. The default behavior of <code>pwd</code> command is the same as <code>pwd -L</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ln -s /var/log link_to_log
[hemimorphite@ubuntu ~]$ cd link_to_log
[hemimorphite@ubuntu ~/link_to_log]$ pwd -L
/home/hemimorphite/link_to_log</code></pre>

        <p>When we use <code>pwd -L</code>, it returns <code>/home/hemimorphite/link_to_log</code>, which is the logical path we used.</p>

        <p>The <code>-P</code> option is used to display the physical current directory. This means it shows the actual location of the directory, ignoring symbolic links.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ln -s /var/log link_to_log
[hemimorphite@ubuntu ~]$ cd link_to_log
[hemimorphite@ubuntu ~/link_to_log]$ pwd -P
/var/log</code></pre>

        <p>After navigating to <code>link_to_log</code>, when we use <code>pwd -P</code>, it returns <code>/var/log</code>, which is the actual location of the directory.</p>
        
        <h5 class="post-subtitle">readonly</h5>

        <p>The <code>readonly</code> command is used to mark shell variables and functions as unchangeable. Once a variable or function is set as readonly, its value or function definition cannot be changed or unset.</p>

        <p>The syntax of the <code>readonly</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">readonly [-aAf] [-p] [name[=value]] …</code></pre>
        
        <p>The <code>readonly</code> command without option is used to mark shell variables as readonly or unchangeable.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var1="Initial value"
[hemimorphite@ubuntu ~]$ readonly var1
[hemimorphite@ubuntu ~]$ var1="New value"
bash: var1: readonly variable</code></pre>

        <p>The <code>-f</code> option is used to mark shell functions as readonly or unchangeable.</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ func1() {
>   echo "This function is readonly"
> }
[hemimorphite@ubuntu ~]$ readonly -f func1
[hemimorphite@ubuntu ~]$ func1() {
>   echo "Change function output"
> }
bash: func1: readonly function</code></pre>

        <p>The <code>-a</code> option is used to mark indexed array variables as readonly or unchangeable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ declare -a countries
[hemimorphite@ubuntu ~]$ countries=("India" "France" "United Kingdom")
[hemimorphite@ubuntu ~]$ readonly -a countries
[hemimorphite@ubuntu ~]$ countries=("Japan" "Spanyol" "United State")
bash: countries: readonly variable</code></pre>

        <p>The <code>-A</code> option is used to mark associative array variables as readonly or unchangeable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ declare -A country_capitals
[hemimorphite@ubuntu ~]$ country_capitals=(["India"]="New Delhi" ["France"]="Paris" ["United Kingdom"]="London")
[hemimorphite@ubuntu ~]$ readonly -A country_capitals
[hemimorphite@ubuntu ~]$ country_capitals=(["Japan"]="Tokyo" ["Spanyol"]="Madrid" ["United State"]="Washington")
bash: country_capitals: readonly variable</code></pre>

        <p>The <code>-p</code> option is used to display the list of all readonly variables.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ readonly -p
declare -r BASHOPTS="checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:globasciiranges:histappend:interactive_comments:login_shell:progcomp:promptvars:sourcepath"
declare -ar BASH_VERSINFO=([0]="5" [1]="1" [2]="16" [3]="1" [4]="release" [5]="x86_64-pc-linux-gnu")
declare -ir EUID="1000"
declare -ir PPID="260303"
declare -r SHELLOPTS="braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor"
declare -ir UID="1000"</code></pre>

        <p>The <code>-f</code> option is also used to display the list of all readonly functions.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ func1() {
>   echo "This function is readonly"
> }
[hemimorphite@ubuntu ~]$ readonly -f func1
[hemimorphite@ubuntu ~]$ readonly -f
func1 ()
{
    echo "This function is readonly"
}
declare -fr func1</code></pre>
        
        <h5 class="post-subtitle">return</h5>

        <p>The <code>return</code> command is used in the script to return the value called in the function. The <code>return</code> command is always used in the function, if used outside the function it has no effect. This command stops the execution of the function where it is used.</p>

        <p>The syntax of the <code>return</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">return [n]</code></pre>

        <p>The <code>return</code> command takes a parameter <code>[n]</code>, if n is mentioned then it returns <code>[n]</code> and if n is not mentioned then it returns the status of the last command executed within the function or script. n can only be a numeric value.</p>

        <p>The special variable <code>$?</code> is used to hold the return value and the status of last executed command.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ add() {
>   add=$(($1+$2))
>   return $add
> }
[hemimorphite@ubuntu ~]$ add 25 26
[hemimorphite@ubuntu ~]$ echo $?
51</code></pre>

        <h5 class="post-subtitle">shift</h5>

        <p>The <code>shift</code> command is used to shift the positional parameters (such as arguments passed to a bash script) to the left, putting each parameter in a lower position.</p>

        <p>The syntax of the <code>shift</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">shift [n]</code></pre>

        <p>The <code>shift</code> command takes a parameter <code>[n]</code>, if <code>[n]</code> is mentioned then the current positional parameters are shifted left <code>[n]</code> times. If <code>[n]</code> is not specified, the default value of n is 1. So the commands <code>shift 1</code> and <code>shift</code> (with no argument) do the same thing</p>

        <p>If a parameter is shifted to a position with a number less than 1, its value is discarded. So the command <code>shift</code> always discards the previous value of <code>$1</code>, and <code>shift 2</code> always discards the previous values of <code>$1</code> and <code>$2</code>.</p>

        <p>The special positional parameter <code>$0</code> is excluded from all shift operations, and never modified by the <code>shift</code> command.</p>
        
        <p>Parameters with a number 10 or greater can be referenced by putting the number in brackets, for example <code>${10}</code>, <code>${11}</code>, or <code>${12345}</code>.</p>

        <p>Bash keeps track of the total number of positional parameters. This number is stored in the special shell variable <code>$#</code>.</p>
                
        <p>The value of <code>$#</code> decreases by n every time you run <code>shift</code>.</p>
        
        <p>You can pass arguments to a bash script by typing them after the script's name when running it. Each argument should be separated by a space.</p>

        <p>Inside the script, you can access these arguments using special variables. <code>$1</code> represents the first argument, <code>$2</code> the second, and so on. Let's look at an example:</p>
        
        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash
echo 1: $1
echo 1: $2
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh one two
1: one
1: two</code></pre>
        
        <p>You will encounter situations that require more than just <code>$1</code>, <code>$2</code>, etc. Bash provides <code>shift</code> command to help you manage these scenarios.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

USAGE="usage: $0 arg1 arg2 ... argN"

if (( $# == 0 )) 
then
    echo "$USAGE"
    exit 1 
fi
n=1
print "The arguments to the script are:" 
while (($#)) 
do
    echo $n: $1 
    n=$((n+1))
    shift 
done
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh one two three four five six
The arguments to the script are: 
1: one 
2: two 
3: three 
4: four
5: five
6: six</code></pre>
        
        <h5 class="post-subtitle">times</h5>

        <p>The <code>shift</code> command is used to print out the user and system times used by the shell and its children.</p>
        
        <h5 class="post-subtitle">trap</h5>
        
        <p>The <code>trap</code> command is used to catch any supported signal and react upon it.</p>

        <p>The syntax of the <code>trap</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">trap [-lp] [arg] [sigspec …]</code></pre>

        <p>If <code>arg</code> is absent (and there is a single <code>sigspec</code>) or equal to -, each specified signal's disposition is reset to the value it had when the shell was started. For example:</p>

        <pre><code class="language-bash hljs">trap - SIGINT SIGABRT</code></pre>

        <p>If <code>arg</code> is the null string, then the signal specified by each <code>sigspec</code> is ignored by the shell; in other words, the signal specified by each <code>sigspec</code> is disabled.</p>
        
        <pre><code class="language-bash hljs">trap "" SIGINT SIGABRT</code></pre>

        <p>The <code>-l</code> option causes the shell to print a list of all the signals and their numbers.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ trap -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX</code></pre>

        <p>The <code>trap -l</code> command doesn't display signals 32 and 33 in the output because they aren't supported on Linux.</p>

        <p>The <code>-p</code> option is used to display the trap commands.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ trap "echo SIGINT terminated the process" SIGINT
[hemimorphite@ubuntu ~]$ trap "echo SIGTERM terminated the process" SIGTERM
[hemimorphite@ubuntu ~]$ trap -p
trap -- 'echo SIGINT terminated the process' SIGINT
trap -- 'echo SIGTERM terminated the process' SIGTERM
[hemimorphite@ubuntu ~]$ trap -p SIGINT
trap -- 'echo SIGINT terminated the process' SIGINT
[hemimorphite@ubuntu ~]$ trap - SIGINT SIGTERM</code></pre>

        <p>If a <code>sigspec</code> is <code>0</code> or <code>EXIT</code>, <code>arg</code> is executed when the shell or subshell exits.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the subshell exits
trap "echo Exiting subshell..." EXIT
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ ./demo.sh
Exiting subshell...</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the shell exits
trap "echo Exiting shell..." EXIT

exit
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
Exiting shell...
[hemimorphite@ubuntu ~]$ trap - EXIT</code></pre>
        
        <p>If a <code>sigspec</code> is <code>RETURN</code>, the command <code>arg</code> is executed each time the shell script finishes executing by the <code>.</code> or <code>source</code> builtins.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

# this executes when the script finishes executing
trap "echo Returning..." RETURN
[hemimorphite@ubuntu ~]$ . demo.sh
Returning...
[hemimorphite@ubuntu ~]$ trap - RETURN</code></pre>
        
        <p>If a <code>sigspec</code> is <code>DEBUG</code>, the command <code>arg</code> is executed before every simple command, <code>for</code> command, <code>case</code> command, <code>select</code> command, every arithmetic for command, and before the first command executes in a shell function.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo Executing..." DEBUG

echo Hello World

whoami

which echo
[hemimorphite@ubuntu ~]$ ./demo.sh
Executing...
Hello World
Executing...
hemimorphite
Executing...
/usr/bin/echo</code></pre>

        <p>If a <code>sigspec</code> is <code>ERR</code>, the command <code>arg</code> is executed whenever a pipeline (which may consist of a single simple command), a list, or a compound command returns a non-zero exit status. The <code>ERR</code> trap is not executed if the failed command is part of the command list immediately following an <code>until</code> or <code>while</code> keyword, part of the test following the <code>if</code> or <code>elif</code> reserved words, part of a command executed in a <code>&&</code> or <code>||</code> list except the command following the final <code>&&</code> or <code>||</code>, any command in a pipeline but the last, or if the command's return status is being inverted using <code>!</code>. These are the same conditions obeyed by the <code>errexit</code> (<code>-e</code>) option.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo An error occurred." ERR

# unknown command
getcommand
[hemimorphite@ubuntu ~]$ ./demo.sh
./demo.sh: line 6: getcommand: command not found
An error occurred.</code></pre>
        
        <p>We can use the <code>trap</code> command to intercept signals so that we can handle them.</p>

        <p>We can set and invoke handlers for any and all available signals</p>
        
        <p>We can even prevent the default action for all signals except <code>SIGKILL</code> and <code>SIGSTOP</code>:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat demo.sh
#!/bin/bash

trap "echo 'sending SIGHUP signal'" 1
trap "echo 'sending SIGINT signal'" 2
trap "echo 'sending SIGQUIT signal'" 3
trap "echo 'sending SIGILL signal'" 4
trap "echo 'sending SIGTRAP signal'" 5
trap "echo 'sending SIGABRT signal'" 6
trap "echo 'sending SIGBUS signal'" 7
trap "echo 'sending SIGFPE signal'" 8
#trap "echo 'sending SIGKILL signal'" 9
trap "echo 'sending SIGUSR1 signal'" 10
trap "echo 'sending SIGSEGV signal'" 11
trap "echo 'sending SIGUSR2 signal'" 12
trap "echo 'sending SIGPIPE signal'" 13
trap "echo 'sending SIGALRM signal'" 14
trap "echo 'sending SIGTERM signal'" 15
trap "echo 'sending SIGSTKFLT signal'" 16
trap "echo 'sending SIGCHLD signal'" 17
trap "echo 'sending SIGCONT signal'" 18
#trap "echo 'sending SIGSTOP signal'" 19
trap "echo 'sending SIGTSTP signal'" 20
trap "echo 'sending SIGTTIN signal'" 21
trap "echo 'sending SIGTTOU signal'" 22
trap "echo 'sending SIGURG signal'" 23
trap "echo 'sending SIGXCPU signal'" 24
trap "echo 'sending SIGXFSZ signal'" 25
trap "echo 'sending SIGVTALRM signal'" 26
trap "echo 'sending SIGPROF signal'" 27
trap "echo 'sending SIGWINCH signal'" 28
trap "echo 'sending SIGIO signal'" 29
trap "echo 'sending SIGPWR signal'" 30
trap "echo 'sending SIGTSTP signal'" 31
[hemimorphite@ubuntu ~]$ chmod +x demo.sh
[hemimorphite@ubuntu ~]$ . demo.sh
[hemimorphite@ubuntu ~]$ kill -SIGHUP $$
sending SIGHUP signal
[hemimorphite@ubuntu ~]$ kill -SIGINT $$
sending SIGINT signal
[hemimorphite@ubuntu ~]$ kill -SIGQUIT $$
sending SIGQUIT signal
[hemimorphite@ubuntu ~]$ kill -SIGILL $$
sending SIGILL signal
[hemimorphite@ubuntu ~]$ kill -SIGTRAP $$
sending SIGTRAP signal
[hemimorphite@ubuntu ~]$ kill -SIGABRT $$
sending SIGABRT signal
[hemimorphite@ubuntu ~]$ kill -SIGBUS $$
sending SIGBUS signal
[hemimorphite@ubuntu ~]$ kill -SIGFPE $$
sending SIGFPE signal
[hemimorphite@ubuntu ~]$ kill -SIGUSR1 $$
sending SIGUSR1 signal
[hemimorphite@ubuntu ~]$ kill -SIGSEGV $$
sending SIGSEGV signal
[hemimorphite@ubuntu ~]$ kill -SIGUSR2 $$
sending SIGUSR2 signal
[hemimorphite@ubuntu ~]$ kill -SIGPIPE $$
sending SIGPIPE signal
[hemimorphite@ubuntu ~]$ kill -SIGALRM $$
sending SIGALRM signal
[hemimorphite@ubuntu ~]$ kill -SIGTERM $$
sending SIGTERM signal
[hemimorphite@ubuntu ~]$ kill -SIGSTKFLT $$
sending SIGSTKFLT signal
[hemimorphite@ubuntu ~]$ kill -SIGCHLD $$
sending SIGCHLD signal
[hemimorphite@ubuntu ~]$ kill -SIGCONT $$
sending SIGCONT signal
[hemimorphite@ubuntu ~]$ kill -SIGTSTP $$
sending SIGTSTP signal
[hemimorphite@ubuntu ~]$ kill -SIGTTIN $$
sending SIGTTIN signal
[hemimorphite@ubuntu ~]$ kill -SIGTTOU $$
sending SIGTTOU signal
[hemimorphite@ubuntu ~]$ kill -SIGURG $$
sending SIGURG signal
[hemimorphite@ubuntu ~]$ kill -SIGXCPU $$
sending SIGXCPU signal
[hemimorphite@ubuntu ~]$ kill -SIGXFSZ $$
sending SIGXFSZ signal
[hemimorphite@ubuntu ~]$ kill -SIGVTALRM $$
sending SIGVTALRM signal
[hemimorphite@ubuntu ~]$ kill -SIGPROF $$
sending SIGPROF signal
[hemimorphite@ubuntu ~]$ kill -SIGWINCH $$
sending SIGWINCH signal
[hemimorphite@ubuntu ~]$ kill -SIGIO $$
sending SIGIO signal
[hemimorphite@ubuntu ~]$ kill -SIGPWR $$
sending SIGPWR signal
[hemimorphite@ubuntu ~]$ kill -SIGTSTP $$
sending SIGTSTP signal
[hemimorphite@ubuntu ~]$ trap - SIGHUP SIGINT SIGQUIT SIGILL SIGTRAP SIGABRT SIGBUS SIGFPE SIGUSR1 SIGSEGV SIGUSR2 SIGPIPE SIGALRM SIGTERM SIGSTKFLT SIGCHLD SIGCONT SIGTSTP SIGTTIN SIGTTOU SIGURG SIGXCPU SIGXFSZ SIGVTALRM SIGPROF SIGWINCH SIGIO SIGPWR SIGTSTP</code></pre>

        <h5 class="post-subtitle">umask</h5>
        
        <p>The <code>umask</code> command is used to set default permissions for files or directories the user creates.</p>

        <p>The syntax of the <code>umask</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">umask [-p] [-S] [mode]</code></pre>

        <p>In Linux, each file is associated with an owner and a group and assigned with permission access rights for three different classes of users:</p>

        <ul>
            <li>The file owner</li>
            <li>The group members</li>
            <li>Everyone else</li>
        </ul>

        <p>There are three permissions types that apply to each class:</p>

        <ul>
            <li>The read permission</li>
            <li>The write permission</li>
            <li>The execute permission</li>
        </ul>

        <p>The following example shows the permissions for a directory:</p>

        <pre><code class="language-bash hljs">drwxr-xr-x 12 hemimorphite hemimorphite 4.0K Jun  16 20:51 dirname
|[-][-][-]    [----------] [----------]
| |  |  |           |           |       
| |  |  |           |           +----> Group
| |  |  |           +----------------> Owner
| |  |  +----------------------------> Others Permissions
| |  +-------------------------------> Group Permissions
| +----------------------------------> Owner Permissions
+------------------------------------> File Type</code></pre>
        
        <p>The first character represents the file type which can be a regular file (-), a directory (d), a symbolic link (l), or any other special type of file.</p>

        <p>Character <code>r</code> with an octal value of <code>4</code> stands for <code>read</code>, <code>w</code> with an octal value of <code>2</code> for <code>write</code>, <code>x</code> with an octal value of <code>1</code> for <code>execute</code> permission, and (<code>-</code>) with an octal value of <code>0</code> for no permissions.</p>

        <p>If we represent the file permissions using a numeric notation, we will come up to the number <code>755</code>:</p>

        <ul>
            <li>Owner: <code>rwx</code> = <code>4+2+1</code> = <code>7</code></li>
            <li>Group: <code>r-x</code> = <code>4+0+1</code> = <code>5</code></li>
            <li>Other: <code>r-x</code> = <code>4+0+1</code> = <code>5</code></li>
        </ul>

        <p>The first digit represents the special permissions, and if it is omitted, it means that no special permissions are set on the file. In the example above <code>755</code> is the same as <code>0755</code>. The first digit can be a combination of <code>4</code> for <code>setuid</code>, <code>2</code> for <code>setgid</code>, and <code>1</code> for Sticky Bit.</p>

        <p>On Linux systems, the default creation permissions are <code>666</code> for files, which gives read and write permission to user, group, and others, and to <code>777</code> for directories, which means read, write and execute permission to user, group, and others. By default, Linux does not allow a file to be created with execute permissions.</p>

        <p>The default creation permissions can be modified using the <code>umask</code> command.</p>

        <p><code>umask</code> affects only the current shell environment. On most Linux distributions, the <code>umask</code> value is set in the <code>pam_umask.so</code> or <code>/etc/profile</code> file.</p>

        <p>To view the current mask value:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask
022</code></pre>
        
        <p>The <code>umask</code> value contains the permission bits that will NOT be set on the newly created files and directories.</p>

        <p>Once we get the <code>umask</code> value, that is <code>022</code>, we can calculated the permissions for:</p>
        
        <ul>
            <li>Files: <code>666 - 022 = 644</code> (the default creation permissions for file – umask value = the permissions for file). The owner can read and modify the files. Group and others can only read the files.</li>
            <li>Directories: <code>777 - 022 = 755</code> (the default creation permissions for drectory – umask value = the permissions for drectory). The owner can <code>cd</code> into the directory, and list, read, modify, create or delete the files in the directory. Group and others can <code>cd</code> into the directory and list and read the files.</li>
        </ul>

        <p>If the <code>-S</code> option is supplied without a <code>mode</code> argument, the mask is printed in a symbolic format.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask -S
u=rwx,g=rx,o=rx</code></pre>

        <p>If the <code>-p</code> option is supplied, and <code>mode</code> is omitted, the output is in a form that may be reused as input.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ umask -p
umask 0022</code></pre>

        <h5 class="post-subtitle">unset</h5>

        <p>The <code>unset</code> is used to unset or undefine values and attributes of variables and functions.</p>

        <p>The syntax of the <code>unset</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">unset [-fnv] [name]</code></pre>

        <p>If the <code>-v</code> option is given, each <code>name</code> refers to a shell variable and that variable is removed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ varname="hemimorphite blog"
[hemimorphite@ubuntu ~]$ echo $varname
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -v varname
[hemimorphite@ubuntu ~]$ echo $varname

[hemimorphite@ubuntu ~]$</code></pre>

        <p>If the <code>-f</code> option is given, the names refer to shell functions, and the function definition is removed.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ getname() {
>   echo "hemimorphite blog"
> }
[hemimorphite@ubuntu ~]$ getname
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -f getname
[hemimorphite@ubuntu ~]$ getname

[hemimorphite@ubuntu ~]$</code></pre>

        <p>If the <ocde>-n</ocde> option is supplied, and <code>name</code> is a variable with the <code>nameref</code> attribute, <code>name</code> will be unset rather than the variable it references.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ var=blog
[hemimorphite@ubuntu ~]$ declare -n varnameref=${var}name
[hemimorphite@ubuntu ~]$ varnameref="hemimorphite blog"
[hemimorphite@ubuntu ~]$ echo $blogname
hemimorphite blog
[hemimorphite@ubuntu ~]$ echo $varnameref
hemimorphite blog
[hemimorphite@ubuntu ~]$ unset -n varnameref
[hemimorphite@ubuntu ~]$ echo $blogname
hemimorphite blog
[hemimorphite@ubuntu ~]$ echo $varnameref

[hemimorphite@ubuntu ~]$</code></pre>

        <p><code>-n</code> option has no effect if the <code>-f</code> option is supplied.</p>
        
        <p>If no options are supplied, each <code>name</code> refers to a variable or refers to a function; is removed.</p>

        <p>Readonly variables and functions can't be unset.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ readonly blogname="hemimorphite"
[hemimorphite@ubuntu ~]$ unset blogname
-bash: unset: blogname: cannot unset: readonly variable</code></pre>
        
        <h5 class="post-subtitle">test</h5>

        <p>The <code>test</code> command compares one element against another and returns true or false.</p>

        <p>The syntax of the <code>test</code> command takes the following form:</p>

        <pre><code class="language-bash hljs">test expr</code></pre>

        <p>Or</p>

        <pre><code class="language-bash hljs">[ expr ]</code></pre>

        <p><code>test</code> exits with the status determined by <code>expr</code>. Placing the <code>expr</code> between square brackets ([ and ]) is the same as testing the <code>expr</code> with <code>test</code>. To see the exit status at the command prompt, <code>echo</code> the value <code>$?</code> A value of <code>0</code> means the expression evaluated as <code>true</code>, and a value of <code>1</code> means the expression evaluated as <code>false</code>.</p>

        <p>Expressions of <code>test</code> command take the following forms:</p>
        
        
        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <th style="min-width:10rem;">Expression</th>
                    <th style="min-width:30rem;">Description</th>
                    <th style="min-width:auto;">Example</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>expression</code>
                    </td>
                    <td>
                        <code>expression</code> is <code>true</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>! expression</code>
                    </td>
                    <td>
                        <code>expression</code> is <code>false</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test ! -z hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ ! -z hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>expression1 -a expression2</code>
                    </td>
                    <td>
                        both <code>expression1</code> and <code>expression2</code> are <code>true</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite -a hemimorphite != Hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite -a hemimorphite != Hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>expression1 -o expression2</code>
                    </td>
                    <td>either <code>expression1</code> or <code>expression2</code> is true </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -z hemimorphite -o hemimorphite != Hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -z hemimorphite -o hemimorphite != Hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-n string</code>
                    </td>
                    <td>the length of <code>string</code> is nonzero </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -n hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -n hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string</code>
                    </td>
                    <td>
                        equivalent to <code>-n string</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test hemimorphite
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ hemimorphite ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-z string</code>
                    </td>
                    <td>the length of <code>string</code> is zero</td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -z ''
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -z '' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string1 = string2</code>
                    </td>
                    <td>
                        the strings are equal
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 'hemimorphite blog' = 'hemimorphite blog'
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 'hemimorphite blog' = 'hemimorphite blog' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>string1 != string2</code>
                    </td>
                    <td>the strings are not equal</td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 'hemimorphite blog' != 'Hemimorphite Blog'
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 'hemimorphite blog' != 'Hemimorphite Blog' ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -eq integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> equals <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -eq 100
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -eq 100 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -ge integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is greater than or equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -ge 60
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -ge 60 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -gt integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is greater than <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 100 -gt 60
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 100 -gt 60 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -le integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is less than or equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -le 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -le 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -lt integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is less than <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -lt 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -lt 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>integer1 -ne integer2</code>
                    </td>
                    <td>
                        <code>integer1</code> is not equal to <code>integer2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test 80 -ne 120
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ 80 -ne 120 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -ef file2</code>
                    </td>
                    <td>
                        <code>file1</code> and <code>file2</code> have the same device and inode (index node) numbers. The following metadata exists in an inode:
                        <ul>
                            <li>File type</li>
                            <li>Permissions</li>
                            <li>Owner ID</li>
                            <li>Group ID</li>
                            <li>Size of file</li>
                            <li>Time last accessed</li>
                            <li>Time last modified</li>
                            <li>Soft/Hard Links</li>
                            <li>Access Control List (ACLs)</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch doc1.txt
# create a hard link to doc1.txt
[hemimorphite@ubuntu ~]$ ln doc1.txt doc2.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc3.txt
[hemimorphite@ubuntu ~]$ test doc1.txt -ef doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test doc1.txt -ef doc3.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test doc2.txt -ef doc3.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc1.txt -ef doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc1.txt -ef doc3.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ doc2.txt -ef doc3.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -nt file2</code>
                    </td>
                    <td>
                        <code>file1</code> is newer (modification date) than <code>file2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch olddoc.txt
# create a newer file
[hemimorphite@ubuntu ~]$ touch newdoc.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ test newdoc.txt -nt olddoc.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ newdoc.txt -nt olddoc.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>file1 -ot file2</code>
                    </td>
                    <td>
                        <code>file1</code> is older (modification date) than <code>file2</code>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a file
[hemimorphite@ubuntu ~]$ touch olddoc.txt
# create a newer file
[hemimorphite@ubuntu ~]$ touch newdoc.txt
# create a soft link to doc1.txt
[hemimorphite@ubuntu ~]$ test olddoc.txt -ot newdoc.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ olddoc.txt -ot newdoc.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-b file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is block special (block device). A block special file acts as a direct interface to a block device. A block device is any device which performs data I/O in units of blocks.<br>
                        Examples of block special files:
                        <ul>
                            <li><code>dev/fdn</code>: mounted partitions of floppy disks. The letter <code>n</code> refers to a physical device</li>
                            <li><code>dev/scdn</code> or <code>dev/srn</code>: mounted partitions of SCSI CD-ROMs. The letter <code>n</code> refers to a physical device</li>
                            <li><code>dev/hdxn</code>: mounted partitions of Integrated Drive Electronics (IDE) controllers. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/hda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>dev/sdxn</code>: mounted partitions of SCSI disks. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/sda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>dev/mmcblkxpn</code>: mounted partitions of SD/MMC cards. The letter <code>x</code> refers to a physical device, and the number <code>n</code> refers to a partition on that device. For instance, <code>/dev/sda1</code> is the first partition on the first physical storage device.</li>
                            <li><code>/dev/loopn</code> — loop devices. These are special devices which allow a file in the filesystem to be used as a block device. The file may contain an entire filesystem of its own, and be accessed as if it were a mounted partition on a physical storage device. For example, an ISO disk image file may be mounted as a loop device.</li>
                            <li>etc</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -b /dev/sda1
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test -b /dev/loop1
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -b /dev/sda1 ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -b /dev/loop1 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-c file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is character special. A character special file is similar to a block device, but data is written one character (eight bits, or one byte) at a time.<br>
                        Examples of character special files:<br>
                        <ul>
                            <li><code>/dev/stdin</code> (Standard input)</li>
                            <li><code>/dev/stdout</code> (Standard output.)</li>
                            <li><code>/dev/stderr</code> (Standard error.)</li>
                            <li><code>/dev/random</code> (PRNG which may delay returning a value to acquire additional entropy)</li>
                            <li><code>/dev/urandom</code> (PRNG which always returns a value immediately, regardless of required entropy)</li>
                            <li><code>/dev/null</code> (The null device. Reading from this file always gets a null byte; writing to this file successfully does nothing)</li>
                        </ul>
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ test -c /dev/stdin
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ test -c /dev/urandom
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -c /dev/stdin ]
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -c /dev/urandom ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-d file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a directory
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkdir docs
[hemimorphite@ubuntu ~]$ test -d docs
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -d docs ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-e file</code>
                    </td>
                    <td>
                        <code>file</code> exists
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ test -e specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -e specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-f file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a regular file
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ test -f specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -f specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-g file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is set-group-ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod g+s specs.txt
[hemimorphite@ubuntu ~]$ test -g specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -g specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-G file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is owned by the effective group ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
# user hemimorphite is in hemimorphite group and specs.txt is owned by hemimorphite group
[hemimorphite@ubuntu ~]$ test -G specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -G specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-h file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a symbolic link (same as <code>-L</code>)
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc2.txt
[hemimorphite@ubuntu ~]$ test -h doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -h doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-k file</code>
                    </td>
                    <td>
                        <code>file</code> exists and has its sticky bit set. When a directory or a file has the sticky bit set, its files can be deleted or renamed only by the file owner, directory owner and the root user.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ chmod +t doc1.txt
[hemimorphite@ubuntu ~]$ test -k doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -k doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-L file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a symbolic link (same as <code>-h</code>)
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch doc1.txt
[hemimorphite@ubuntu ~]$ ln -s doc1.txt doc2.txt
[hemimorphite@ubuntu ~]$ test -L doc2.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -L doc2.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-O file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is owned by the effective user ID
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
# specs.txt is owned by hemimorphite
[hemimorphite@ubuntu ~]$ test -O specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -O specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-p file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a named pipe
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ mkfifo pipeone
[hemimorphite@ubuntu ~]$ test -p pipeone
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -p pipeone ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-r file</code>
                    </td>
                    <td>
                        <code>file</code> exists and read permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
[hemimorphite@ubuntu ~]$ test -r specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -r specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-s file</code>
                    </td>
                    <td>
                        <code>file</code> exists and has a size greater than zero
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ echo Bash Language Specification > specs.txt
[hemimorphite@ubuntu ~]$ test -s specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -s specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-S file</code>
                    </td>
                    <td>
                        <code>file</code> exists and is a socket. Sockets are Linux file descriptors that serve as the communication end-points for processes running on that device.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs"># create a socket
[hemimorphite@ubuntu ~]$ nc -Ul server.sock &
[hemimorphite@ubuntu ~]$ test -S server.sock
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -S server.sock ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-t fd</code>
                    </td>
                    <td>
                        file descriptor <code>fd</code> is opened on a terminal. File Descriptors are positive integers that act as abstract handles for IO/resources and files. All file descriptors that a process contains are stored in the directory <code>/proc/&lt;PID&gt;/fd/</code>. &lt;PID&gt; stands for the process ID.
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch out.txt
# Opening file descriptors #4 for reading and writing
[hemimorphite@ubuntu ~]$ exec 4<>out.txt 
# $$ is the process ID of the current instance of Bash
[hemimorphite@ubuntu ~]$ test -t /proc/$$/fd/4
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -t /proc/$$/fd/4 ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-u file</code>
                    </td>
                    <td>
                        <code>file</code> exists and its set-user-ID bit is set
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod u+s specs.txt
[hemimorphite@ubuntu ~]$ test -u specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -u specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-w file</code>
                    </td>
                    <td>
                        <code>file</code> exists and write permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch specs.txt
[hemimorphite@ubuntu ~]$ chmod u+w specs.txt
[hemimorphite@ubuntu ~]$ ls -la specs.txt
-rw-r--r-- 1 hemimorphite hemimorphite 0 Jun 18 01:00 specs.txt
[hemimorphite@ubuntu ~]$ test -w specs.txt
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -w specs.txt ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>-x file</code>
                    </td>
                    <td>
                        <code>file</code> exists and execute (or search) permission is granted
                    </td>
                    <td>
                        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ touch build.sh
[hemimorphite@ubuntu ~]$ chmod u+x build.sh
[hemimorphite@ubuntu ~]$ ls -la build.sh
-rwxr--r-- 1 hemimorphite hemimorphite 0 Jun 18 15:56 build.sh
[hemimorphite@ubuntu ~]$ test -x build.sh
[hemimorphite@ubuntu ~]$ echo $?
0
[hemimorphite@ubuntu ~]$ [ -x build.sh ]
[hemimorphite@ubuntu ~]$ echo $?
0</code></pre>
                    </td>
                </tr>
            </tbody>
        </table>
        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/linux-command" class="tag">linux command</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/break" class="tag">break</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/" class="tag">:</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/" class="tag">.</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/cd" class="tag">cd</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/continue" class="tag">continue</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/eval" class="tag">eval</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/exec" class="tag">exec</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/exit" class="tag">exit</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/export" class="tag">export</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/getopts" class="tag">getopts</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/hash" class="tag">hash</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/pwd" class="tag">pwd</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/readonly" class="tag">readonly</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/return" class="tag">return</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/shift" class="tag">shift</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/times" class="tag">times</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/trap" class="tag">trap</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/umask" class="tag">umask</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/unset" class="tag">unset</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/test" class="tag">test</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-16" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="linux command" /><category term="break" /><category term=":" /><category term="." /><category term="cd" /><category term="continue" /><category term="eval" /><category term="exec" /><category term="exit" /><category term="export" /><category term="getopts" /><category term="hash" /><category term="pwd" /><category term="readonly" /><category term="return" /><category term="shift" /><category term="times" /><category term="trap" /><category term="umask" /><category term="unset" /><category term="test" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell builtin commands such as . (dot), : (colon), break, cd, continue, eval, exec, exit, export, getopts, hash, pwd, readonly, return, shift, times, trap, umask, unset and test with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Login and Non-Login Shell in Linux</title><link href="https://hemimorphite.github.io/2024/06/14/difference-between-login-and-non-login-shell-in-linux/" rel="alternate" type="text/html" title="Difference Between Login and Non-Login Shell in Linux" /><published>2024-06-14T14:20:00+00:00</published><updated>2024-06-14T14:20:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/14/difference-between-login-and-non-login-shell-in-linux</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/14/difference-between-login-and-non-login-shell-in-linux/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Login and Non-Login Shell in Linux</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 14, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/linux.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Shell is a command interpreter or a program that reads and interprets commands issued to it by the user. The shell performs basic commands such as running programs, inputting text, and printing output. It is also responsible for handling errors and other situations that require user intervention. A shell can be used to automate existing tasks or to create new ones entirely.</p>

        <h5 class="post-subtitle">Login Shell</h5>

        <p>When a user successfully logs in to a Linux system via terminal, SSH, or switches to a user with the <code>su -</code> command, a Login shell is created.</p>

        <p>When a login shell starts, it executes a set of pre-configured scripts to set up the environment. You may run this command on the terminal to discover which shell you are using.</p>

        <pre><code class="language-bash hljs">echo $0</code></pre>

        <p>If the result is <code>-bash</code> or <code>-su</code>, you are on the login shell. Be certain that it has a hyphen (-) as a prefix.</p>

        <p>The following scripts are executed by the Login Shell:</p>

        <ol>
            <li>Login shell invokes <code>/etc/profile</code></li>
            <li><code>/etc/profile</code> invokes scripts in <code>/etc/profile.d/*.sh</code></li>
            <li>Then executes users <code>~/.bash_profile</code></li>
            <li><code>~/.bash_profile</code> invokes users <code>~/.bashrc</code></li>
        </ol>

        <h5 class="post-subtitle">Non-Login Shell</h5>
        
        <p>A non-login shell is started by a login shell. For example, a shell that you start from another shell or from a program is a non-login shell.</p>

        <p>A shell that is not used to log in to the system executes the following script to set the shell environment.</p>

        <ol>
            <li>Non login shell first executes <code>~/.bashrc</code></li>
            <li>Then <code>~/.bashrc</code> executes <code>/etc/bashrc</code></li>
            <li><code>/etc/bashrc</code> calls the scripts in <code>/etc/profile.d</code></li>
        </ol>

        <p>To find whether the current shell is a login shell or a non-login shell simply run the below command.</p>

        <pre><code class="language-bash hljs">echo $0</code></pre>

        <p>Login shell output will be <code>-bash</code> or <code>-su</code>.</p>

        <p>Non-login shell output will be <code>bash</code> or <code>su</code></p>  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/login-shell" class="tag">login shell</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/non-login-shell" class="tag">non-login shell</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-14" /><category term="linux" /><category term="login shell" /><category term="non-login shell" /><summary type="html"><![CDATA[Learn about the key differences between login and non-login shells in Linux, how they are initiated, and what impact they have on the environment settings for users.]]></summary></entry><entry xml:lang="en"><title type="html">mail Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04/" rel="alternate" type="text/html" title="mail Command on Ubuntu 22.04" /><published>2024-06-13T16:55:00+00:00</published><updated>2024-06-13T16:55:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">mail Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h5 class="post-subtitle">Install mail Command</h5>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>When prompted to configure the postfix package, press <b>TAB</b> to select <b>Ok</b> and confirm with <b>Enter</b>.</p>

        <figure class="post-figure">
        	<img src="/assets/images/postfix-01.png" alt="Postfix Configuration">
        </figure>

        <p>Select <b>Internet Site</b> in the package configuration window. Press <b>TAB</b> to select <b>Ok</b> and press <b>Enter</b> to confirm.</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-02.png" alt="Postfix Configuration">
        </figure>

		<p>Complete the basic configuration by entering the system mail name (the machine's fully qualified domain name).</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-03.png" alt="Postfix Configuration">
        </figure>

        <h5 class="post-subtitle">mail Command Options</h5>
		
		<table class="table table-bordered border-primary">
			<thead>
				<tr>
					<th>Argument</th>
					<th>Description</th>
					<th>Example</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><code>-s</code></td>
					<td>Specifies the subject of the email.</td>
					<td><code>mail -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-c</code></td>
					<td>Sends a carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -c cc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-b</code></td>
					<td>Sends a blind carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -b bcc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-a</code></td>
					<td>Adds an attachment to the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -a file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-q</code></td>
					<td>Reads a message from the specified file.</td>
					<td><code>mail -s 'Subject' -q file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-r</code></td>
					<td>Specifies the return address for the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -r from@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-v</code></td>
					<td>Verbose mode. Displays the details of the email sending process.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -v user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-f</code></td>
					<td>Reads messages from the specified mailbox file.</td>
					<td><code>mail -f /var/mail/user</code></td>
				</tr>
				<tr>
					<td><code>-i</code></td>
					<td>Ignores lines with only a dot.</td>
					<td><code>mail -i -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-E</code></td>
					<td>Does not send messages with an empty body.</td>
					<td><code>echo '' | mail -E -s 'Subject' user@example.com</code></td>
				</tr>
			</tbody>
		</table>

		<h5 class="post-subtitle">mail Command Examples</h5>

		<h6 class="post-subtitle">Example 1: Send Mail with Subject and Body</h6>

        <p>The basic way of using <code>mail</code> to send emails is to specify the email subject using the <code>-s</code> flag and add the recipient. The command then enters the interactive mode, asking if you want to send Ccs and asking for the email body.</p>

		<p>After entering all the information, press <b>Ctrl+D</b> to send the email.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna
Cc:
This is the email body</code></pre>
		
		<h6 class="post-subtitle">Example 2: Send Mail Using echo</h6>

		<p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the echo command output to the <code>mail</code> command.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" | mail -s "Email Subject" echidna</code></pre>
		
		<h6 class="post-subtitle">Example 3: Send Email Using Redirection</h6>
		
		<p>Another way to provide the email body is to use redirection (&lt;&lt;&lt;). Using redirection also avoids the <code>mail</code> command interactive mode and sends the email without any prompts.</p>
		
		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna &lt;&lt;&lt; "this is the email body"</code></pre>

		<h6 class="post-subtitle">Example 4: Send Email from File</h6>

        <p>The <code>mail</code> command allows users to provide the email body from an existing file. This option saves time and facilitates sending large messages without writing them in the command line.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" > file.txt
[satella@ubuntu ~]$ mail -s "Email Subject" echidna < file.txt</code></pre>
		
		<h6 class="post-subtitle">Example 4: Read Mail</h6>

        <p>Check the mailbox for the current user by running the <code>mail</code> command without any options or flags.</p>
        
		<pre><code class="language-bash hljs">[minerva@ubuntu ~]$ mail
"/var/mail/minerva": 8 messages 8 new
U   1 satella@ubuntu Thu Jun 13 20:52  17/532   this is email subject
U   2 satella@ubuntu Thu Jun 13 20:54  16/488   this is email subject
U   3 satella@ubuntu Thu Jun 13 20:58  16/488   this is email subject
U   4 satella@ubuntu Thu Jun 13 20:59  16/488   this is email subject
U   5 satella@ubuntu Thu Jun 13 21:02  16/488   this is email subject
U   6 satella@ubuntu Thu Jun 13 21:05  16/492   this is email subject 1
U   7 satella@ubuntu Thu Jun 13 21:06  16/492   this is email subject 1
U   8 satella@ubuntu Thu Jun 13 22:07  16/416   Subject
?</code></pre>
		
		<p>To open an email, enter the email number and press Enter. For example, we will open email number 8:</p>

		<pre><code class="language-bash hljs">? 8
Return-Path: &lt;satella@ubuntu&gt;
X-Original-To: minerva
Delivered-To: minerva@ubuntu
Received: by ubuntu (Postfix, from userid 1001)
	id 453F4A257B; Thu, 13 Jun 2024 22:07:00 +0700 (WIB)
Subject: Subject
To: minerva@ubuntu
User-Agent: mail (GNU Mailutils 3.14)
Date: Thu, 13 Jun 2024 22:07:00 +0700
Message-Id: &lt;20240613150700.453F4A257B@ubuntu&gt;
From: satella@ubuntu
X-UID: 8
Status: O

?</code></pre>

        <p>After opening the email, the command waits for further input from the user. Open the next email by entering (+) in the prompt, or access the previous email by entering (-). Return to the mailbox by pressing Ctrl+D.</p>

		<h6 class="post-subtitle">Example 5: Delete Mail</h6>
		
		<p>To delete an email, open the email you want to delete, press <code>d</code>, and confirm with Enter. To delete multiple emails at once, open the mailbox and enter <code>d</code> followed by the email numbers you want to delete.</p>
		
		<p>For example, the following command deletes emails numbered 1 and 2:</p>

        <pre><code class="language-bash hljs">d 1 2</code></pre>
		
		<p>To delete a range of emails, specify the first and last email in the range separated by a dash. For example, to delete emails 1-10, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d 1-10</code></pre>

        <p>To delete all received mail, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d*</code></pre>

	</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/mail" class="tag">mail</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="ubuntu 22.04" /><category term="mail" /><summary type="html"><![CDATA[Learn how to use the mail command on Ubuntu 22.04 with this detailed guide. Includes examples and usage tips to help you master email management from the command line.]]></summary></entry><entry xml:lang="en"><title type="html">Bourne Shell Environment Variables</title><link href="https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables/" rel="alternate" type="text/html" title="Bourne Shell Environment Variables" /><published>2024-06-13T14:21:00+00:00</published><updated>2024-06-13T14:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Environment Variables</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5 class="post-subtitle">CDPATH</h5>

        <p>A colon-separated list of directories used as a search path for the <code>cd</code> builtin command.</p>

        <p>If the target directory of the <code>cd</code> command is specified as a relative path name, the <code>cd</code> command first looks for the target directory in the current directory (<code>.</code>). If the target is not found, the path names listed in the <code>CDPATH</code> variable are searched consecutively until the target directory is found and the directory change is completed. If the target directory is not found, the current working directory is left unmodified. For example, the <code>CDPATH</code> variable is set to <code>/home/hemimorphite</code>, and four directories exist under <code>/home/hemimorphite</code>, <code>layouts</code>, <code>posts</code>, <code>assets</code> and <code>vendors</code>. If you are in the <code>/home/hemimorphite/posts</code> directory and type <code>cd vendors</code>, you change directories to <code>/home/hemimorphite/vendors</code>, even though you do not specify a full path.</p>

        <h5 class="post-subtitle">HOME</h5>

        <p>The current user's home directory; the default for the <code>cd</code> builtin command. The value of this variable is also used by tilde expansion (<code>~</code>).</p>

        <pre><code class="language-bash hljs">cd $HOME
# OR
cd ~</code></pre>

        <h5 class="post-subtitle">IFS</h5>
        
        <p>A list of characters that separate fields; used when the shell splits words as part of expansion.</p>

        <p>The default value is a space, a tab, and a newline (<code>IFS=$' \t\n'</code>).</p>

        <p>You can print it with the following command:</p>

        <pre><code class="language-bash hljs">cat -etv &lt;&lt;&lt;"$IFS"</code></pre>

        <p>You should see something as follows on your Linux terminal:</p>

        <pre><code class="language-bash hljs"> ^I$
$</code></pre>

        <p>The <code>IFS</code> variable is commonly used with <code>read</code> command, parameter expansions and command substitution.</p>
        
        <p>In the <code>read</code> command, if multiple variable-name arguments are specified, <code>IFS</code> is used to split the line of input so that each variable gets a single field of the input. (The last variable gets all the remaining fields, if there are more fields than variables.) Any whitespace characters in <code>IFS</code> will be trimmed from the beginning and end of the input line, even when only one variable is given.</p>

        <pre><code class="language-bash hljs"># Using default IFS=$' \t\n'
[hemimorphite@ubuntu ~]$ read -r a b c &lt;&lt;&lt; '   A      B  C'
[hemimorphite@ubuntu ~]$ echo "$a $b $c"
A B C</code></pre>

        <pre><code class="language-bash hljs"># Using a custom IFS value
[hemimorphite@ubuntu ~]$ IFS=: read -r user pwhash uid gid gecos home shell \
    &lt;&lt;&lt; 'root:*:0:0:System Administrator:/var/root:/bin/sh'
[hemimorphite@ubuntu ~]$ echo "$user $pwhash $uid $gid $gecos $home $shell"
root * 0 0 System Administrator /var/root /bin/sh</code></pre>

        <p>If <code>IFS</code> contains a mixture of whitespace and non-whitespace characters then any non-whitespace IFS character or IFS whitespace characters (any sequence of one or more whitespace IFS characters count as single whitespace) acts as a single field delimiter. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=' ,'
[hemimorphite@ubuntu ~]$ sentence="This is        a, simple,     example"
[hemimorphite@ubuntu ~]$ printf 'word -> "%s" \n' $sentence
word -> "This" 
word -> "is" 
word -> "a" 
word -> "simple" 
word -> "example"</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=$' \t\n' read -r a b c \
    &lt;&lt;&lt; 'the    plain gold      ring'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=the= =plain= =gold      ring=</code></pre>
        
        <p>The above example shows that splitting and delimiter-consolidation are not performed on the remaining part of a line when assigning excess fields to the last variable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=: read -r a b c \
    &lt;&lt;&lt; '1:2:::3::4'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=1= =2= =::3::4=</code></pre>
        
        <p>Note that out of the three consecutive colons which follow field 2, precisely one colon was removed in order to terminate field 2. The remaining two colons, as well as two more colons later on, were all left untouched, and assigned to variable <code>c</code> verbatim.</p>

        <h5 class="post-subtitle">OPTARG</h5>

        <p>The value of the option processed by the <code>getopts</code> builtin.</p>

        <p>Let's create a bash script called <code>command.sh</code></p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

# Parse command-line options
while getopts ":f:d:" flag; do
    case $flag in
    f) echo "The filename is: ${OPTARG}"
      ;;
    d) echo "The directory is: ${OPTARG}"
    esac
done</code></pre>

        <p>The Bash script utilizes the <code>getopts</code> command to parse command-line options. It specifies two options, <code>-f</code>  and <code>-d</code> in the optstring. As there is a colon (:) after both options, if triggered each of them requires an argument.</p>

        <p>Inside the loop, a <code>case</code> statement is used to check the currently processed option. If the option <code>-f</code> is encountered, the script prints out the filename specified with the option using the special variable <code>OPTARG</code>. Similarly, if the option <code>-d</code> is found, the script displays the directory provided with the option using <code>OPTARG</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -f file1.txt -d /home hemimorphite
The filename is: file1.txt
The directory is: /home hemimorphite</code></pre>
        
        <h5 class="post-subtitle">OPTERR</h5>
        
        <p><code>OPTERR</code> controls if Bash displays errors generated by the <code>getopts</code> builtin command. <code>getopts</code> does not print errors if <code>OPTERR</code> has a value of <code>0</code>. Value <code>1</code> enables the errors.</p>

        <p>The default value is <code>1</code>.</p>

        <h5 class="post-subtitle">OPTIND</h5>

        <p>The index of the next parameter/argument processed by the <code>getopts</code> builtin.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

while getopts "ab:c" flag; do
    echo "$flag" "$OPTIND" "$OPTARG"
done</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -ac -b value1
a 1
c 2
b 4 value1</code></pre>

        <p>In <code>./command.sh -ac -b value1</code>, arg1 is <code>-ac</code>, arg2 is <code>-b</code>, arg3 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg1. So the index stored in <code>OPTIND</code> is <code>1</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg3 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>4</code> or the index of arg4.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -a -c -b value1
a 2
c 3
b 5 value1</code></pre>
        
        <p>In <code>./command.sh -a -c -b value1</code>, arg1 is <code>-a</code>, arg2 is <code>-c</code>, arg3 is <code>-b</code>, arg4 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg3. So the index stored in <code>OPTIND</code> is <code>3</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg4 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>5</code> or the index of arg5.</p>

        <h5 class="post-subtitle">PATH</h5>

        <p>A colon-separated list of directories in which the shell looks for commands. This is the variable that tells the bash shell where to find different executable files and scripts. The shell will check the directories listed in the <code>PATH</code> variable for the script you are trying to find.</p>
        
        <p>Let's say you wrote a little shell script called <code>hello</code> and have it located in a directory called <code>/home/hemimorphite/bin</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ cat hello
#!/bin/bash

echo Hello "$USER"
[hemimorphite@ubuntu ~/bin]$ chmod +x hello</code></pre>
        
        <p>Add <code>/home/hemimorphite/bin</code> to the <code>$PATH</code> variable with the following command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ export PATH=$PATH:/home/hemimorphite/bin</code></pre>

        <p>You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ hello
Hello hemimorphite</code></pre>

        <h5 class="post-subtitle">MAIL</h5>

        <p>Name of file to check for incoming mail.</p>

        <h5 class="post-subtitle">MAILCHECK</h5>

        <p>defines the interval in seconds when the shell should check for mail. (default 60 seconds).</p>

        <h5 class="post-subtitle">MAILPATH</h5>

        <p>List of filenames, separated by colons (:), to check for incoming mail.</p>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>Let us create a new user named satella, echidna, and minerva using the <code>useradd</code> command on Ubuntu:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/satella/ -m -G sudo satella
[hemimorphite@ubuntu ~/]$ sudo passwd satella
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/echidna/ -m -G sudo echidna
[hemimorphite@ubuntu ~/]$ sudo passwd echidna
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/minerva/ -m -G sudo minerva
[hemimorphite@ubuntu ~/]$ sudo passwd minerva</code></pre>

        <p>Where,</p>

        <ul>
            <li><code>-s /bin/bash</code>, set <code>/bin/bash</code> as login shell of the new account</li>
            <li><code>-d /home/satella/</code>, set <code>/home/satella/</code> as home directory of the new Ubuntu account</li>
            <li><code>-m</code>, create the user's home directory</li>
            <li><code>-G sudo</code>, make satella user can use <code>sudo</code> command</li>
        </ul>

        <p>Switch to user satella.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo su - satella
[satella@ubuntu ~/]$ </code></pre>

        <p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the <code>echo</code> command output to the <code>mail</code> command.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~/]$ echo "This is the email body" | mail -s "this is email subject" echidna, minerva</code></pre>
        
        <p>After 60 seconds (the value of <code>MAILCHECK</code>), on echidna's or minerva's prompt press <code>ENTER</code> and the prompt will print the message:</p>

        <pre><code class="language-bash hljs">You have mail in /var/mail/echidna</code></pre>

        <p>Shell will use the value of <code>MAIL</code> as the name of the file to check, unless <code>MAILPATH</code> is set; in which case, the shell will check each file in the <code>MAILPATH</code> list for new mail. You can use this mechanism to have the shell print a different message for each mail file: for each mail filename in <code>MAILPATH</code>, append a question mark followed by the message you want printed.</p>

        <p>You could define <code>MAILPATH</code> to be:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived.:\
/usr/mail/satella/minerva?There is new mail from Paul."</code></pre>

        <p>The backslashes at the end of each line allow you to continue your command on the next line. Now, if you get mail from echidna, the shell will print:</p>

        <pre><code class="language-bash hljs">Mail from Echidna has arrived.</code></pre>

        <p>You can also use the variable <code>$_</code> in the message to print the name of the current mail file or execute a command <code>$(date)</code> to displays the current date and time. For example:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived in $_ at $(date).:\
/usr/mail/satella/minerva?There is new mail from Paul in $_ at $(date)."</code></pre>
</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/special-variables" class="tag">special variables</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/cdpath" class="tag">CDPATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/home" class="tag">HOME</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ifs" class="tag">IFS</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/optarg" class="tag">OPTARG</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/opterr" class="tag">OPTERR</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/optind" class="tag">OPTIND</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/path" class="tag">PATH</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/mail" class="tag">MAIL</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/mailcheck" class="tag">MAILCHECK</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/mailpath" class="tag">MAILPATH</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Best Practices" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="special variables" /><category term="CDPATH" /><category term="HOME" /><category term="IFS" /><category term="OPTARG" /><category term="OPTERR" /><category term="OPTIND" /><category term="PATH" /><category term="MAIL" /><category term="MAILCHECK" /><category term="MAILPATH" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell environment variables such as CDPATH, HOME, IFS, OPTARG, OPTERR, OPTIND, PATH, MAIL, MAILCHECK, and MAILPATH with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Linux Signals</title><link href="https://hemimorphite.github.io/2024/06/11/linux-signals/" rel="alternate" type="text/html" title="Linux Signals" /><published>2024-06-11T15:20:00+00:00</published><updated>2024-06-11T15:20:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/11/linux-signals</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/11/linux-signals/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Linux Signals</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/linux.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Signals are interruptions that are generated by the software and give us a way of handling asynchronous events. Those interruptions can be generated by things outside the process (like Ctrl+C from the user in the terminal) or from errors inside the process (like a math error for dividing with 0).</p>

        <p>There are 31 standard signals, numbered 1-31. Each signal is named as "SIG" followed by a suffix. Starting from version 2.2, the Linux kernel supports 33 different real-time signals. These have numbers 32-64 but programmers should instead use SIGRTMIN+n notation. Standard signals have specific purposes but the use of SIGUSR1 and SIGUSR2 can be defined by applications. Real-time signals are also defined by applications.</p>

        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <td><strong>Number</strong></td>
                    <td><strong>Name</strong></td>
                    <td><strong>Default Action</strong></td>
                    <td><strong>Description</strong></td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td><code>SIGHUP</code></td>
                    <td>Terminate</td>
                    <td>Terminal line hangup or parent process terminated</td>
                </tr>
                <tr>
                    <td>2</td>
                    <td><code>SIGINT</code></td>
                    <td>Terminate</td>
                    <td>Interrupt from keyboard (<code>ctrl-c</code>)</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td><code>SIGQUIT</code></td>
                    <td>Terminate</td>
                    <td>Quit from keyboard (<code>ctrl-\</code>)</td>
                </tr>
                <tr>
                    <td>4</td>
                    <td><code>SIGILL</code></td>
                    <td>Terminate</td>
                    <td>Illegal instruction</td>
                </tr>
                <tr>
                    <td>5</td>
                    <td><code>SIGTRAP</code></td>
                    <td>Core</td>
                    <td>Trace trap</td>
                </tr>
                <tr>
                    <td>6</td>
                    <td><code>SIGABRT</code></td>
                    <td>Core</td>
                    <td>Signal from <code>abort</code> function</td>
                </tr>
                <tr>
                    <td>7</td>
                    <td><code>SIGBUS</code></td>
                    <td>Terminate</td>
                    <td>Bus error</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td><code>SIGFPE</code></td>
                    <td>Core</td>
                    <td>Floating-point exception</td>
                </tr>
                <tr>
                    <td>9</td>
                    <td><code>SIGKILL</code></td>
                    <td>Terminate</td>
                    <td>Kill program</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td><code>SIGUSR1</code></td>
                    <td>Terminate</td>
                    <td>User-defined signal 1</td>
                </tr>
                <tr>
                    <td>11</td>
                    <td><code>SIGSEGV</code></td>
                    <td>Core</td>
                    <td>Invalid memory reference (segfault)</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td><code>SIGUSR2</code></td>
                    <td>Terminate</td>
                    <td>User-defined signal 2</td>
                </tr>
                <tr>
                    <td>13</td>
                    <td><code>SIGPIPE</code></td>
                    <td>Terminate</td>
                    <td>Write in pipe with no reader</td>
                </tr>
                <tr>
                    <td>14</td>
                    <td><code>SIGALRM</code></td>
                    <td>Terminate</td>
                    <td>Timer signal from <code>alarm</code> function</td>
                </tr>
                <tr>
                    <td>15</td>
                    <td><code>SIGTERM</code></td>
                    <td>Terminate</td>
                    <td>Software termination signal</td>
                </tr>
                <tr>
                    <td>16</td>
                    <td><code>SIGSTKFLT</code></td>
                    <td>Terminate</td>
                    <td>Stack fault on coprocessor</td>
                </tr>
                <tr>
                    <td>17</td>
                    <td><code>SIGCHLD</code></td>
                    <td>Ignore</td>
                    <td>Child process has stopped or terminated</td>
                </tr>
                <tr>
                    <td>18</td>
                    <td><code>SIGCONT</code></td>
                    <td>Ignore</td>
                    <td>Continue process if stopped</td>
                </tr>
                <tr>
                    <td>19</td>
                    <td><code>SIGSTOP</code></td>
                    <td>Stop</td>
                    <td>Stop signal not from terminal</td>
                </tr>
                <tr>
                    <td>20</td>
                    <td><code>SIGTSTP</code></td>
                    <td>Stop</td>
                    <td>Stop signal from terminal (<code>ctrl-z</code>)</td>
                </tr>
                <tr>
                    <td>21</td>
                    <td><code>SIGTTIN</code></td>
                    <td>Stop</td>
                    <td>Background process read from terminal</td>
                </tr>
                <tr>
                    <td>22</td>
                    <td><code>SIGTTOU</code></td>
                    <td>Stop</td>
                    <td>Background process wrote to terminal</td>
                </tr>
                <tr>
                    <td>23</td>
                    <td><code>SIGURG</code></td>
                    <td>Ignore</td>
                    <td>Urgent condition on socket</td>
                </tr>
                <tr>
                    <td>24</td>
                    <td><code>SIGXCPU</code></td>
                    <td>Terminate</td>
                    <td>CPU time limit exceeded</td>
                </tr>
                <tr>
                    <td>25</td>
                    <td><code>SIGXFSZ</code></td>
                    <td>Terminate</td>
                    <td>File size limit exceeded</td>
                </tr>
                <tr>
                    <td>26</td>
                    <td><code>SIGVTALRM</code></td>
                    <td>Terminate</td>
                    <td>Virtual timer expired</td>
                </tr>
                <tr>
                    <td>27</td>
                    <td><code>SIGPROF</code></td>
                    <td>Terminate</td>
                    <td>Profiling timer expired</td>
                </tr>
                <tr>
                    <td>28</td>
                    <td><code>SIGWINCH</code></td>
                    <td>Ignore</td>
                    <td>Window size changed</td>
                </tr>
                <tr>
                    <td>29</td>
                    <td><code>SIGIO</code></td>
                    <td>Terminate</td>
                    <td>I/O now possible on a descriptor</td>
                </tr>
                <tr>
                    <td>30</td>
                    <td><code>SIGPWR</code></td>
                    <td>Terminate</td>
                    <td>Power failure</td>
                </tr>
                <tr>
                    <td>31</td>
                    <td><code>SIGSYS</code></td>
                    <td>Terminate</td>
                    <td>Bad system call</td>
                </tr>
            </tbody>
        </table>


        <p>Signals can be delivered to a process at any time during its execution, launched by events like user actions, hardware exceptions, or even more inter-process communication.</p>

        <p>Signals can interrupt the normal flow of a process and require the process to handle or respond to the signal appropriately.</p>

        <p>Signals are delivered by the operating system to the target process.</p>

        <p>When a signal is generated, the operating system identifies the target process based on its process ID (PID).</p>
        
        <p>The operating system then interrupts the execution of the target process and delivers the signal by invoking the corresponding signal handler or performing the default action associated with the signal.</p>

        <p>Signals can be delivered by various sources, including the user, hardware exceptions, or other processes involved in inter-process communication.</p>

        <p>The delivery of signals involves coordination between the operating system and the target process.</p>
        
        <p>The operating system is responsible for identifying the target process, interrupting its execution, and delivering the signal, while the process handles the signal by executing the corresponding signal handler or default action.</p>

        <p>Here are some common default actions:</p>

        <ul>
            <li>Termination Signals
                <ul>
                    <li><code>SIGINT</code> (Interrupt): The process is terminated. This signal is generated by pressing Ctrl+C.</li>
                </ul>
            </li>
            <li>Termination with Core Dump Signals<br>
                A core dump is a file that contains a snapshot of a program's memory at the time of a crash or termination due to a critical error. It includes information about memory, registers, and program state.
                <ul>
                    <li><code>SIGQUIT</code> (Quit): The process is terminated. This signal is triggered by pressing Ctrl+\ on the keyboard. A core dump is generated.</li>
                    <li><code>SIGILL</code> (Illegal Instruction): The process is terminated with a core dump, indicating an illegal instruction.</li>
                    <li><code>SIGABRT</code> (Abort): The process is terminated with a core dump, usually when an internal error or inconsistency is detected.</li>
                    <li><code>SIGFPE</code> (Floating-Point Exception): The process is terminated with a core dump when a floating-point arithmetic exception occurs, such as division by zero.</li>
                    <li><code>SIGSEGV</code> (Segmentation Fault): The default action for this signal is to terminate the process and generate a core dump. It occurs when the program attempts to access a memory location that it is not allowed to access, such as accessing an invalid pointer or accessing memory that has not been allocated.</li>
                </ul>
            </li>
            <li>Ignored Signals
                <ul>
                    <li><code>SIGCHLD</code> (Child Status Changed): The signal is ignored, indicating that the process does not want to be notified when child processes terminate.</li>
                    <li><code>SIGURG</code> (Urgent Condition on Socket): The signal is ignored, typically used for out-of-band data in socket communication.</li>
                </ul>
            </li>
            <li>Stop Signals
                <ul>
                    <li><code>SIGSTOP</code> (Stop): The process is stopped (paused) and can be resumed later using SIGCONT.</li>
                    <li><code>SIGTSTP</code> (Terminal Stop): The process is stopped (paused) by the user, typically through the Ctrl+Z combination.</li>
                </ul>
            </li>
            <li>Continue Signal
                <ul>
                    <li><code>SIGCONT</code> (Continue): The process is resumed after being stopped or paused.</li>
                </ul>
            </li>
        </ul>

        <p>The purpose of signals is multifaceted and serves several important functions:</p>

        <ul>
            <li>Notify processes about events or conditions
                <ul>
                    <li>Example 1: for a user action, sending a <code>SIGINT</code> signal (Ctrl+C) to notify a process to terminate gracefully in response to a user interrupt.</li>
                    <li>Example 2: for a hardware exception, sending a <code>SIGFPE</code> signal, which indicates a floating-point arithmetic exception ( → division by zero).</li>
                </ul>
            </li>
            <li>Handle asynchronous events efficiently
                <ul>
                    <li>Example: receiving a <code>SIGALRM</code> signal to handle a timer or alarm event, allowing the process to perform a specific action after a specified time interval.</li>
                </ul>
            </li>
            <li>Handle exceptional situations or errors
                <ul>
                    <li>Example: catching a <code>SIGSEGV</code> signal (segmentation fault) to handle a memory access violation, enabling the process to log the error and gracefully recover or terminate.</li>
                </ul>
            </li>
            <li>Facilitate inter-process communication
                <ul>
                    <li>Example: sending a <code>SIGUSR1</code> signal from one process to another as a custom communication mechanism, indicating a request for specific actions or data exchange between the processes.</li>
                </ul>
            </li>
            <li>Enable graceful termination of processes
                <ul>
                    <li>Example: receiving a <code>SIGTERM</code> signal to initiate a graceful termination process, allowing the process to perform cleanup tasks, release resources, and exit gracefully.</li>
                </ul>
            </li>
            <li>Allow for custom behavior in response to signals
                <ul>
                    <li>Example: registering a signal handler for a custom signal, such as <code>SIGUSR2</code>, to define a specific action that the process should take when receiving that signal, tailored to the specific needs of the application.</li>
                </ul>
            </li>
        </ul>

        <p>To create a signal in C, you can use the <code>kill()</code> or <code>raise()</code> functions. To send a signal from one process to another process, you can use the <code>kill()</code> function. To send a signal to itself, a process can use the <code>raise()</code> function.</p>

        <p>Here's an example of using <code>kill()</code> to send a <code>SIGTERM</code> signal to a process with a specific PID:</p>

        <pre><code class="language-bash hljs">#include &lt;sys/types.h&gt;
#include &lt;signal.h&gt;

int main() 
{
    pid_t pid = 1234; /* Replace it with the target process ID */

    /* Send SIGTERM signal to the process */
    int result = kill(pid, SIGTERM);
    
    if (result == 0) 
    {
        printf("Signal successfully sent.\n");
    }
    else 
    {
        printf("Failed to send signal.\n");
    }
    
    return 0;
}</code></pre>

        <p>Here's an example of using raise() to send a SIGINT signal to the current process:</p>

        <pre><code class="language-bash hljs">#include &lt;signal.h&gt;

int main() 
{
    /* Send SIGINT signal to the current process */
    raise(SIGINT);
    
    return 0;
}</code></pre>  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/signal" class="tag">signal</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/c" class="tag">c</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-11" /><category term="linux" /><category term="signal" /><category term="c" /><summary type="html"><![CDATA[Linux signals are a fundamental feature of the Linux operating system that allow processes to communicate with each other. This article explains how signals work in Linux and how they can be utilized.]]></summary></entry><entry xml:lang="en"><title type="html">Exit Codes In Bash Scripting</title><link href="https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting/" rel="alternate" type="text/html" title="Exit Codes In Bash Scripting" /><published>2024-06-11T12:10:00+00:00</published><updated>2024-06-11T12:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Exit Codes In Bash Scripting</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Every Linux or Unix command executed by the shell script or user, has an exit status. The exit status is an integer number. For the bash shell's purposes, a command which exits with a zero (0) exit status has succeeded. A non-zero (1-255) exit status indicates failure. All of the Bash builtins return exit status of zero if they succeed and a non-zero status on failure.</p>

        <p>You can use special shell variable called <code>$?</code> to get the exit status of the previously executed command.</p>

        <p>List of reserved exit codes for bash scripting.</p>

        <table class="table table-bordered border-primary">
            <thead>
                <th>Exit Code Number</th>
                <th>Meaning</th>
                <th>Description</th>
            </thead>
            <tbody>
            <tr>
                <td>1</td>
                <td>Catchall for general errors</td>
                <td>Miscellaneous errors, such as divide by zero and other impermissible operations</td>
            </tr>
            <tr>
                <td>2</td>
                <td>Misuse of shell builtins</td>
                <td>Invalid option of bash builtin, trying to access a file or directory that doesn't exist or requires permissions</td>
            </tr>
            <tr>
                <td>126</td>
                <td>Command invoked can't be executed</td>
                <td>Permission problem or command is not an executable</td>
            </tr>
            <tr>
                <td>127</td>
                <td>Command not found</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>128</td>
                <td>Invalid argument to <code>exit</code></td>
                <td><code>exit</code> takes only integer args in the range 0 - 255 </td>
            </tr>
            <tr>
                <td>128+n</td>
                <td>Fatal error signal "n"</td>
                <td>In Linux, programs might send one of 31 different standard signals. When a program terminates after receiving one of these signals, it returns an error code equal to 128 + signal-number.</td>
            </tr>
            </tbody>
        </table>

        <p>According to the above table, exit codes 1 - 2, and 126 - 165 have special meanings, and should therefore be avoided for user-specified exit parameters.</p>

        <p>Let's simulate the exit codes</p>

        <h6 class="post-subtitle">General Error: 1</h6>

        <pre><code class="language-bash hljs">$ echo $((10 / 0))
bash: 10 / 0: division by 0 (error token is "0")
$ echo $?
1</code></pre>

        <h6 class="post-subtitle">Misuse of Shell Built-in: 2</h6>

        <pre><code class="language-bash hljs">$ ls nonexistdirectory/
ls: cannot access 'nonexistdirectory/': No such file or directory
$ echo $?
2</code></pre>
        
        <h6 class="post-subtitle">Cannot Execute: 126</h6>

        <pre><code class="language-bash hljs">$ cat nonexecutablescript.sh
#!/bin/bash

echo hello
$ chmod -x nonexecutablescript.sh
$ ./nonexecutablescript.sh
bash: ./nonexecutablescript.sh: Permission denied
$ echo $?
126</code></pre>
        
        <h6 class="post-subtitle">Command Not Found: 127</h6>

        <pre><code class="language-bash hljs">$ execute
bash: execute: command not found
$ echo $?
127</code></pre>

        <h6 class="post-subtitle">Fatal Error Signal n: 128+n</h6>
        
        <p>When we terminate a program by using Ctrl+C, we effectively send it a <code>SIGINT</code> signal. This signal has a value of 2. Therefore, the program will stop executing and return an exit code with a value 128 + 2 = 130.</p>

        <pre><code class="language-bash hljs">$ ^C
$ echo $?
130</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu" class="tag">ubuntu</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/bash-script" class="tag">bash script</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/exit-code" class="tag">exit code</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-11" /><category term="linux" /><category term="ubuntu" /><category term="bash script" /><category term="exit code" /><summary type="html"><![CDATA[Learn about exit codes in Bash scripts, including a comprehensive list of common exit codes and their meanings to help you troubleshoot and debug your bash scripts effectively.]]></summary></entry><entry xml:lang="en"><title type="html">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04" /><published>2024-06-10T12:00:00+00:00</published><updated>2024-06-10T12:00:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/dotnet.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Step 1: Get the PowerShell version 7.4.2 release</h4>

        <p>Download a release version of PowerShell <code>powershell-7.4.2-linux-x64.tar.gz
        </code> from <a href="https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz">Github</a></p>

        <pre><code class="language-bash hljs">wget https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz</code></pre>

        <p>Create powershell directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/powershell-7.4.2</code></pre>

        <p>Extract the files in <code>powershell-7.4.2-linux-x64.tar.gz</code> to <code>/opt/powershell-7.4.2</code></p>

        <pre><code class="language-bash hljs">sudo tar -zxf powershell-7.4.2-linux-x64.tar.gz -C /opt/powershell</code></pre>

        <p>Install PowerShell using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/pwsh pwsh /opt/powershell-7.4.2/pwsh 10</code></pre>

        <h4>Step 2: Install Prerequisite Packages</h4>

        <p>Install the prerequisite packages for running <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">sudo apt install -y libicu-dev</code></pre>

        <p>Install the prerequisite packages for building powershell from source.</p>

        <pre><code class="language-bash hljs">sudo apt install -y git</code></pre>

        <p>Download dotnet SDK Version 8.0.204 from <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">Microsoft</a></p>

        <pre><code class="language-bash hljs">wget https://download.visualstudio.microsoft.com/download/pr/0a1b3cbd-b4af-4d0d-9ed7-0054f0e200b4/4bcc533c66379caaa91770236667aacb/dotnet-sdk-8.0.204-linux-x64.tar.gz</code></pre>

        <p>Create dotnet directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Extract the files to <code>/opt</code> directory.</p>

        <pre><code class="language-bash hljs">sudo tar -zxf dotnet-sdk-8.0.204-linux-x64.tar.gz -C /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Install dotnet using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/dotnet dotnet /opt/dotnet-sdk-8.0.204/dotnet 10</code></pre>

        <h4>Step 3: Download PowerShell's sources</h4>

        <p>Clone the PowerShell repository from <a href="https://github.com/PowerShell/PowerShell">Github</a>.</p>

        <pre><code class="language-bash hljs">git clone https://github.com/PowerShell/PowerShell.git</code></pre>

        <p>Check out a tag version 7.4.2:</p>

        <pre><code class="language-bash hljs">git checkout tags/v7.4.2</code></pre>

        <p>Change directory to powershell source directory.</p>

        <pre><code class="language-bash hljs">cd PowerShell-7.4.2</code></pre>

        <h4>Step 4: Build PowerShell's sources</h4>

        <p>Run <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">pwsh</code></pre>

        <p>Then run the following commands for building the PowerShell source.</p>

        <pre><code class="language-bash hljs">Import-Module ./build.psm1
Start-PSBuild</code></pre>
        
        <p>If everything went right, PowerShell is now built. The <code>Start-PSBuild</code> script will output the location of the executable:</p>

        <pre><code class="language-bash hljs">./src/powershell-unix/bin/Debug/net8.0/linux-x64/pwsh</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/powershell" class="tag">powershell</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/dotnet" class="tag">dotnet</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/building-source-code" class="tag">building source code</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="linux" /><category term="ubuntu 22.04" /><category term="powershell" /><category term="dotnet" /><category term="building source code" /><summary type="html"><![CDATA[Learn how to build PowerShell version 7.4.2 on Ubuntu 22.04 with step-by-step instructions and guidelines. Master the process of compiling and installing PowerShell on your Ubuntu system.]]></summary></entry><entry xml:lang="en"><title type="html">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/" rel="alternate" type="text/html" title="Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04" /><published>2024-06-10T06:50:00+00:00</published><updated>2024-06-10T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p><code>update-alternatives</code> is a command line utility in Linux systems that is used to maintain symbolic links for determining the default commands. It is commonly used in systems with multiple versions of the same command installed, such as different versions of Java, Python, or editors like Vim or Emacs. <code>update-alternatives</code> allows you to choose which version of the command should be used as the default system-wide.</p>

        <p>When you install multiple versions of a command or program, they are usually installed in different directories. <code>update-alternatives</code> creates symbolic links in the system's <code>bin</code> directories (e.g., <code>/usr/bin</code>) to point to the specific version of the program you want to use. These symbolic links are used as the default command when you run the command's name in the terminal.</p>

        <p>For example, suppose you have multiple versions of Java installed on your system, such as Java 17, 21, and 22. If you want to use Java 21 as the default Java version, you can use the <code>update-alternatives</code> command to create a symbolic link for the <code>java</code> command to point to the Java 21 binary. This will make Java 21 the default version that is used when you run <code>java</code> in the terminal.</p>

        <p>Download multiple versions of Java using <code>wget</code> command.</p>

        <pre><code class="language-bash hljs">wget https://download.oracle.com/java/22/latest/jdk-22_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</code></pre>
        
        <p>Extract it to <code>opt</code> directory</p>

        <pre><code class="language-bash hljs">sudo tar -zxf jdk-22_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-21_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-17_linux-x64_bin.tar.gz -C /opt</code></pre>
        
        <p>Install multiple versions of Java using <code>update-alternatives</code> command with <code>--install</code> option.</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/java java /opt/jdk-17.0.11/bin/java 10
sudo update-alternatives --install /usr/bin/java java /opt/jdk-21.0.3/bin/java 20
sudo update-alternatives --install /usr/bin/java java /opt/jdk-22.0.1/bin/java 30</code></pre>
        
        <p><code>/usr/bin/java</code> is the path of the symlink, <code>java</code> is the name of the symlink, <code>/opt/jdk-17.0.11/bin/java</code> is the path of the binary file for which you want to create the symbolic link, <code>10</code> is the priority.</p>

        <p>To list all entries of alternatives in the system, use</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --get-selections</code></pre>
        
        <p>To list all alternatives of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --list java</code></pre>
        
        <p>In automatic mode, the alternatives pointed to java version which have the highest priority. To switch to automatic mode, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --auto java</code></pre>
        
        <p>To remove an alternative of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --remove java /opt/jdk-17.0.11/bin/java</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/update-alternatives" class="tag">update-alternatives</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="linux" /><category term="ubuntu 22.04" /><category term="update-alternatives" /><summary type="html"><![CDATA[Learn how to effectively manage multiple versions of packages using the update-alternatives command in Ubuntu 22.04. This command allows you to easily switch between different versions of software packages on your system.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Git Merge and Git Rebase</title><link href="https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase/" rel="alternate" type="text/html" title="Difference Between Git Merge and Git Rebase" /><published>2024-05-04T06:50:00+00:00</published><updated>2024-05-04T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Git Merge and Git Rebase</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 04, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Managing repository history is one of the critical parts of keeping your code base scalable. Many approaches might be helpful in one case and not work in another.</p>
        
        <p><code>git rebase</code> and <code>git merge</code> are two git utilities that are designed to combine commit history from one branch to another branch.</p>

        <h4>Git Merge</h4>

        <p><code>git merge</code> is a command used to combine changes from two or more branches into a single branch. When a merge is performed, Git creates a new commit that incorporates the changes from both branches. The resulting commit history looks like a tree, with multiple branches merging into a single trunk.</p>

        <p>To perform a merge, first, ensure you are on the branch that you want to merge changes into (e.g., <code>main</code> branch). Then, run the following command:</p>

        <pre><code class="language-bash hljs">git merge &lt;branch-name&gt;</code></pre>

        <p>where <code>&lt;branch-name&gt;</code> is the name of the branch containing the changes you want to merge. Git will create a new merge commit that combines the changes from both branches. If there are conflicts between the changes in the two branches, Git will prompt you to resolve them before the merge can be completed.</p>

        <p>There are two types of merge:</p>

        <ol>
            <li>Fast-forward merge</li>
            <li>Three-way merge</li>
        </ol>

        <h5 class="post-subtitle">Fast-forward Merge</h5>

        <p>Imagine we are having two branches:</p>

        <ol>
            <li>Parent branch (<code>main</code>)</li>
            <li>Child branch (<code>feature</code>)</li>
        </ol>

        <p>We made changes and commits to the <code>main</code> branch.</p>

        <p>At the second commit on <code>main</code> branch the <code>feature</code> branch got created, and then we made changes and commits to the <code>feature</code> branch only. We didn't make any changes and commits on the <code>main</code> branch.</p>

        <p>If there will be only two branches <code>main</code> and <code>feature</code>, and no new changes and commits have been performed on your <code>main</code> branch since the <code>feature</code> branch got created in this case git will perform fast-forward merge.</p>

        <p>In the Fast-forward merge, git simply moves the pointer from the <code>main</code> branch to the last commit of the <code>feature</code> branch.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-28.jpg" alt="Fast-forward Merge">
        </figure>

        <p>In the Fast-forward merge, there is no chance of conflicts because the changes and commits are in the <code>feature</code> branch only, not on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projecta && cd projecta

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add a file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add some content to the home.html
echo "&lt;p&gt;content for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>

        <p>Now, there are two commits available at the <code>main</code> branch. To confirm that we'll check the log using <code>git log</code> command</p>

        <p>Now we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add some content again to the home.html
echo "&lt;p&gt;content 2 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 3"

# add some content again to the home.html
echo "&lt;p&gt;content 3 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 4"</code></pre>
        
        <p>Now, there will be four commits available at the <code>feature</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <p>Switch back to the <code>main</code> branch and merge the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>Now, there will be four commits available at the <code>main</code> branch.</p>

        <h5 class="post-subtitle">Three-way Merge</h5>

        <p>Three-way merge is a common merging strategy used in Git to combine changes from two different branches or commits into a single unified result. It is designed to handle situations where multiple branches have made conflicting changes to the same file or lines of code.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-27.jpg" alt="Three-way Merge">
        </figure>

        <p>When performing a three-way merge, Git identifies three versions of the code:</p>

        <ol>
            <li>The common ancestor: This is the base version of the code that both branches originally diverged from. It represents the last common commit between the two branches.</li>
            <li>The ours version: This represents the version of the code in the branch you are currently on (usually the branch you are merging into).</li>
            <li>The theirs version: This represents the version of the code in the branch you are merging in (usually the branch being merged into the current branch).</li>
        </ol>

        <p>Git uses these three versions of the code to intelligently merge the changes. It compares the differences between the common ancestor and the ours version and also between the common ancestor and the theirs version. Then, it combines these changes, considering both sets of modifications, to create a merged version of the file.</p>

        <p>During the merge process, if there are conflicting changes (i.e., changes that overlap and cannot be automatically merged), Git will mark those conflicts and pause the merge. It prompts the user to manually resolve the conflicts by editing the affected file(s) to choose which changes to keep. Once the conflicts are resolved, the user can complete the merge by committing the changes.</p>

        <p>Now, we'll create two files named <code>home.html</code> and <code>about.html</code> and create two commits.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectb && cd projectb

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>  

        <p>Now, there are two commits available at the <code>main</code> branch.</p>
        
        <p>Next we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"</code></pre>
        
        <p>Then there will be a total of four commits at the <code>feature</code> branch. Two commits from the <code>main</code> branch and the other two commits from <code>feature</code> branch i.e. the child branch.</p>

        <p>Now we'll switch back to the <code>main</code> branch and create a file <code>contact.html</code> on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>So, There will be three commits available at the <code>main</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>A new commit will be created. That commit is considered as the merge commit.</p>

        <h4>Git Rebase</h4>

        <p>Rebasing is often used as an alternative to merging. Rebasing a branch updates one branch with another by applying the commits of one branch on top of the commits of another branch. For example, if working on a <code>feature</code> branch that is out of date with a <code>main</code> branch, rebasing the feature <code>feature</code> onto <code>main</code> will allow all the new commits from <code>main</code> to be included in <code>feature</code>.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-29.jpg" alt="Rebase">
        </figure>

        <p>For the above example, this is what it looks like from the command line:</p>

        <pre><code class="language-bash hljs">git rebase feature main</code></pre>

        <p>However, it is more common to first checkout a branch and then run the rebase command with the name of the branch you wish to rebase on to:</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>The golden rule of <code>git rebase</code> is to never use it on public branches.</p>

        <p>For example, think about what would happen if you rebased <code>main</code> onto your <code>feature</code> branch. The rebase moves all of the commits in <code>main</code> onto the tip of <code>feature</code>. The problem is that this only happened in your repository. All of the other developers are still working with the original <code>main</code>.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectc && cd projectc

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"

# create feature branch and switch to it
git checkout -b feature

# add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"

# switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>Now we come back to the <code>feature</code> branch, but we want to have a linear history, moving the <code>feature</code> to the tip of <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>To confirm that we'll check the log using <code>git log</code> command</p>

        <pre><code class="language-bash hljs">git log --graph</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-30.png" alt="linear history">
        </figure>

        <p>Having a linear history, we can do a fast-forward merge by merging the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout main
git merge feature</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-merge" class="tag">git merge</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-rebase" class="tag">git rebase</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-init" class="tag">git init</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-add" class="tag">git add</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-commit" class="tag">git commit</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-log" class="tag">git log</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-checkout" class="tag">git checkout</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-merge" class="tag">git merge</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-switch" class="tag">git switch</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-log" class="tag">git log</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-04" /><category term="git" /><category term="git merge" /><category term="git rebase" /><category term="git init" /><category term="git add" /><category term="git commit" /><category term="git log" /><category term="git checkout" /><category term="git merge" /><category term="git switch" /><category term="git log" /><summary type="html"><![CDATA[Understanding the difference between Git merge and Git rebase is crucial for effective version control and collaboration. Learn the distinctions between these two essential Git commands.]]></summary></entry><entry xml:lang="en"><title type="html">List of Common WSL Commands</title><link href="https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands/" rel="alternate" type="text/html" title="List of Common WSL Commands" /><published>2024-05-01T07:28:00+00:00</published><updated>2024-05-01T07:28:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">List of Common WSL Commands</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 01, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/wsldistribution.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Here is a list of some of the most common WSL commands:</p>

        <ul>
            <li><code>wsl</code>: This command will start a new WSL session</li>
            <li><code>wsl -l</code>: This command will list all of the installed WSL distributions</li>
            <li><code>wsl --list --online</code>: This command will list all of the available WSL distributions</li>
            <li><code>wsl --list --running</code>: This command will list all of the running WSL distributions</li>
            <li><code>wsl -d &lt;distribution name&gt;</code>: This command will run the specified distribution</li>
            <li><code>wsl --install &lt;distribution name&gt;</code>: This command will install the specified distribution</li>
            <li><code>wsl --unregister &lt;distribution name&gt;</code>: This command will remove the specified distribution to free up the disk space</li>
            <li><code>wsl --shutdown</code>: This command will shut down all running WSL sessions</li>
            <li><code>wsl --terminate &lt;distribution name&gt;</code>: This command will terminate the WSL session for the specified distribution</li>
            <li><code>wsl --set-version &lt;version number&gt;</code>: This command will set the default WSL version</li>
            <li><code>wsl --status</code>:  This command will display the status of all running WSL sessions</li>
            <li><code>wsl --import &lt;distribution name&gt; &lt;tarball path&gt;</tarball></code>: This command will import a new WSL distribution from a tarball file</li>
            <li><code>wsl --mount &lt;source path&gt; &lt;source path&gt;</code>: This command will mount a Windows file system path to a WSL mount point</li>
            <li><code>wsl --unmount &lt;mount point&gt;</code>: This command will unmount a WSL mount point</li>
            <li><code>wsl --default &lt;distribution name&gt;</code>: This command will set the default WSL distribution</li>
        </ul>

        <p>In WSL, your Windows drives are mounted under the <code>/mnt</code> directory. So, for example, your C drive would be available at <code>/mnt/c/</code>. <code>cd /mnt/c/Users/&lt;YourWindowsUsername&gt;/</code></p>

        <p>For WSL 2, you can access the Linux file system by navigating to <code>\\wsl$\&lt;DistributionName&gt;</code> in File Explorer.</p>

        <p>WSL configurations can be modified by editing the file: <code>C:\Users\&lt;YourWindowsUsername&gt;\.wslconfig</code>.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/windows" class="tag">windows</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/wsl" class="tag">wsl</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-01" /><category term="linux" /><category term="windows" /><category term="wsl" /><summary type="html"><![CDATA[Looking for a quick reference guide to WSL commands? Look no further! Our website provides a comprehensive list to help you navigate the Windows Subsystem for Linux effortlessly.]]></summary></entry></feed>