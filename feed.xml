<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/" rel="alternate" type="text/html" /><updated>2024-04-21T08:59:01+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">Difference Between Git Pull and Git Fetch</title><link href="https://hemimorphite.github.io/2024/04/21/difference-between-git-pull-and-git-fetch/" rel="alternate" type="text/html" title="Difference Between Git Pull and Git Fetch" /><published>2024-04-21T08:10:00+00:00</published><updated>2024-04-21T08:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/21/difference-between-git-pull-and-git-fetch</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/21/difference-between-git-pull-and-git-fetch/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Git Pull and Git Fetch</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 21, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Create a repository on Github</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-18.jpg" alt="Create a repository on Github">
        </figure>

        <p>Generate a personal access token on GitHub to authenticate the access to the GitHub repo. Navigate to your Github <b>account settings</b>, then <b>Developer Settings</b>. Click the <b>Personal access tokens</b> menu, then click <b>Generate new token</b>.</p>

        <p>Enter a name for the token under <b>Token Name</b>, choose the expiry time. Under the <b>Repository access</b> section choose <b>only selected repositories</b>. Click the "Select Repositories" button and choose the repository created. Under the "Permissions" section expand "Repository Permissions". Scroll down to "Contents" and select "Access: Read and Write". Scroll down to the bottom and click Generate token.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-19.jpg" alt="Generate a personal access token on GitHub">
        </figure>

        <p>Then create a new local repository</p>  

        <pre><code class="language-bash hljs">mkdir fantastic-blog && cd fantastic-blog
git init --initial-branch=main</code></pre>

        <p>Create a new file <code>home.html</code> with contents</p>

        <pre><code class="language-bash hljs">touch home.html
echo "&lt;h1&gt;Blog Header&lt;/h1&gt;" > home.html</code></pre>
        
        <p>Add <code>home.html</code> to the repository staging area and create a commit</p>
        
        <pre><code class="language-bash hljs">git add home.html
git commit -m "added home.html to the repo"</code></pre>
        
        <p>Create a remote branch and push the local repo to remote repo</p>
        
        <pre><code class="language-bash hljs">git remote add origin https://github.com/chonkarexsaurus/fantastic-blog.git
git push origin main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-24.png" alt="create a local repository">
        </figure>

        <p>Now both the local and remote repositories are in sync.</p>

        <p>Update the <code>home.html</code> file in the Github repository by adding a <code>&lt;p&gt;paragraph one&lt;/p&gt;</code> in the file.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-20.jpg" alt="update remote repository">
        </figure>

        <p>Now the local repository has 1 commit but the remote repository already has 2 commits.</p>
        
        <p>Download the latest changes by using <code>git fetch</code> command.</p>

        <pre><code class="language-bash hljs">git fetch origin</code></pre>
        
        <p>Now that you've downloaded the latest changes, you can compare your local branch to remote branch</p>
        
        <pre><code class="language-bash hljs">git diff main origin/main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-21.jpg" alt="fetch remote repository">
        </figure>

        <p>To approve the changes and merge them into your local <code>main</code> branch use <code>git merge</code> command:</p>

        <pre><code class="language-bash hljs">git checkout main
git merge origin/main</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-22.jpg" alt="merge remote repository">
        </figure>

        <p>The <code>origin/main</code> and <code>main</code> branches now point to the same commit, and you are synchronized with the upstream developments.</p>

        <p>Let's add another line of code in our <code>home.html</code> file in the remote repository.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-23.jpg" alt="update remote repository">
        </figure>

        <p>Now there are 3 commits in the remote repository, and 2 commits in the local repository</p>

        <p>To synchronize your local repository with the central repository's <code>main</code> branch run <code>git pull</code> command.</p>

        <pre><code class="language-bash hljs">git pull origin main</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-25.jpg" alt="synchronize repository">
        </figure>

        <p>Difference between Git Fetch and Git Pull</p>

        <table class="table table-bordered border-primary">
            <thead>
                <th>Git Fetch</th>
                <th>Git Pull</th>
            </thead>
            <tbody>
            <tr>
                <td>Used to fetch all changes from the remote repository to the local repository without merging into the current working directory</td>
                <td>Brings the copy of all the changes from a remote repository and merges them into the current working directory</td>
            </tr>
            <tr>
                <td>Repository data is updated in the .git directory</td>
                <td>The working directory is updated directly</td>
            </tr>
            <tr>
                <td>Review of commits and changes can be done</td>
                <td>Updates the changes to the local repository immediately</td>
            </tr>
            <tr>
                <td>No possibility of merge conflicts</td>
                <td>Merge conflicts are possible if the remote and the local repositories have done changes at the same place</td>
            </tr>
            <tr>
                <td>Git fetch basically imports the commits to local branches so as to keep up-to-date that what everybody is working on</td>
                <td>Git Pull basically brings the local branch up-to-date with the remote copy that will also updates the other remote tracking branches</td>
            </tr>
            </tbody>
        </table>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-pull" class="tag">git pull</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-fetch" class="tag">git fetch</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-21" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="git pull" /><category term="git fetch" /><summary type="html"><![CDATA[Understand the key differences between Git pull and Git fetch. Learn when to use each command to effectively manage your Git repositories and collaborate with your team.]]></summary></entry><entry xml:lang="en"><title type="html">Tracking Branch in Git</title><link href="https://hemimorphite.github.io/2024/04/20/tracking-branch-in-git/" rel="alternate" type="text/html" title="Tracking Branch in Git" /><published>2024-04-20T15:38:00+00:00</published><updated>2024-04-20T15:38:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/20/tracking-branch-in-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/20/tracking-branch-in-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Tracking Branch in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 20, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>A tracking branch is a branch that is linked to a remote branch.</p>

        <p>A local branch can track a remote branch using <code>git branch</code> command with long option <code>--set-upstream-to=</code> or short option <code>-u</code> followed by a branch name. If no branch name is specified, then it defaults to the current branch. For example,</p>

        <pre><code class="language-bash hljs">git branch -u origin/issue-1</code></pre>

        <p>or longer option:</p>

        <pre><code class="language-bash hljs">git branch --set-upstream-to=origin/issue-1</code></pre>

        <p>When you clone a repository, it generally automatically creates a <code>main</code> branch that tracks <code>origin/main</code>. That's why <code>git push</code> and <code>git pull</code> work out of the box with no other arguments.</p>

        <p>You can Check out a local branch from a remote branch by creating what is called a tracking branch. Tracking branches are local branches that have a direct relationship to a remote branch. If you're on a tracking branch and type <code>git push</code>, Git automatically knows which server and branch to push to. Also, running <code>git pull</code> while on one of these branches fetches all the remote references and then automatically merges in the corresponding remote branch.</p>

        <pre><code class="language-bash hljs">git checkout --track origin/serverfix</code></pre>

        <p>That command creates a local <code>serverfix</code> branch with the same content of <code>origin/serverfix</code>, and makes it a tracking branch of <code>origin/serverfix</code>.</p>

        <p>To set up a local branch with a different name than the remote branch:</p>

        <pre><code class="language-bash hljs">git checkout -b sf --track origin/serverfix</code></pre>

        <p>That command creates a local <code>sf</code> branch with the same content of <code>origin/serverfix</code>, and makes it a tracking branch of <code>origin/serverfix</code>.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/tracking-branch" class="tag">tracking branch</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-20" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="tracking branch" /><summary type="html"><![CDATA[A tracking branch in Git is associated with a remote branch and allows you to easily push and pull changes. Learn how to set up and work with tracking branches effectively.]]></summary></entry><entry xml:lang="en"><title type="html">Clone Remote Branches in Git</title><link href="https://hemimorphite.github.io/2024/04/20/clone-remote-branches-in-git/" rel="alternate" type="text/html" title="Clone Remote Branches in Git" /><published>2024-04-20T08:16:00+00:00</published><updated>2024-04-20T08:16:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/20/clone-remote-branches-in-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/20/clone-remote-branches-in-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Clone Remote Branches in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 20, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Clone Only Single, Specific Remote Branch in Git</h4>

        <p>To clone only single, specific a remote branch, use the <code>git clone</code> command followed by <code>--single-branch</code> flag, <code>--branch</code> flag and the remote repository url.</p>

        <pre><code class="language-bash hljs">git clone --branch &lt;remote-branch-name&gt; --single-branch &lt;remote-repo-url&gt;</code></pre>

        <h4>Clone All Remote Branches in Git</h4>

        <p>The <code>git clone</code> command is used to create a copy of a remote repository on your local machine. By default, this command only clones the <code>main</code> branch (usually <code>master</code> or <code>main</code>).</p>

        <pre><code class="language-bash hljs">git clone &lt;remote-repo-url&gt;</code></pre>

        <p>When you run <code>git clone</code> without followed by flags, the following actions occur:</p>

        <ol>
            <li>A new folder called <code>repo</code> is made</li>
            <li>It is initialized as a Git repository</li>
            <li>A remote named <code>origin</code> is created, pointing to the URL you cloned from
            </li>
            <li>All of the repository's files and commits are downloaded there</li>
            <li>The default branch is checked out</li>
        </ol>

        <p>After cloning, navigate to the directory of the cloned repository:</p>

        <pre><code class="language-bash hljs">cd &lt;repository-name&gt;</code></pre>

        <p>To fetch all branches from the remote, you can use:</p>

        <pre><code class="language-bash hljs">git fetch --all</code></pre>

        <p>This command fetches all objects from the remote repository but doesn't create local branches for them.</p>

        <p>After fetching, you can show all branches, including remote ones by <code>git branch -a</code> command.</p>

        <p>To create local branches from remote branches, you have to check out each branch:</p>

        <pre><code class="language-bash hljs">git checkout -b &lt;local-branch-name&gt; &lt;origin/remote-branch-name&gt;</code></pre>

        <p>Manually checking out each branch can be tiresome if the repository has numerous branches. Here's a simple command to automate the process:</p>

        <pre><code class="language-bash hljs">for branch in `git branch -r | grep -v HEAD`;do
    git checkout -b $branch $branch
done</code></pre>
        
        <p>This command loops through each remote branch and creates a corresponding local branch.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/clone-branches" class="tag">clone branches</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-20" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="clone branches" /><summary type="html"><![CDATA[Learn how to effectively clone remote branches in Git, whether you need to clone all branches or just a specific branch. This guide provides step-by-step instructions on how to accomplish this task.]]></summary></entry><entry xml:lang="en"><title type="html">Working with Remote Repositories</title><link href="https://hemimorphite.github.io/2024/04/19/working-with-remote-repositories/" rel="alternate" type="text/html" title="Working with Remote Repositories" /><published>2024-04-19T03:50:00+00:00</published><updated>2024-04-19T03:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/19/working-with-remote-repositories</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/19/working-with-remote-repositories/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Working with Remote Repositories</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 19, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>URLs are long, complicated, and easy to mistype. It's much easier to give each remote a name. The <code>git remote</code> command lets us manage a list of remotes for each git repository.</p>

        <p>To add a new remote repository, you can use the <code>git remote add</code> command, followed by a remote name for the remote repository and remote repository URL.</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-repository-url&gt;</code></pre>

        <p>For example, to add a remote repository with the remote name <code>origin</code> and the URL <code>https://github.com/user/repo.git</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote add origin https://github.com/user/repo.git</code></pre>

        <p>To rename a remote repository, you can use the <code>git remote rename</code> command followed by the current remote name of the remote repository and the new remote name you want to assign.</p>

        <pre><code class="language-bash hljs">git remote rename &lt;old-remote-name&gt; &lt;new-remote-name&gt;</code></pre>

        <p>For example, to rename a remote repository with the shortname <code>origin</code> to <code>upstream</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote rename origin upstream</code></pre>

        <p>To remove a remote repository, you can use the <code>git remote remove</code> command followed by the remote name of the remote repository.</p>

        <pre><code class="language-bash hljs">git remote remove &lt;remote-name&gt;</code></pre>

        <p>For example, to remove a remote repository with the remote name <code>upstream</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote remove upstream</code></pre>

        <p>To fetch updates from a remote repository, you can use the <code>git fetch</code> command followed by the remote name of the remote repository. This command will download the latest changes from the remote repository without merging them into your local branch.</p>

        <pre><code class="language-bash hljs">git fetch &lt;remote-name&gt;</code></pre>

        <p>For example, to fetch updates from a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git fetch origin</code></pre>

        <p>To merge the fetched changes into your local branch, you can use the <code>git merge</code> command. However, a more convenient way to accomplish this is to use the <code>git pull</code> command, which fetches and merges the changes in a single step. To pull updates from a remote repository, use the <code>git pull</code> command followed by the remote name of the remote repository and the remote branch you want to pull from.</p>

        <pre><code class="language-bash hljs">git pull &lt;remote-name&gt; &lt;remote-branch-name&gt;</code></pre>

        <p>For example, to pull updates from the <code>main</code> branch of a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git pull origin main</code></pre>

        <p>To push changes to a remote repository, use the <code>git push</code> command followed by the remote name of the remote repository and the local branch name you want to push.</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;local-branch-name&gt;</code></pre>

        <p>For example, to push changes from your local <code>main</code> branch to a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git push origin main</code></pre>  

        <p>To check the status of remote branches, you can use the <code>git remote show</code> command, followed by the remote name of the remote repository. This command will display information about the remote branches, such as their status compared to your local branches and any new branches that have been added to the remote repository.</p>

        <pre><code class="language-bash hljs">git remote show &lt;remote-name&gt; &lt;remote-branch-name&gt;</code></pre>

        <p>For example, to check the status of remote branches for a remote repository with the remote name <code>origin</code>, you can use the following command:</p>

        <pre><code class="language-bash hljs">git remote show origin main</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/remote-repository" class="tag">remote repository</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-19" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="remote repository" /><summary type="html"><![CDATA[Learn how to effectively clone remote branches in Git, whether you need to clone all branches or just a specific branch. This guide provides step-by-step instructions on how to accomplish this task.]]></summary></entry><entry xml:lang="en"><title type="html">Git Refs, Git Heads and Git HEAD</title><link href="https://hemimorphite.github.io/2024/04/18/git-refs-git-heads-and-git-head/" rel="alternate" type="text/html" title="Git Refs, Git Heads and Git HEAD" /><published>2024-04-18T14:10:00+00:00</published><updated>2024-04-18T14:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/18/git-refs-git-heads-and-git-head</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/18/git-refs-git-heads-and-git-head/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Git Refs, Git Heads and Git HEAD</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 18, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>In Git, a <b>ref</b> is a human readable name that references a Git commit ID. A <b>ref</b> is essentially a pointer to a commit. Examples of refs are Git branch names such as <code>main</code> and <code>dev</code>. Another example of refs are Git tags such as <code>v0.1</code> or <code>v0.2</code>. You can think of each of these as a variable name that points to a commit ID. The commit ID that a ref points to is dynamic so it can change over time.</p>

        <p>Refs are stored in a special hidden location in your Git repository at the path <code>.git/refs/</code>.</p>

        <p>In Git, a <b>head</b> is a <b>ref</b> that points to the tip (latest commit) of a branch. You can view your repository's heads in the path <code>.git/refs/heads/</code>. In this path you will find one file for each branch, and the content in each file will be the commit ID of the tip (most recent commit) of that branch.</p>

        <p>For example, there is literally a file called <code>main</code> in that path that contains the commit ID of the tip (most recent commit) of the <code>main</code> branch. When you make a new commit on a branch or pull commits from a remote, the head file for that branch is always updated to reflect the commit ID of the tip (most recent commit) of the branch. In this way, your branch name ref always stays in sync with the most recent commit at the tip of the branch.</p>

        <p>Git refs and Git heads are simply pointers to commits, in the form of text files where the file name represents the name of the ref/head and the content is the commit ID that the ref points to.</p>

        <p>HEAD is a special ref that points to the commit you are currently working on - the currently checked out commit in your Git working directory. By default, you'll view the tip of the <code>main</code> branch on a repository, unless the <code>main</code> branch of your repository has a different name. The tip of the <code>main</code> branch is the most recent commit on the <code>main</code> branch of your codebase.</p>

        <p>You can find out where HEAD points to by opening the <code>.git/HEAD</code> file in your repository:</p>

        <pre><code class="language-bash hljs">cat .git/HEAD</code></pre>

        <p>Normally you will get something like this (branch name):</p>

        <pre><code class="language-bash hljs">ref: refs/heads/main</code></pre>

        <p>Git HEADs can represent a particular commit in the history of a project. This is because Git lets you check out different points in a repository's history to view how your project has evolved.</p>

        <p>We can check out a specific commit using the checkout command.</p>

        <pre><code class="language-bash hljs">git checkout 82a31ec32441cd06daa5e0397a73f4159cdaad4b</code></pre>

        <p>This command will check out a commit from our repository's history. This makes the HEAD does not point to a branch, but instead points to a specific commit or it is called a detached HEAD state. This means we are viewing a commit rather than a branch.</p>

        <p>You will get a commit ID by opening the <code>.git/HEAD</code> file:</p>

        <pre><code class="language-bash hljs">82a31ec32441cd06daa5e0397a73f4159cdaad4b</code></pre>

        <p>You can fix detached HEAD in Git by switching branches</p>

        <pre><code class="language-bash hljs">git checkout main</code></pre>

        <p>In Git, you can use any of the signs caret(^) or tilde(~) to go backward.</p>

        <p>The tilde(~) sign refers to the first parent in the commit history. <code>HEAD~</code> is always the same as HEAD^, similarly <code>HEAD~~</code> is always the same as <code>HEAD^^</code>, and so on.</p>

        <p>The caret(^) sign refer to the nth parent in the commit history. <code>HEAD^</code> is equivalent to <code>HEAD^1</code>.</p>

        <p>Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.</p>

        <pre><code class="language-bash hljs">G   H   I   J
\ /     \ /
 D   E   F
  \  |  / \
   \ | /   |
    \|/    |
     B     C
      \   /
       \ /
        A        


A =      = A^0
B = A^   = A^1     = A~1
C = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-head" class="tag">Git HEAD</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-refs" class="tag">Git Refs</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-heads" class="tag">Git Heads</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-18" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="Git HEAD" /><category term="Git Refs" /><category term="Git Heads" /><summary type="html"><![CDATA[Learn about Git Refs, Git Heads, and Git HEAD in version control systems. Understand the differences and how they can be used in your Git workflows. Explore the concepts of HEAD^ and HEAD~.]]></summary></entry><entry xml:lang="en"><title type="html">Branching in Git</title><link href="https://hemimorphite.github.io/2024/04/17/branching-in-git/" rel="alternate" type="text/html" title="Branching in Git" /><published>2024-04-17T16:55:00+00:00</published><updated>2024-04-17T16:55:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/17/branching-in-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/17/branching-in-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Branching in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 17, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Git Branches are one of the fundamental features that make Git so useful. Git Branches allow developers to create parallel versions of their codebase, where they can experiment with new features, make changes, and fix bugs without affecting the main codebase.</p>
        
        <p>To lists all the branches in the current Git repository (local braches and remote branches), you can use the <code>git branch</code> command</p>

        <pre><code class="language-bash hljs">git branch</code></pre>

        <p>To switch to the specified branch, you can use the <code>git branch</code> command followed by the branch name.</p>

        <pre><code class="language-bash hljs">git branch &lt;branch-name&gt;</code></pre>

        <p>To create a new branch with the specified name and switch to it, you can use the <code>git branch</code> command followed by <code>-b</code> flag and the branch name.</p>

        <pre><code class="language-bash hljs">git branch -b &lt;branch-name&gt;</code></pre>

        <p>To create a new local branch and push it to remote repository, you can use the <code>git branch</code> command and <code>git push</code> command.</p>

        <pre><code class="language-bash hljs">git checkout -b &lt;branch-name&gt;
git remote add &lt;remote-name&gt; &lt;remote-url&gt;
git push &lt;remote-name&gt; -u &lt;branch-name&gt;</code></pre>
        
        <p>To delete a branch, you can use the <code>git branch</code> command followed by <code>-d</code> flag and the branch name.</p>

        <pre><code class="language-bash hljs">git branch -d &lt;branch-name&gt;</code></pre>
        
        <p>To delete a remote branch on remote repository, you can use the <code>git branch</code> command and <code>git push</code> command.</p>

        <pre><code class="language-bash hljs">git checkout -d &lt;branch-name&gt;
git remote add &lt;remote-name&gt; &lt;remote-url&gt;
git push &lt;remote-name&gt; -u &lt;branch-name&gt;</code></pre>
        
        <p>To rename the local branch from the old name to the new name, you can use the <code>git branch</code> command followed by <code>-m</code> flag, the current branch name and the new branch name.</p>

        <pre><code class="language-bash hljs">git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;</code></pre>
        
        <p>To rename the upstream branch from the old name to the new name, you can use the <code>git push</code> command.</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-url&gt;
git push &lt;remote-name&gt; -d &lt;old-branch-name&gt;
git push &lt;remote-name&gt; -u &lt;new-branch-name&gt;</code></pre>
        
        <p>To list all local and remote branches from the master in the current Git repository, you can use the <code>git branch</code> command followed by <code>-a</code> flag.</p>

        <pre><code class="language-bash hljs">git branch -a</code></pre>
        
        <p>To list all remote branches in the current Git repository, you can use the <code>git branch</code> command followed by <code>-r</code> flag.</p>

        <pre><code class="language-bash hljs">git branch -r</code></pre>
        
        <p>To list all branches with the last commit message in the current directory, you can use the <code>git branch</code> command followed by <code>-v</code> flag.</p>

        <pre><code class="language-bash hljs">git branch -v</code></pre>
        
        <p>To list all branches that have been merged into the <code>main</code> branch, you can use the <code>git branch</code> command followed by <code>--merged</code> flag.</p>

        <pre><code class="language-bash hljs">git branch --merged</code></pre>
        
        <p>To list all branches that have not been merged into the default branches, you can use the <code>git branch</code> command followed by <code>--no-merged</code> flag.</p>

        <pre><code class="language-bash hljs">git branch --no-merged</code></pre>
        
        <p>To create a new local branch that matches name for a remote tracking branch, you can use the <code>git branch</code> command followed by <code>-t</code> flag, remote name and remote branch name.</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-url&gt;
git branch -t &lt;remote-name&gt;/&lt;remote-branch-name&gt;</code></pre>
  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github" class="tag">github</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/gitlab" class="tag">gitlab</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/branch" class="tag">branch</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-17" /><category term="git" /><category term="github" /><category term="gitlab" /><category term="branch" /><summary type="html"><![CDATA[Learn about branching in Git with this comprehensive guide. Understand how to create, switch to, merge, push, and delete branches using git branch commands.]]></summary></entry><entry xml:lang="en"><title type="html">Undo Changes in Git</title><link href="https://hemimorphite.github.io/2024/04/12/undo-changes-in-git-repository/" rel="alternate" type="text/html" title="Undo Changes in Git" /><published>2024-04-12T13:50:00+00:00</published><updated>2024-04-12T13:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/12/undo-changes-in-git-repository</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/12/undo-changes-in-git-repository/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Undo Changes in Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 12, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Sometimes you make a mistake and want to go back to a previous version. Here's how to rollback changes.</p>

        <h4>Undo Unstaged Changes</h4>

        <p>You made changes to a file, saved the file and not yet added the file to the staging area. Then you decide that you don't want to keep these changes.</p>

        <p>Here's a quick, real-world example of how to undo the unstaged changes of a file:</p>

        <pre><code class="language-bash hljs"># made a repo directory 
mkdir projectrepo && cd projectrepo

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add a file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add the new file to the Staging area
git add page1.html

# create a Commit
git commit -m "create page1"

# make some changes to the page1.html
echo "&lt;p&gt;content for page 1&lt;/p&gt;" &gt;&gt; page1.html

# the content of page1.html after changes
cat page1.html

# undo the changes
git checkout page1.html
# or
git restore page1.html

# the content of page1.html after undo changes
cat page1.html</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-01.jpg" alt="Undo Unstaged Changes">
        </figure>

        <h4>Undo Staged Changes</h4>

        <p>You made changes to a file, saved the file and added the file to the staging area. Then you decide that you don't want to keep these changes.</p>
        
        <p>Here's a quick, real-world example of how to undo the unstaged changes of a file:</p>

        <pre><code class="language-bash hljs"># made a repo directory 
mkdir projectrepo && cd projectrepo

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add a file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add the new file to the Staging area
git add page1.html

# create a Commit
git commit -m "create page1"

# make some changes to the page1.html
echo "&lt;p&gt;content for page 1&lt;/p&gt;" &gt;&gt; page1.html

# the content of page1.html after changes
cat page1.html

# add the modified file to the Staging area
git add page1.html

# remove the modified file from the staging area
git reset page1.html
# or
git restore --staged page1.html

# undo the changes
git restore page1.html

# the content of page1.html after undo changes
cat page1.html</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-02.jpg" alt="Undo staged Changes">
        </figure>

        <h4>Remove Commits and Keep the Changes and Keep the Untracked Files</h4>
        
        <p>You made commits. Then you decide that you want to remove several previous commits.</p>

        <p>Here's a quick, real-world example of how to undo the unstaged changes of a file:</p>

        <pre><code class="language-bash hljs"># made a repo directory 
mkdir projectrepo && cd projectrepo

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add first file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add the first file to the Staging area
git add page1.html

# create first Commit
git commit -m "create page1"

# add second file
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add the second file to the Staging area
git add page2.html

# create second Commit
git commit -m "create page2"

# add third file
touch page3.html && echo "&lt;h1&gt;Header for page 3&lt;/h1&gt;" &gt; page3.html

# add the third file to the Staging area
git add page2.html

# create third Commit
git commit -m "create page3"

# make some changes to the page1.html
echo "&lt;p&gt;content for page 1&lt;/p&gt;" &gt;&gt; page1.html

# the content of page1.html after changes
cat page1.html

# add the modified file to the Staging area
git add page1.html

# create forth Commit
git commit -m "content page1"

# list all files
ls

# view the commit history
git log

# remove the last three commits
git reset e1a3b1434e3a146d36bb4ba3f587ba752c5cf48b
# Or
git reset HEAD~3

# list all files and page2.html and page2.html still exist
ls

# the changes of page1.html still exist
cat page1.html

# view the commit history and the three commits are removed
git log</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-03.jpg" alt="Remove Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-04.jpg" alt="Remove Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-05.jpg" alt="Remove Commits">
        </figure>

        <h4>Remove Commits and Undo Changes And Remove the Untracked Files Permanently</h4>
                
        <p>You made commits. Then you decide that you want to remove several previous commits and undo the changes and remove the untracked files permanently.</p>

        <p>Here's a quick, real-world example of how to undo the unstaged changes of a file:</p>

        <pre><code class="language-bash hljs"># made a repo directory 
mkdir projectrepo && cd projectrepo

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add first file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add the first file to the Staging area
git add page1.html

# create first Commit
git commit -m "create page1"

# add second file
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add the second file to the Staging area
git add page2.html

# create second Commit
git commit -m "create page2"

# add third file
touch page3.html && echo "&lt;h1&gt;Header for page 3&lt;/h1&gt;" &gt; page3.html

# add the third file to the Staging area
git add page2.html

# create third Commit
git commit -m "create page3"

# make some changes to the page1.html
echo "&lt;p&gt;content for page 1&lt;/p&gt;" &gt;&gt; page1.html

# the content of page1.html after changes
cat page1.html

# add the modified file to the Staging area
git add page1.html

# create forth Commit
git commit -m "content page1"

# list all files
ls

# view the commit history 
git log

# remove the last three commits and Undo the changes
git reset 31207f129056d79913cae19606b273606ab072b8 && git restore .
# Or
git reset HEAD~3 && git restore .
# Or
git reset --hard

# remove untracked files permanently
git clean -df

# list all files
ls

# view content of page1.html
cat page1.html

# view the commit history and the three commits are removed
git log</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-03.jpg" alt="Remove Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-06.jpg" alt="Remove Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-07.jpg" alt="Remove Commits">
        </figure>

        <h4>Undo a Commit (Remove Created Files and Changes in the Commit) Without Remove the Commit History</h4>
                        
        <p>You made a commit. Then you decide that you want to undo a commit.</p>

        <p>Here's a quick, real-world example of how to undo the unstaged changes of a file:</p>

        <pre><code class="language-bash hljs"># made a repo directory 
mkdir projectrepo && cd projectrepo

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add first file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add the first file to the Staging area
git add page1.html

# create first Commit
git commit -m "create page1"

# add second file
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add the second file to the Staging area
git add page2.html

# create second Commit
git commit -m "create page2"

# add third file
touch page3.html && echo "&lt;h1&gt;Header for page 3&lt;/h1&gt;" &gt; page3.html

# add the third file to the Staging area
git add page2.html

# create third Commit
git commit -m "create page3"

# make some changes to the page1.html
echo "&lt;p&gt;content for page 1&lt;/p&gt;" &gt;&gt; page1.html

# add the modified file to the Staging area
git add page1.html

# create forth Commit
git commit -m "content page1"

# view the commit history 
git log

# undo the third commit and ctrl + X
git revert 1bfe6eb289196beda543c44a4cfdf30eec331475

# view the commit history
git log

# list all files and file page2.html is removed
ls</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-09.jpg" alt="Undo Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-10.jpg" alt="Undo Commits">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/git-11.jpg" alt="Undo Commits">
        </figure>

        <p>To recover the removed files and changes in the third commit is by reverting back</p>      

        <pre><code class="language-bash hljs"># undo the revert
git revert 8d4c1ddf0cb02fcbdbd2820af5ee74594289384f

# list all files and file page2.html is back
ls</code></pre>
        
        <figure class="post-figure">
            <img src="/assets/images/git-12.jpg" alt="Undo Commits">
        </figure>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/undo-changes" class="tag">undo changes</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-12" /><category term="git" /><category term="undo changes" /><summary type="html"><![CDATA[Learn how to undo local changes, specific commits, and last commits in Git through this comprehensive guide. Master the commands and steps to keep your projects clean and error-free.]]></summary></entry><entry xml:lang="en"><title type="html">The Three-Tiered Architecture of Git</title><link href="https://hemimorphite.github.io/2024/04/11/the-three-tiered-architecture-of-git/" rel="alternate" type="text/html" title="The Three-Tiered Architecture of Git" /><published>2024-04-11T08:30:00+00:00</published><updated>2024-04-11T08:30:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/11/the-three-tiered-architecture-of-git</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/11/the-three-tiered-architecture-of-git/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">The Three-Tiered Architecture of Git</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/threetieredgit.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Git has a three-stage architecture, consisting of the working directory, the staging area, and the repository.</p>

        <h4>Working Directory</h4>

        <p>The working directory is basically an area, where developers make changes to their code. When a developer modifies or adds or removes a file, the changes are made in the working directory.</p>

        <h4>Staging Area</h4>

        <p>Staging Area is used to prepare changes before they are committed to the repository. Developers can selectively choose which changes they want to include in the next commit by adding them to the staging area. If developers want certain files not to go for the commit, then don't add those files to the staging area.</p>

        <h4>Repository</h4>

        <p>The repository is where Git stores the history of changes made to the codebase. It contains all versions of the codebase, including the current version and all previous versions. When a developer makes a commit, Git takes the changes from the staging area and creates a snapshot of the project, which is then stored in the repository.</p>
        
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/three-tier-architecture" class="tag">three-tier architecture</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-11" /><category term="git" /><category term="three-tier architecture" /><summary type="html"><![CDATA[The three-tiered architecture of Git is a fundamental concept that underpins how Git works. Understanding this architecture can help you make the most out of your version control system.]]></summary></entry><entry xml:lang="en"><title type="html">Local Repository vs Remote Repository</title><link href="https://hemimorphite.github.io/2024/04/11/local-repository-vs-remote-repository/" rel="alternate" type="text/html" title="Local Repository vs Remote Repository" /><published>2024-04-11T07:30:00+00:00</published><updated>2024-04-11T07:30:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/11/local-repository-vs-remote-repository</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/11/local-repository-vs-remote-repository/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Local Repository vs Remote Repository</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/gitrepository.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Local Repository</h4>

        <p>A local repository is hosted on a local machine for an individual user.</p>

        <p>Some essential Git commands for working with a local repository:</p>

        <p>1. Set Git configuration values like username and email on a global level:</p>

        <pre><code class="language-bash hljs">git config --global user.name "John Doe"
git config --global user.email johndoe@example.com</code></pre>

        <p>2. Initialize a new local repository:</p>

        <pre><code class="language-bash hljs">git init</code></pre>

        <p>3. Add files or directories to the staging area:</p>

        <pre><code class="language-bash hljs">git add &lt;file1/directory1&gt; &lt;file2/directory2&gt;</code></pre>
        
        <p>4. Remove files or directories from a Git repository:</p>

        <pre><code class="language-bash hljs"># remove files
git rm &lt;file1&gt; &lt;file2&gt;

# remove directories
git rm -rf &lt;directory1&gt; &lt;directory2&gt;</code></pre>

        <p>5. View the state of the working directory and the staging area:</p>

        <pre><code class="language-bash hljs">git status</code></pre>

        <p>6. Commit changes to the local repository:</p>

        <pre><code class="language-bash hljs">git commit -m "Commit message"</code></pre>

        <p>7. View the commit history:</p>

        <pre><code class="language-bash hljs">git log</code></pre>
        
        <p>8. Create a new branch:</p>

        <pre><code class="language-bash hljs">git branch &lt;branch-name&gt;</code></pre>
        
        <p>9. Switch to a different branch:</p>

        <pre><code class="language-bash hljs">git checkout &lt;branch-name&gt;</code></pre>
        
        <h4>Remote Repository</h4>

        <p>A remote repository is hosted on a remote (this could be on the internet or an off-site server; it could even be the same machine in a different path) and is shared among multiple team members.</p>
        
        <p>Some essential Git commands for working with a remote repository:</p>
        
        <p>1. Clone a remote repository:</p>

        <pre><code class="language-bash hljs">git clone &lt;remote-url&gt;</code></pre>
        
        <p>2. Add a remote repository:</p>

        <pre><code class="language-bash hljs">git remote add &lt;remote-name&gt; &lt;remote-url&gt;</code></pre>

        <p>3. Push local commits to a remote repository:</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;branch-name&gt;</code></pre>

        <p>4. Pull the latest changes from a remote repository:</p>

        <pre><code class="language-bash hljs">git pull &lt;remote-name&gt; &lt;branch-name&gt;</code></pre>

        <p>5. Fetch the latest changes from a remote repository:</p>

        <pre><code class="language-bash hljs">git fetch &lt;remote-name&gt;</code></pre>

        <p>6. Create a new branch in the remote repository:</p>

        <pre><code class="language-bash hljs">git push &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/local-repository" class="tag">local repository</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/remote-repository" class="tag">remote repository</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-11" /><category term="git" /><category term="local repository" /><category term="remote repository" /><summary type="html"><![CDATA[Understand the differences between local repository and remote repository in Git. Learn how to effectively manage your code and collaborate with teams using Git.]]></summary></entry><entry xml:lang="en"><title type="html">Deploy a Jekyll Site to Github Pages</title><link href="https://hemimorphite.github.io/2024/04/10/deploy-a-jekyll-site-to-github-pages/" rel="alternate" type="text/html" title="Deploy a Jekyll Site to Github Pages" /><published>2024-04-10T13:30:00+00:00</published><updated>2024-04-10T13:30:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/10/deploy-a-jekyll-site-to-github-pages</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/10/deploy-a-jekyll-site-to-github-pages/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Deploy a Jekyll Site to Github Pages</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/githubpages.png" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Create a new repository on Github by clicking the new button</p>
        
        <figure class="post-figure">
            <img src="/assets/images/githubpages-01.png" alt="Create a new repository">
        </figure>

        <p>Your repository must be named <code>&lt;username&gt;.github.io</code> and must be public. Then click Create Repository button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-02.png" alt="repository name">
        </figure>

        <p>Fork the <a href="https://github.com/daattali/beautiful-jekyll" target="_blank">Beautiful Jekyll repo</a>:</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-03.png" alt="Fork repository">
        </figure>

        <p>Rename the repository name to <code>&lt;username&gt;.github.io</code> and click Create Fork button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-04.png" alt="Create Fork">
        </figure>

        <p>Click on the repository settings tab.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-05.png" alt="Setting repository">
        </figure>

        <p>From the left-hand side menu, click Pages under the Code and Automation section.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-06.png" alt="Pages menu">
        </figure>

        <p>In the Build and Deployment section, choose the branch (i.e. <code>master</code>) from which you would like GitHub Pages to deploy your website and click save button.</p>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-07.png" alt="Choose branch to publish Github Pages">
        </figure>

        <p>Edit the <code>_config.yml</code> file to change any settings you want. To edit the file, first click on it to view the file, and on the next page click on the pencil icon to edit it. After changing the settings, click the green Commit changes button to save these edits.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/githubpages-08.png" alt="Edit the _config.yml">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-09.png" alt="Edit button">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-10.png" alt="Commit Changes">
        </figure>

        <figure class="post-figure">
            <img src="/assets/images/githubpages-11.png" alt="Commit Changes">
        </figure>

        <p>You can now view your site at https://chonkarexsaurus.github.io.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/jekyll" class="tag">jekyll</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/github-pages" class="tag">github pages</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-10" /><category term="jekyll" /><category term="github pages" /><summary type="html"><![CDATA[Learn how to deploy your Jekyll site to GitHub Pages with our step-by-step guide. Easy instructions for hosting your site on GitHub Pages.]]></summary></entry></feed>