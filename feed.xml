<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hemimorphite.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hemimorphite.github.io/" rel="alternate" type="text/html" /><updated>2024-06-13T17:37:45+00:00</updated><id>https://hemimorphite.github.io/feed.xml</id><title type="html">Hemimorphite</title><subtitle>Gain a better understanding of mathematics, chemistry, physics, and computer science. Our tutorials provide clear explanations and practical examples to help you learn and master these subjects. Helping learners of all levels to grasp fundamental concepts and hone their skills.</subtitle><entry xml:lang="en"><title type="html">mail Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04/" rel="alternate" type="text/html" title="mail Command on Ubuntu 22.04" /><published>2024-06-13T16:55:00+00:00</published><updated>2024-06-13T16:55:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/mail-command-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">mail Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h5>Install mail Command</h5>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>When prompted to configure the postfix package, press <b>TAB</b> to select <b>Ok</b> and confirm with <b>Enter</b>.</p>

        <figure class="post-figure">
        	<img src="/assets/images/postfix-01.png" alt="Postfix Configuration">
        </figure>

        <p>Select <b>Internet Site</b> in the package configuration window. Press <b>TAB</b> to select <b>Ok</b> and press <b>Enter</b> to confirm.</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-02.png" alt="Postfix Configuration">
        </figure>

		<p>Complete the basic configuration by entering the system mail name (the machine's fully qualified domain name).</p>

		<figure class="post-figure">
        	<img src="/assets/images/postfix-03.png" alt="Postfix Configuration">
        </figure>

        <h5>mail Command Options</h5>
		
		<table>
			<thead>
				<tr>
					<th>Argument</th>
					<th>Description</th>
					<th>Example</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><code>-s</code></td>
					<td>Specifies the subject of the email.</td>
					<td><code>mail -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-c</code></td>
					<td>Sends a carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -c cc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-b</code></td>
					<td>Sends a blind carbon copy of the email to the specified address.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -b bcc@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-a</code></td>
					<td>Adds an attachment to the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -a file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-q</code></td>
					<td>Reads a message from the specified file.</td>
					<td><code>mail -s 'Subject' -q file.txt user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-r</code></td>
					<td>Specifies the return address for the email.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -r from@example.com user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-v</code></td>
					<td>Verbose mode. Displays the details of the email sending process.</td>
					<td><code>echo 'Hello' | mail -s 'Subject' -v user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-f</code></td>
					<td>Reads messages from the specified mailbox file.</td>
					<td><code>mail -f /var/mail/user</code></td>
				</tr>
				<tr>
					<td><code>-i</code></td>
					<td>Ignores lines with only a dot.</td>
					<td><code>mail -i -s 'Subject' user@example.com</code></td>
				</tr>
				<tr>
					<td><code>-E</code></td>
					<td>Does not send messages with an empty body.</td>
					<td><code>echo '' | mail -E -s 'Subject' user@example.com</code></td>
				</tr>
			</tbody>
		</table>

		<h5>mail Command Examples</h5>

		<h6>Example 1: Send Mail with Subject and Body</h6>

        <p>The basic way of using <code>mail</code> to send emails is to specify the email subject using the <code>-s</code> flag and add the recipient. The command then enters the interactive mode, asking if you want to send Ccs and asking for the email body.</p>

		<p>After entering all the information, press <b>Ctrl+D</b> to send the email.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna
Cc:
This is the email body</code></pre>
		
		<h6>Example 2: Send Mail Using echo</h6>

		<p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the echo command output to the <code>mail</code> command.</p>

		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" | mail -s "Email Subject" echidna</code></pre>
		
		<h6>Example 3: Send Email Using Redirection</h6>
		
		<p>Another way to provide the email body is to use redirection (&lt;&lt;&lt;). Using redirection also avoids the <code>mail</code> command interactive mode and sends the email without any prompts.</p>
		
		<pre><code class="language-bash hljs">[satella@ubuntu ~]$ mail -s "Email Subject" echidna &lt;&lt;&lt; "this is the email body"</code></pre>

		<h6>Example 4: Send Email from File</h6>

        <p>The <code>mail</code> command allows users to provide the email body from an existing file. This option saves time and facilitates sending large messages without writing them in the command line.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~]$ echo "This is the email body" > file.txt
[satella@ubuntu ~]$ mail -s "Email Subject" echidna < file.txt</code></pre>
		
		<h6>Example 4: Read Mail</h6>

        <p>Check the mailbox for the current user by running the <code>mail</code> command without any options or flags.</p>
        
		<pre><code class="language-bash hljs">[minerva@ubuntu ~]$ mail
"/var/mail/minerva": 8 messages 8 new
U   1 satella@ubuntu Thu Jun 13 20:52  17/532   this is email subject
U   2 satella@ubuntu Thu Jun 13 20:54  16/488   this is email subject
U   3 satella@ubuntu Thu Jun 13 20:58  16/488   this is email subject
U   4 satella@ubuntu Thu Jun 13 20:59  16/488   this is email subject
U   5 satella@ubuntu Thu Jun 13 21:02  16/488   this is email subject
U   6 satella@ubuntu Thu Jun 13 21:05  16/492   this is email subject 1
U   7 satella@ubuntu Thu Jun 13 21:06  16/492   this is email subject 1
U   8 satella@ubuntu Thu Jun 13 22:07  16/416   Subject
?</code></pre>
		
		<p>To open an email, enter the email number and press Enter. For example, we will open email number 8:</p>

		<pre><code class="language-bash hljs">? 8
Return-Path: &lt;satella@ubuntu&gt;
X-Original-To: minerva
Delivered-To: minerva@ubuntu
Received: by ubuntu (Postfix, from userid 1001)
	id 453F4A257B; Thu, 13 Jun 2024 22:07:00 +0700 (WIB)
Subject: Subject
To: minerva@ubuntu
User-Agent: mail (GNU Mailutils 3.14)
Date: Thu, 13 Jun 2024 22:07:00 +0700
Message-Id: &lt;20240613150700.453F4A257B@ubuntu&gt;
From: satella@ubuntu
X-UID: 8
Status: O

?</code></pre>

        <p>After opening the email, the command waits for further input from the user. Open the next email by entering (+) in the prompt, or access the previous email by entering (-). Return to the mailbox by pressing Ctrl+D.</p>

		<h6>Example 5: Delete Mail</h6>
		
		<p>To delete an email, open the email you want to delete, press <code>d</code>, and confirm with Enter. To delete multiple emails at once, open the mailbox and enter <code>d</code> followed by the email numbers you want to delete.</p>
		
		<p>For example, the following command deletes emails numbered 1 and 2:</p>

        <pre><code class="language-bash hljs">d 1 2</code></pre>
		
		<p>To delete a range of emails, specify the first and last email in the range separated by a dash. For example, to delete emails 1-10, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d 1-10</code></pre>

        <p>To delete all received mail, open the mailbox and run:</p>

        <pre><code class="language-bash hljs">d*</code></pre>

	</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/mail" class="tag">mail</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="ubuntu 22.04" /><category term="mail" /><summary type="html"><![CDATA[Learn how to use the mail command on Ubuntu 22.04 with this detailed guide. Includes examples and usage tips to help you master email management from the command line.]]></summary></entry><entry xml:lang="en"><title type="html">Bourne Shell Environment Variables</title><link href="https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables/" rel="alternate" type="text/html" title="Bourne Shell Environment Variables" /><published>2024-06-13T14:21:00+00:00</published><updated>2024-06-13T14:21:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/13/bourne-shell-environment-variables/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Bourne Shell Environment Variables</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 13, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>The shell uses the following environment variables.</p>

        <h5>CDPATH</h5>

        <p>A colon-separated list of directories used as a search path for the <code>cd</code> builtin command.</p>

        <p>If the target directory of the <code>cd</code> command is specified as a relative path name, the <code>cd</code> command first looks for the target directory in the current directory (<code>.</code>). If the target is not found, the path names listed in the <code>CDPATH</code> variable are searched consecutively until the target directory is found and the directory change is completed. If the target directory is not found, the current working directory is left unmodified. For example, the <code>CDPATH</code> variable is set to <code>/home/hemimorphite</code>, and four directories exist under <code>/home/hemimorphite</code>, <code>layouts</code>, <code>posts</code>, <code>assets</code> and <code>vendors</code>. If you are in the <code>/home/hemimorphite/posts</code> directory and type <code>cd vendors</code>, you change directories to <code>/home/hemimorphite/vendors</code>, even though you do not specify a full path.</p>

        <h5>HOME</h5>

        <p>The current user's home directory; the default for the <code>cd</code> builtin command. The value of this variable is also used by tilde expansion (<code>~</code>).</p>

        <pre><code class="language-bash hljs">cd $HOME
# OR
cd ~</code></pre>

        <h5>IFS</h5>
        
        <p>A list of characters that separate fields; used when the shell splits words as part of expansion.</p>

        <p>The default value is a space, a tab, and a newline (<code>IFS=$' \t\n'</code>).</p>

        <p>You can print it with the following command:</p>

        <pre><code class="language-bash hljs">cat -etv &lt;&lt;&lt;"$IFS"</code></pre>

        <p>You should see something as follows on your Linux terminal:</p>

        <pre><code class="language-bash hljs"> ^I$
$</code></pre>

        <p>The <code>IFS</code> variable is commonly used with <code>read</code> command, parameter expansions and command substitution.</p>
        
        <p>In the <code>read</code> command, if multiple variable-name arguments are specified, <code>IFS</code> is used to split the line of input so that each variable gets a single field of the input. (The last variable gets all the remaining fields, if there are more fields than variables.) Any whitespace characters in <code>IFS</code> will be trimmed from the beginning and end of the input line, even when only one variable is given.</p>

        <pre><code class="language-bash hljs"># Using default IFS=$' \t\n'
[hemimorphite@ubuntu ~]$ read -r a b c &lt;&lt;&lt; '   A      B  C'
[hemimorphite@ubuntu ~]$ echo "$a $b $c"
A B C</code></pre>

        <pre><code class="language-bash hljs"># Using a custom IFS value
[hemimorphite@ubuntu ~]$ IFS=: read -r user pwhash uid gid gecos home shell \
    &lt;&lt;&lt; 'root:*:0:0:System Administrator:/var/root:/bin/sh'
[hemimorphite@ubuntu ~]$ echo "$user $pwhash $uid $gid $gecos $home $shell"
root * 0 0 System Administrator /var/root /bin/sh</code></pre>

        <p>If <code>IFS</code> contains a mixture of whitespace and non-whitespace characters then any non-whitespace IFS character or IFS whitespace characters (any sequence of one or more whitespace IFS characters count as single whitespace) acts as a single field delimiter. For example:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=' ,'
[hemimorphite@ubuntu ~]$ sentence="This is        a, simple,     example"
[hemimorphite@ubuntu ~]$ printf 'word -> "%s" \n' $sentence
word -> "This" 
word -> "is" 
word -> "a" 
word -> "simple" 
word -> "example"</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=$' \t\n' read -r a b c \
    &lt;&lt;&lt; 'the    plain gold      ring'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=the= =plain= =gold      ring=</code></pre>
        
        <p>The above example shows that splitting and delimiter-consolidation are not performed on the remaining part of a line when assigning excess fields to the last variable.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ IFS=: read -r a b c \
    &lt;&lt;&lt; '1:2:::3::4'
[hemimorphite@ubuntu ~]$ echo "=$a= =$b= =$c="
=1= =2= =::3::4=</code></pre>
        
        <p>Note that out of the three consecutive colons which follow field 2, precisely one colon was removed in order to terminate field 2. The remaining two colons, as well as two more colons later on, were all left untouched, and assigned to variable <code>c</code> verbatim.</p>

        <h5>OPTARG</h5>

        <p>The value of the option processed by the <code>getopts</code> builtin.</p>

        <p>Let's create a bash script called <code>command.sh</code></p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

# Parse command-line options
while getopts ":f:d:" flag; do
    case $flag in
    f) echo "The filename is: ${OPTARG}"
      ;;
    d) echo "The directory is: ${OPTARG}"
    esac
done</code></pre>

        <p>The Bash script utilizes the <code>getopts</code> command to parse command-line options. It specifies two options, <code>-f</code>  and <code>-d</code> in the optstring. As there is a colon (:) after both options, if triggered each of them requires an argument.</p>

        <p>Inside the loop, a <code>case</code> statement is used to check the currently processed option. If the option <code>-f</code> is encountered, the script prints out the filename specified with the option using the special variable <code>OPTARG</code>. Similarly, if the option <code>-d</code> is found, the script displays the directory provided with the option using <code>OPTARG</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -f file1.txt -d /home hemimorphite
The filename is: file1.txt
The directory is: /home hemimorphite</code></pre>
        
        <h5>OPTERR</h5>
        
        <p><code>OPTERR</code> controls if Bash displays errors generated by the <code>getopts</code> builtin command. <code>getopts</code> does not print errors if <code>OPTERR</code> has a value of <code>0</code>. Value <code>1</code> enables the errors.</p>

        <p>The default value is <code>1</code>.</p>

        <h5>OPTIND</h5>

        <p>The index of the next parameter/argument processed by the <code>getopts</code> builtin.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ cat command.sh
#!/bin/bash

while getopts "ab:c" flag; do
    echo "$flag" "$OPTIND" "$OPTARG"
done</code></pre>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -ac -b value1
a 1
c 2
b 4 value1</code></pre>

        <p>In <code>./command.sh -ac -b value1</code>, arg1 is <code>-ac</code>, arg2 is <code>-b</code>, arg3 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg1. So the index stored in <code>OPTIND</code> is <code>1</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg3 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>4</code> or the index of arg4.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~]$ ./command.sh -a -c -b value1
a 2
c 3
b 5 value1</code></pre>
        
        <p>In <code>./command.sh -a -c -b value1</code>, arg1 is <code>-a</code>, arg2 is <code>-c</code>, arg3 is <code>-b</code>, arg4 is <code>value1</code>.</p>

        <p>While processing option <code>-a</code>, the next unprocessed option is <code>-c</code> which is in arg2. So the index stored in <code>OPTIND</code> is <code>2</code>. For the following option <code>-c</code>, the next unprocessed option is <code>-b</code> which is arg3. So the index stored in <code>OPTIND</code> is <code>3</code>. Finally, for the option <code>-b</code>, while processing option <code>-b</code>, arg4 (<code>value1</code>) is processed as an argument of option <code>-b</code>. That's why <code>OPTIND</code> stores <code>5</code> or the index of arg5.</p>

        <h5>PATH</h5>

        <p>A colon-separated list of directories in which the shell looks for commands. This is the variable that tells the bash shell where to find different executable files and scripts. The shell will check the directories listed in the <code>PATH</code> variable for the script you are trying to find.</p>
        
        <p>Let's say you wrote a little shell script called <code>hello</code> and have it located in a directory called <code>/home/hemimorphite/bin</code>.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ cat hello
#!/bin/bash

echo Hello "$USER"
[hemimorphite@ubuntu ~/bin]$ chmod +x hello</code></pre>
        
        <p>Add <code>/home/hemimorphite/bin</code> to the <code>$PATH</code> variable with the following command:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ export PATH=$PATH:/home/hemimorphite/bin</code></pre>

        <p>You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/bin]$ hello
Hello hemimorphite</code></pre>

        <h5>MAIL</h5>

        <p>Name of file to check for incoming mail.</p>

        <h5>MAILCHECK</h5>

        <p>defines the interval in seconds when the shell should check for mail. (default 60 seconds).</p>

        <h5>MAILPATH</h5>

        <p>List of filenames, separated by colons (:), to check for incoming mail.</p>

        <p>Run the following command to install <code>mail</code></p>

        <pre><code class="language-bash hljs">sudo apt install mailutils</code></pre>

        <p>Let us create a new user named satella, echidna, and minerva using the <code>useradd</code> command on Ubuntu:</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/satella/ -m -G sudo satella
[hemimorphite@ubuntu ~/]$ sudo passwd satella
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/echidna/ -m -G sudo echidna
[hemimorphite@ubuntu ~/]$ sudo passwd echidna
[hemimorphite@ubuntu ~/]$ sudo useradd -s /bin/bash -d /home/minerva/ -m -G sudo minerva
[hemimorphite@ubuntu ~/]$ sudo passwd minerva</code></pre>

        <p>Where,</p>

        <ul>
            <li><code>-s /bin/bash</code>, set <code>/bin/bash</code> as login shell of the new account</li>
            <li><code>-d /home/satella/</code>, set <code>/home/satella/</code> as home directory of the new Ubuntu account</li>
            <li><code>-m</code>, create the user's home directory</li>
            <li><code>-G sudo</code>, make satella user can use <code>sudo</code> command</li>
        </ul>

        <p>Switch to user satella.</p>

        <pre><code class="language-bash hljs">[hemimorphite@ubuntu ~/]$ sudo su - satella
[satella@ubuntu ~/]$ </code></pre>

        <p>Use the <code>echo</code> command to send an email without entering the interactive mode of the <code>mail</code> command. Write the email body and pipe the <code>echo</code> command output to the <code>mail</code> command.</p>

        <pre><code class="language-bash hljs">[satella@ubuntu ~/]$ echo "This is the email body" | mail -s "this is email subject" echidna, minerva</code></pre>
        
        <p>After 60 seconds (the value of <code>MAILCHECK</code>), on echidna's or minerva's prompt press <code>ENTER</code> and the prompt will print the message:</p>

        <pre><code class="language-bash hljs">You have mail in /var/mail/echidna</code></pre>

        <p>Shell will use the value of <code>MAIL</code> as the name of the file to check, unless <code>MAILPATH</code> is set; in which case, the shell will check each file in the <code>MAILPATH</code> list for new mail. You can use this mechanism to have the shell print a different message for each mail file: for each mail filename in <code>MAILPATH</code>, append a question mark followed by the message you want printed.</p>

        <p>You could define <code>MAILPATH</code> to be:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived.:\
/usr/mail/satella/minerva?There is new mail from Paul."</code></pre>

        <p>The backslashes at the end of each line allow you to continue your command on the next line. Now, if you get mail from echidna, the shell will print:</p>

        <pre><code class="language-bash hljs">Mail from Echidna has arrived.</code></pre>

        <p>You can also use the variable <code>$_</code> in the message to print the name of the current mail file or execute a command <code>$(date)</code> to displays the current date and time. For example:</p>

        <pre><code class="language-bash hljs">MAILPATH="\
/usr/mail/satella/echidna?Mail from Echidna has arrived in $_ at $(date).:\
/usr/mail/satella/minerva?There is new mail from Paul in $_ at $(date)."</code></pre>
</article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/shell-script" class="tag">shell script</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/bash" class="tag">bash</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/environment-variables" class="tag">environment variables</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-13" /><category term="ubuntu 22.04" /><category term="shell script" /><category term="bash" /><category term="environment variables" /><summary type="html"><![CDATA[Learn how to properly use Bourne Shell environment variables such as CDPATH, HOME, IFS, OPTARG, OPTERR, OPTIND, PATH, MAIL, MAILCHECK, and MAILPATH with practical examples to enhance your shell scripting skills.]]></summary></entry><entry xml:lang="en"><title type="html">Linux Signals</title><link href="https://hemimorphite.github.io/2024/06/11/linux-signals/" rel="alternate" type="text/html" title="Linux Signals" /><published>2024-06-11T15:20:00+00:00</published><updated>2024-06-11T15:20:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/11/linux-signals</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/11/linux-signals/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Linux Signals</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/clinux.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Signals are interruptions that are generated by the software and give us a way of handling asynchronous events. Those interruptions can be generated by things outside the process (like Ctrl+C from the user in the terminal) or from errors inside the process (like a math error for dividing with 0).</p>

        <p>There are 31 standard signals, numbered 1-31. Each signal is named as "SIG" followed by a suffix. Starting from version 2.2, the Linux kernel supports 33 different real-time signals. These have numbers 32-64 but programmers should instead use SIGRTMIN+n notation. Standard signals have specific purposes but the use of SIGUSR1 and SIGUSR2 can be defined by applications. Real-time signals are also defined by applications.</p>

        <table class="table table-bordered border-primary">
            <thead>
                <tr>
                    <td><strong>Number</strong></td>
                    <td><strong>Name</strong></td>
                    <td><strong>Default Action</strong></td>
                    <td><strong>Description</strong></td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td><code>SIGHUP</code></td>
                    <td>Terminate</td>
                    <td>Terminal line hangup or parent process terminated</td>
                </tr>
                <tr>
                    <td>2</td>
                    <td><code>SIGINT</code></td>
                    <td>Terminate</td>
                    <td>Interrupt from keyboard (<code>ctrl-c</code>)</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td><code>SIGQUIT</code></td>
                    <td>Terminate</td>
                    <td>Quit from keyboard (<code>ctrl-\</code>)</td>
                </tr>
                <tr>
                    <td>4</td>
                    <td><code>SIGILL</code></td>
                    <td>Terminate</td>
                    <td>Illegal instruction</td>
                </tr>
                <tr>
                    <td>5</td>
                    <td><code>SIGTRAP</code></td>
                    <td>Core</td>
                    <td>Trace trap</td>
                </tr>
                <tr>
                    <td>6</td>
                    <td><code>SIGABRT</code></td>
                    <td>Core</td>
                    <td>Signal from <code>abort</code> function</td>
                </tr>
                <tr>
                    <td>7</td>
                    <td><code>SIGBUS</code></td>
                    <td>Terminate</td>
                    <td>Bus error</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td><code>SIGFPE</code></td>
                    <td>Core</td>
                    <td>Floating-point exception</td>
                </tr>
                <tr>
                    <td>9</td>
                    <td><code>SIGKILL</code></td>
                    <td>Terminate</td>
                    <td>Kill program</td>
                </tr>
                <tr>
                    <td>10</td>
                    <td><code>SIGUSR1</code></td>
                    <td>Terminate</td>
                    <td>User-defined signal 1</td>
                </tr>
                <tr>
                    <td>11</td>
                    <td><code>SIGSEGV</code></td>
                    <td>Core</td>
                    <td>Invalid memory reference (segfault)</td>
                </tr>
                <tr>
                    <td>12</td>
                    <td><code>SIGUSR2</code></td>
                    <td>Terminate</td>
                    <td>User-defined signal 2</td>
                </tr>
                <tr>
                    <td>13</td>
                    <td><code>SIGPIPE</code></td>
                    <td>Terminate</td>
                    <td>Write in pipe with no reader</td>
                </tr>
                <tr>
                    <td>14</td>
                    <td><code>SIGALRM</code></td>
                    <td>Terminate</td>
                    <td>Timer signal from <code>alarm</code> function</td>
                </tr>
                <tr>
                    <td>15</td>
                    <td><code>SIGTERM</code></td>
                    <td>Terminate</td>
                    <td>Software termination signal</td>
                </tr>
                <tr>
                    <td>16</td>
                    <td><code>SIGSTKFLT</code></td>
                    <td>Terminate</td>
                    <td>Stack fault on coprocessor</td>
                </tr>
                <tr>
                    <td>17</td>
                    <td><code>SIGCHLD</code></td>
                    <td>Ignore</td>
                    <td>Child process has stopped or terminated</td>
                </tr>
                <tr>
                    <td>18</td>
                    <td><code>SIGCONT</code></td>
                    <td>Ignore</td>
                    <td>Continue process if stopped</td>
                </tr>
                <tr>
                    <td>19</td>
                    <td><code>SIGSTOP</code></td>
                    <td>Stop</td>
                    <td>Stop signal not from terminal</td>
                </tr>
                <tr>
                    <td>20</td>
                    <td><code>SIGTSTP</code></td>
                    <td>Stop</td>
                    <td>Stop signal from terminal (<code>ctrl-z</code>)</td>
                </tr>
                <tr>
                    <td>21</td>
                    <td><code>SIGTTIN</code></td>
                    <td>Stop</td>
                    <td>Background process read from terminal</td>
                </tr>
                <tr>
                    <td>22</td>
                    <td><code>SIGTTOU</code></td>
                    <td>Stop</td>
                    <td>Background process wrote to terminal</td>
                </tr>
                <tr>
                    <td>23</td>
                    <td><code>SIGURG</code></td>
                    <td>Ignore</td>
                    <td>Urgent condition on socket</td>
                </tr>
                <tr>
                    <td>24</td>
                    <td><code>SIGXCPU</code></td>
                    <td>Terminate</td>
                    <td>CPU time limit exceeded</td>
                </tr>
                <tr>
                    <td>25</td>
                    <td><code>SIGXFSZ</code></td>
                    <td>Terminate</td>
                    <td>File size limit exceeded</td>
                </tr>
                <tr>
                    <td>26</td>
                    <td><code>SIGVTALRM</code></td>
                    <td>Terminate</td>
                    <td>Virtual timer expired</td>
                </tr>
                <tr>
                    <td>27</td>
                    <td><code>SIGPROF</code></td>
                    <td>Terminate</td>
                    <td>Profiling timer expired</td>
                </tr>
                <tr>
                    <td>28</td>
                    <td><code>SIGWINCH</code></td>
                    <td>Ignore</td>
                    <td>Window size changed</td>
                </tr>
                <tr>
                    <td>29</td>
                    <td><code>SIGIO</code></td>
                    <td>Terminate</td>
                    <td>I/O now possible on a descriptor</td>
                </tr>
                <tr>
                    <td>30</td>
                    <td><code>SIGPWR</code></td>
                    <td>Terminate</td>
                    <td>Power failure</td>
                </tr>
                <tr>
                    <td>31</td>
                    <td><code>SIGSYS</code></td>
                    <td>Terminate</td>
                    <td>Bad system call</td>
                </tr>
            </tbody>
        </table>


        <p>Signals can be delivered to a process at any time during its execution, launched by events like user actions, hardware exceptions, or even more inter-process communication.</p>

        <p>Signals can interrupt the normal flow of a process and require the process to handle or respond to the signal appropriately.</p>

        <p>Signals are delivered by the operating system to the target process.</p>

        <p>When a signal is generated, the operating system identifies the target process based on its process ID (PID).</p>
        
        <p>The operating system then interrupts the execution of the target process and delivers the signal by invoking the corresponding signal handler or performing the default action associated with the signal.</p>

        <p>Signals can be delivered by various sources, including the user, hardware exceptions, or other processes involved in inter-process communication.</p>

        <p>The delivery of signals involves coordination between the operating system and the target process.</p>
        
        <p>The operating system is responsible for identifying the target process, interrupting its execution, and delivering the signal, while the process handles the signal by executing the corresponding signal handler or default action.</p>

        <p>Here are some common default actions:</p>

        <ul>
            <li>Termination Signals
                <ul>
                    <li><code>SIGINT</code> (Interrupt): The process is terminated. This signal is generated by pressing Ctrl+C.</li>
                </ul>
            </li>
            <li>Termination with Core Dump Signals<br>
                A core dump is a file that contains a snapshot of a program's memory at the time of a crash or termination due to a critical error. It includes information about memory, registers, and program state.
                <ul>
                    <li><code>SIGQUIT</code> (Quit): The process is terminated. This signal is triggered by pressing Ctrl+\ on the keyboard. A core dump is generated.</li>
                    <li><code>SIGILL</code> (Illegal Instruction): The process is terminated with a core dump, indicating an illegal instruction.</li>
                    <li><code>SIGABRT</code> (Abort): The process is terminated with a core dump, usually when an internal error or inconsistency is detected.</li>
                    <li><code>SIGFPE</code> (Floating-Point Exception): The process is terminated with a core dump when a floating-point arithmetic exception occurs, such as division by zero.</li>
                    <li><code>SIGSEGV</code> (Segmentation Fault): The default action for this signal is to terminate the process and generate a core dump. It occurs when the program attempts to access a memory location that it is not allowed to access, such as accessing an invalid pointer or accessing memory that has not been allocated.</li>
                </ul>
            </li>
            <li>Ignored Signals
                <ul>
                    <li><code>SIGCHLD</code> (Child Status Changed): The signal is ignored, indicating that the process does not want to be notified when child processes terminate.</li>
                    <li><code>SIGURG</code> (Urgent Condition on Socket): The signal is ignored, typically used for out-of-band data in socket communication.</li>
                </ul>
            </li>
            <li>Stop Signals
                <ul>
                    <li><code>SIGSTOP</code> (Stop): The process is stopped (paused) and can be resumed later using SIGCONT.</li>
                    <li><code>SIGTSTP</code> (Terminal Stop): The process is stopped (paused) by the user, typically through the Ctrl+Z combination.</li>
                </ul>
            </li>
            <li>Continue Signal
                <ul>
                    <li><code>SIGCONT</code> (Continue): The process is resumed after being stopped or paused.</li>
                </ul>
            </li>
        </ul>

        <p>The purpose of signals is multifaceted and serves several important functions:</p>

        <ul>
            <li>Notify processes about events or conditions
                <ul>
                    <li>Example 1: for a user action, sending a <code>SIGINT</code> signal (Ctrl+C) to notify a process to terminate gracefully in response to a user interrupt.</li>
                    <li>Example 2: for a hardware exception, sending a <code>SIGFPE</code> signal, which indicates a floating-point arithmetic exception ( → division by zero).</li>
                </ul>
            </li>
            <li>Handle asynchronous events efficiently
                <ul>
                    <li>Example: receiving a <code>SIGALRM</code> signal to handle a timer or alarm event, allowing the process to perform a specific action after a specified time interval.</li>
                </ul>
            </li>
            <li>Handle exceptional situations or errors
                <ul>
                    <li>Example: catching a <code>SIGSEGV</code> signal (segmentation fault) to handle a memory access violation, enabling the process to log the error and gracefully recover or terminate.</li>
                </ul>
            </li>
            <li>Facilitate inter-process communication
                <ul>
                    <li>Example: sending a <code>SIGUSR1</code> signal from one process to another as a custom communication mechanism, indicating a request for specific actions or data exchange between the processes.</li>
                </ul>
            </li>
            <li>Enable graceful termination of processes
                <ul>
                    <li>Example: receiving a <code>SIGTERM</code> signal to initiate a graceful termination process, allowing the process to perform cleanup tasks, release resources, and exit gracefully.</li>
                </ul>
            </li>
            <li>Allow for custom behavior in response to signals
                <ul>
                    <li>Example: registering a signal handler for a custom signal, such as <code>SIGUSR2</code>, to define a specific action that the process should take when receiving that signal, tailored to the specific needs of the application.</li>
                </ul>
            </li>
        </ul>

        <p>To create a signal in C, you can use the <code>kill()</code> or <code>raise()</code> functions. To send a signal from one process to another process, you can use the <code>kill()</code> function. To send a signal to itself, a process can use the <code>raise()</code> function.</p>

        <p>Here's an example of using <code>kill()</code> to send a <code>SIGTERM</code> signal to a process with a specific PID:</p>

        <pre><code class="language-bash hljs">#include &lt;sys/types.h&gt;
#include &lt;signal.h&gt;

int main() 
{
    pid_t pid = 1234; /* Replace it with the target process ID */

    /* Send SIGTERM signal to the process */
    int result = kill(pid, SIGTERM);
    
    if (result == 0) 
    {
        printf("Signal successfully sent.\n");
    }
    else 
    {
        printf("Failed to send signal.\n");
    }
    
    return 0;
}</code></pre>

        <p>Here's an example of using raise() to send a SIGINT signal to the current process:</p>

        <pre><code class="language-bash hljs">#include &lt;signal.h&gt;

int main() 
{
    /* Send SIGINT signal to the current process */
    raise(SIGINT);
    
    return 0;
}</code></pre>  
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/signal" class="tag">signal</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/c" class="tag">c</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-11" /><category term="linux" /><category term="signal" /><category term="c" /><summary type="html"><![CDATA[Linux signals are a fundamental feature of the Linux operating system that allow processes to communicate with each other. This article explains how signals work in Linux and how they can be utilized.]]></summary></entry><entry xml:lang="en"><title type="html">Exit Codes In Bash Scripting</title><link href="https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting/" rel="alternate" type="text/html" title="Exit Codes In Bash Scripting" /><published>2024-06-11T12:10:00+00:00</published><updated>2024-06-11T12:10:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/11/exit-codes-in-bash-scripting/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Exit Codes In Bash Scripting</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 11, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/bashscripting.jfif" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Every Linux or Unix command executed by the shell script or user, has an exit status. The exit status is an integer number. For the bash shell's purposes, a command which exits with a zero (0) exit status has succeeded. A non-zero (1-255) exit status indicates failure. All of the Bash builtins return exit status of zero if they succeed and a non-zero status on failure.</p>

        <p>You can use special shell variable called <code>$?</code> to get the exit status of the previously executed command.</p>

        <p>List of reserved exit codes for bash scripting.</p>

        <table class="table table-bordered border-primary">
            <thead>
                <th>Exit Code Number</th>
                <th>Meaning</th>
                <th>Description</th>
            </thead>
            <tbody>
            <tr>
                <td>1</td>
                <td>Catchall for general errors</td>
                <td>Miscellaneous errors, such as divide by zero and other impermissible operations</td>
            </tr>
            <tr>
                <td>2</td>
                <td>Misuse of shell builtins</td>
                <td>Invalid option of bash builtin, trying to access a file or directory that doesn't exist or requires permissions</td>
            </tr>
            <tr>
                <td>126</td>
                <td>Command invoked can't be executed</td>
                <td>Permission problem or command is not an executable</td>
            </tr>
            <tr>
                <td>127</td>
                <td>Command not found</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>128</td>
                <td>Invalid argument to <code>exit</code></td>
                <td><code>exit</code> takes only integer args in the range 0 - 255 </td>
            </tr>
            <tr>
                <td>128+n</td>
                <td>Fatal error signal "n"</td>
                <td>In Linux, programs might send one of 31 different standard signals. When a program terminates after receiving one of these signals, it returns an error code equal to 128 + signal-number.</td>
            </tr>
            </tbody>
        </table>

        <p>According to the above table, exit codes 1 - 2, and 126 - 165 have special meanings, and should therefore be avoided for user-specified exit parameters.</p>

        <p>Let's simulate the exit codes</p>

        <h6>General Error: 1</h6>

        <pre><code class="language-bash hljs">$ echo $((10 / 0))
bash: 10 / 0: division by 0 (error token is "0")
$ echo $?
1</code></pre>

        <h6>Misuse of Shell Built-in: 2</h6>

        <pre><code class="language-bash hljs">$ ls nonexistdirectory/
ls: cannot access 'nonexistdirectory/': No such file or directory
$ echo $?
2</code></pre>
        
        <h6>Cannot Execute: 126</h6>

        <pre><code class="language-bash hljs">$ cat nonexecutablescript.sh
#!/bin/bash

echo hello
$ chmod -x nonexecutablescript.sh
$ ./nonexecutablescript.sh
bash: ./nonexecutablescript.sh: Permission denied
$ echo $?
126</code></pre>
        
        <h6>Command Not Found: 127</h6>

        <pre><code class="language-bash hljs">$ execute
bash: execute: command not found
$ echo $?
127</code></pre>

        <h6>Fatal Error Signal n: 128+n</h6>
        
        <p>When we terminate a program by using Ctrl+C, we effectively send it a <code>SIGINT</code> signal. This signal has a value of 2. Therefore, the program will stop executing and return an exit code with a value 128 + 2 = 130.</p>

        <pre><code class="language-bash hljs">$ ^C
$ echo $?
130</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/shell-script" class="tag">shell script</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/bash" class="tag">bash</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-11" /><category term="ubuntu 22.04" /><category term="shell script" /><category term="bash" /><summary type="html"><![CDATA[Learn about exit codes in Bash scripts, including a comprehensive list of common exit codes and their meanings to help you troubleshoot and debug your bash scripts effectively.]]></summary></entry><entry xml:lang="en"><title type="html">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04" /><published>2024-06-10T12:00:00+00:00</published><updated>2024-06-10T12:00:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/build-powershell-version-7.4.2-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/dotnet.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Step 1: Get the PowerShell version 7.4.2 release</h4>

        <p>Download a release version of PowerShell <code>powershell-7.4.2-linux-x64.tar.gz
        </code> from <a href="https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz">Github</a></p>

        <pre><code class="language-bash hljs">wget https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz</code></pre>

        <p>Create powershell directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/powershell-7.4.2</code></pre>

        <p>Extract the files in <code>powershell-7.4.2-linux-x64.tar.gz</code> to <code>/opt/powershell-7.4.2</code></p>

        <pre><code class="language-bash hljs">sudo tar -zxf powershell-7.4.2-linux-x64.tar.gz -C /opt/powershell</code></pre>

        <p>Install PowerShell using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/pwsh pwsh /opt/powershell-7.4.2/pwsh 10</code></pre>

        <h4>Step 2: Install Prerequisite Packages</h4>

        <p>Install the prerequisite packages for running <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">sudo apt install -y libicu-dev</code></pre>

        <p>Install the prerequisite packages for building powershell from source.</p>

        <pre><code class="language-bash hljs">sudo apt install -y git</code></pre>

        <p>Download dotnet SDK Version 8.0.204 from <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">Microsoft</a></p>

        <pre><code class="language-bash hljs">wget https://download.visualstudio.microsoft.com/download/pr/0a1b3cbd-b4af-4d0d-9ed7-0054f0e200b4/4bcc533c66379caaa91770236667aacb/dotnet-sdk-8.0.204-linux-x64.tar.gz</code></pre>

        <p>Create dotnet directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Extract the files to <code>/opt</code> directory.</p>

        <pre><code class="language-bash hljs">sudo tar -zxf dotnet-sdk-8.0.204-linux-x64.tar.gz -C /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Install dotnet using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/dotnet dotnet /opt/dotnet-sdk-8.0.204/dotnet 10</code></pre>

        <h4>Step 3: Download PowerShell's sources</h4>

        <p>Clone the PowerShell repository from <a href="https://github.com/PowerShell/PowerShell">Github</a>.</p>

        <pre><code class="language-bash hljs">git clone https://github.com/PowerShell/PowerShell.git</code></pre>

        <p>Check out a tag version 7.4.2:</p>

        <pre><code class="language-bash hljs">git checkout tags/v7.4.2</code></pre>

        <p>Change directory to powershell source directory.</p>

        <pre><code class="language-bash hljs">cd PowerShell-7.4.2</code></pre>

        <h4>Step 4: Build PowerShell's sources</h4>

        <p>Run <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">pwsh</code></pre>

        <p>Then run the following commands for building the PowerShell source.</p>

        <pre><code class="language-bash hljs">Import-Module ./build.psm1
Start-PSBuild</code></pre>
        
        <p>If everything went right, PowerShell is now built. The <code>Start-PSBuild</code> script will output the location of the executable:</p>

        <pre><code class="language-bash hljs">./src/powershell-unix/bin/Debug/net8.0/linux-x64/pwsh</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/powershell" class="tag">powershell</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/dotnet" class="tag">dotnet</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="ubuntu 22.04" /><category term="powershell" /><category term="dotnet" /><summary type="html"><![CDATA[Learn how to build PowerShell version 7.4.2 on Ubuntu 22.04 with step-by-step instructions and guidelines. Master the process of compiling and installing PowerShell on your Ubuntu system.]]></summary></entry><entry xml:lang="en"><title type="html">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/10/build-coffeescript-from-source-on-ubuntu-22.04/" rel="alternate" type="text/html" title="Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04" /><published>2024-06-10T12:00:00+00:00</published><updated>2024-06-10T12:00:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/build-coffeescript-from-source-on-ubuntu-22.04</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/build-coffeescript-from-source-on-ubuntu-22.04/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Build PowerShell Version 7.4.2 From Source On Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/dotnet.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <h4>Step 1: Get the PowerShell version 7.4.2 release</h4>

        <p>Download a release version of PowerShell <code>powershell-7.4.2-linux-x64.tar.gz
        </code> from <a href="https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz">Github</a></p>

        <pre><code class="language-bash hljs">wget https://github.com/PowerShell/PowerShell/releases/download/v7.4.2/powershell-7.4.2-linux-x64.tar.gz</code></pre>

        <p>Create powershell directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/powershell-7.4.2</code></pre>

        <p>Extract the files in <code>powershell-7.4.2-linux-x64.tar.gz</code> to <code>/opt/powershell-7.4.2</code></p>

        <pre><code class="language-bash hljs">sudo tar -zxf powershell-7.4.2-linux-x64.tar.gz -C /opt/powershell</code></pre>

        <p>Install PowerShell using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/pwsh pwsh /opt/powershell-7.4.2/pwsh 10</code></pre>

        <h4>Step 2: Install Prerequisite Packages</h4>

        <p>Install the prerequisite packages for running <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">sudo apt install -y libicu-dev</code></pre>

        <p>Install the prerequisite packages for building powershell from source.</p>

        <pre><code class="language-bash hljs">sudo apt install -y git</code></pre>

        <p>Download dotnet SDK Version 8.0.204 from <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">Microsoft</a></p>

        <pre><code class="language-bash hljs">wget https://download.visualstudio.microsoft.com/download/pr/0a1b3cbd-b4af-4d0d-9ed7-0054f0e200b4/4bcc533c66379caaa91770236667aacb/dotnet-sdk-8.0.204-linux-x64.tar.gz</code></pre>

        <p>Create dotnet directory.</p>

        <pre><code class="language-bash hljs">sudo mkdir /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Extract the files to <code>/opt</code> directory.</p>

        <pre><code class="language-bash hljs">sudo tar -zxf dotnet-sdk-8.0.204-linux-x64.tar.gz -C /opt/dotnet-sdk-8.0.204</code></pre>

        <p>Install dotnet using <code>update-alternatives</code> command with <code>--install</code> option.</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/dotnet dotnet /opt/dotnet-sdk-8.0.204/dotnet 10</code></pre>

        <h4>Step 3: Download PowerShell's sources</h4>

        <p>Clone the PowerShell repository from <a href="https://github.com/PowerShell/PowerShell">Github</a>.</p>

        <pre><code class="language-bash hljs">git clone https://github.com/PowerShell/PowerShell.git</code></pre>

        <p>Check out a tag version 7.4.2:</p>

        <pre><code class="language-bash hljs">git checkout tags/v7.4.2</code></pre>

        <p>Change directory to powershell source directory.</p>

        <pre><code class="language-bash hljs">cd PowerShell-7.4.2</code></pre>

        <h4>Step 4: Build PowerShell's sources</h4>

        <p>Run <code>pwsh</code> command.</p>

        <pre><code class="language-bash hljs">pwsh</code></pre>

        <p>Then run the following commands for building the PowerShell source.</p>

        <pre><code class="language-bash hljs">Import-Module ./build.psm1
Start-PSBuild</code></pre>
        
        <p>If everything went right, PowerShell is now built. The <code>Start-PSBuild</code> script will output the location of the executable:</p>

        <pre><code class="language-bash hljs">./src/powershell-unix/bin/Debug/net8.0/linux-x64/pwsh</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/powershell" class="tag">powershell</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/dotnet" class="tag">dotnet</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="ubuntu 22.04" /><category term="powershell" /><category term="dotnet" /><summary type="html"><![CDATA[Learn how to build PowerShell version 7.4.2 on Ubuntu 22.04 with step-by-step instructions and guidelines. Master the process of compiling and installing PowerShell on your Ubuntu system.]]></summary></entry><entry xml:lang="en"><title type="html">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</title><link href="https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/" rel="alternate" type="text/html" title="Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04" /><published>2024-06-10T06:50:00+00:00</published><updated>2024-06-10T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command</id><content type="html" xml:base="https://hemimorphite.github.io/2024/06/10/manage-multiple-versions-of-packages-with-update-alternatives-command/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Manage Multiple Versions of Packages with update-alternatives Command on Ubuntu 22.04</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published June 10, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/ubuntu2204.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p><code>update-alternatives</code> is a command line utility in Linux systems that is used to maintain symbolic links for determining the default commands. It is commonly used in systems with multiple versions of the same command installed, such as different versions of Java, Python, or editors like Vim or Emacs. <code>update-alternatives</code> allows you to choose which version of the command should be used as the default system-wide.</p>

        <p>When you install multiple versions of a command or program, they are usually installed in different directories. <code>update-alternatives</code> creates symbolic links in the system's <code>bin</code> directories (e.g., <code>/usr/bin</code>) to point to the specific version of the program you want to use. These symbolic links are used as the default command when you run the command's name in the terminal.</p>

        <p>For example, suppose you have multiple versions of Java installed on your system, such as Java 17, 21, and 22. If you want to use Java 21 as the default Java version, you can use the <code>update-alternatives</code> command to create a symbolic link for the <code>java</code> command to point to the Java 21 binary. This will make Java 21 the default version that is used when you run <code>java</code> in the terminal.</p>

        <p>Download multiple versions of Java using <code>wget</code> command.</p>

        <pre><code class="language-bash hljs">wget https://download.oracle.com/java/22/latest/jdk-22_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</code></pre>
        
        <p>Extract it to <code>opt</code> directory</p>

        <pre><code class="language-bash hljs">sudo tar -zxf jdk-22_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-21_linux-x64_bin.tar.gz -C /opt
sudo tar -zxf jdk-17_linux-x64_bin.tar.gz -C /opt</code></pre>
        
        <p>Install multiple versions of Java using <code>update-alternatives</code> command with <code>--install</code> option.</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --install /usr/bin/java java /opt/jdk-17.0.11/bin/java 10
sudo update-alternatives --install /usr/bin/java java /opt/jdk-21.0.3/bin/java 20
sudo update-alternatives --install /usr/bin/java java /opt/jdk-22.0.1/bin/java 30</code></pre>
        
        <p><code>/usr/bin/java</code> is the path of the symlink, <code>java</code> is the name of the symlink, <code>/opt/jdk-17.0.11/bin/java</code> is the path of the binary file for which you want to create the symbolic link, <code>10</code> is the priority.</p>

        <p>To list all entries of alternatives in the system, use</p>
        
        <pre><code class="language-bash hljs">sudo update-alternatives --get-selections</code></pre>
        
        <p>To list all alternatives of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --list java</code></pre>
        
        <p>In automatic mode, the alternatives pointed to java version which have the highest priority. To switch to automatic mode, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --auto java</code></pre>
        
        <p>To remove an alternative of java, use</p>

        <pre><code class="language-bash hljs">sudo update-alternatives --remove java /opt/jdk-17.0.11/bin/java</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/ubuntu-22-04" class="tag">ubuntu 22.04</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/update-alternatives" class="tag">update-alternatives</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-06" /><category term="day-10" /><category term="ubuntu 22.04" /><category term="update-alternatives" /><summary type="html"><![CDATA[Learn how to effectively manage multiple versions of packages using the update-alternatives command in Ubuntu 22.04. This command allows you to easily switch between different versions of software packages on your system.]]></summary></entry><entry xml:lang="en"><title type="html">Difference Between Git Merge and Git Rebase</title><link href="https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase/" rel="alternate" type="text/html" title="Difference Between Git Merge and Git Rebase" /><published>2024-05-04T06:50:00+00:00</published><updated>2024-05-04T06:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/04/difference-between-git-merge-and-git-rebase/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Difference Between Git Merge and Git Rebase</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 04, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/git.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Managing repository history is one of the critical parts of keeping your code base scalable. Many approaches might be helpful in one case and not work in another.</p>
        
        <p><code>git rebase</code> and <code>git merge</code> are two git utilities that are designed to combine commit history from one branch to another branch.</p>

        <h4>Git Merge</h4>

        <p><code>git merge</code> is a command used to combine changes from two or more branches into a single branch. When a merge is performed, Git creates a new commit that incorporates the changes from both branches. The resulting commit history looks like a tree, with multiple branches merging into a single trunk.</p>

        <p>To perform a merge, first, ensure you are on the branch that you want to merge changes into (e.g., <code>main</code> branch). Then, run the following command:</p>

        <pre><code class="language-bash hljs">git merge &lt;branch-name&gt;</code></pre>

        <p>where <code>&lt;branch-name&gt;</code> is the name of the branch containing the changes you want to merge. Git will create a new merge commit that combines the changes from both branches. If there are conflicts between the changes in the two branches, Git will prompt you to resolve them before the merge can be completed.</p>

        <p>There are two types of merge:</p>

        <ol>
            <li>Fast-forward merge</li>
            <li>Three-way merge</li>
        </ol>

        <h5>Fast-forward Merge</h5>

        <p>Imagine we are having two branches:</p>

        <ol>
            <li>Parent branch (<code>main</code>)</li>
            <li>Child branch (<code>feature</code>)</li>
        </ol>

        <p>We made changes and commits to the <code>main</code> branch.</p>

        <p>At the second commit on <code>main</code> branch the <code>feature</code> branch got created, and then we made changes and commits to the <code>feature</code> branch only. We didn't make any changes and commits on the <code>main</code> branch.</p>

        <p>If there will be only two branches <code>main</code> and <code>feature</code>, and no new changes and commits have been performed on your <code>main</code> branch since the <code>feature</code> branch got created in this case git will perform fast-forward merge.</p>

        <p>In the Fast-forward merge, git simply moves the pointer from the <code>main</code> branch to the last commit of the <code>feature</code> branch.</p>

        <figure class="post-figure">
            <img src="/assets/images/git-28.jpg" alt="Fast-forward Merge">
        </figure>

        <p>In the Fast-forward merge, there is no chance of conflicts because the changes and commits are in the <code>feature</code> branch only, not on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projecta && cd projecta

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add a file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add some content to the home.html
echo "&lt;p&gt;content for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>

        <p>Now, there are two commits available at the <code>main</code> branch. To confirm that we'll check the log using <code>git log</code> command</p>

        <p>Now we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add some content again to the home.html
echo "&lt;p&gt;content 2 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 3"

# add some content again to the home.html
echo "&lt;p&gt;content 3 for homepage&lt;/p&gt;" &gt;&gt; home.html

# add home.html to the Staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 4"</code></pre>
        
        <p>Now, there will be four commits available at the <code>feature</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <p>Switch back to the <code>main</code> branch and merge the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>Now, there will be four commits available at the <code>main</code> branch.</p>

        <h5>Three-way Merge</h5>

        <p>Three-way merge is a common merging strategy used in Git to combine changes from two different branches or commits into a single unified result. It is designed to handle situations where multiple branches have made conflicting changes to the same file or lines of code.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-27.jpg" alt="Three-way Merge">
        </figure>

        <p>When performing a three-way merge, Git identifies three versions of the code:</p>

        <ol>
            <li>The common ancestor: This is the base version of the code that both branches originally diverged from. It represents the last common commit between the two branches.</li>
            <li>The ours version: This represents the version of the code in the branch you are currently on (usually the branch you are merging into).</li>
            <li>The theirs version: This represents the version of the code in the branch you are merging in (usually the branch being merged into the current branch).</li>
        </ol>

        <p>Git uses these three versions of the code to intelligently merge the changes. It compares the differences between the common ancestor and the ours version and also between the common ancestor and the theirs version. Then, it combines these changes, considering both sets of modifications, to create a merged version of the file.</p>

        <p>During the merge process, if there are conflicting changes (i.e., changes that overlap and cannot be automatically merged), Git will mark those conflicts and pause the merge. It prompts the user to manually resolve the conflicts by editing the affected file(s) to choose which changes to keep. Once the conflicts are resolved, the user can complete the merge by committing the changes.</p>

        <p>Now, we'll create two files named <code>home.html</code> and <code>about.html</code> and create two commits.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectb && cd projectb

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"</code></pre>  

        <p>Now, there are two commits available at the <code>main</code> branch.</p>
        
        <p>Next we'll create a <code>feature</code> branch and switch to <code>feature</code> branch.</p>
        
        <pre><code class="language-bash hljs">git checkout -b feature</code></pre>
        
        <pre><code class="language-bash hljs"># add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"</code></pre>
        
        <p>Then there will be a total of four commits at the <code>feature</code> branch. Two commits from the <code>main</code> branch and the other two commits from <code>feature</code> branch i.e. the child branch.</p>

        <p>Now we'll switch back to the <code>main</code> branch and create a file <code>contact.html</code> on the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>So, There will be three commits available at the <code>main</code> branch.</p>

        <p>Next we'll merge the <code>feature</code> branch to the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs"># switch to main branch
git switch main
            
# merge feature branch to main branch
git merge feature</code></pre>

        <p>A new commit will be created. That commit is considered as the merge commit.</p>

        <h4>Git Rebase</h4>

        <p>Rebasing is often used as an alternative to merging. Rebasing a branch updates one branch with another by applying the commits of one branch on top of the commits of another branch. For example, if working on a <code>feature</code> branch that is out of date with a <code>main</code> branch, rebasing the feature <code>feature</code> onto <code>main</code> will allow all the new commits from <code>main</code> to be included in <code>feature</code>.</p>
        
        <figure class="post-figure">
            <img src="/assets/images/git-29.jpg" alt="Rebase">
        </figure>

        <p>For the above example, this is what it looks like from the command line:</p>

        <pre><code class="language-bash hljs">git rebase feature main</code></pre>

        <p>However, it is more common to first checkout a branch and then run the rebase command with the name of the branch you wish to rebase on to:</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>The golden rule of <code>git rebase</code> is to never use it on public branches.</p>

        <p>For example, think about what would happen if you rebased <code>main</code> onto your <code>feature</code> branch. The rebase moves all of the commits in <code>main</code> onto the tip of <code>feature</code>. The problem is that this only happened in your repository. All of the other developers are still working with the original <code>main</code>.</p>

        <pre><code class="language-bash hljs"># make a repo directory
mkdir projectc && cd projectc

# initialize the repo and specify the initial branch name
git init --initial-branch=main

# add home.html file
touch home.html && echo "&lt;h1&gt;Header for homepage&lt;/h1&gt;" &gt; home.html

# add home.html to the staging area
git add home.html

# commit that file to the Local Repository
git commit -m "commit 1"

# add about.html
touch about.html && echo "&lt;h1&gt;Header for about&lt;/h1&gt;" &gt; about.html

# add about.html to the staging area
git add about.html

# commit that file to the Local Repository
git commit -m "commit 2"

# create feature branch and switch to it
git checkout -b feature

# add page1.html file
touch page1.html && echo "&lt;h1&gt;Header for page 1&lt;/h1&gt;" &gt; page1.html

# add page1.html to the staging area
git add page1.html

# commit that file to the Local Repository
git commit -m "child commit 1"

# add about.html
touch page2.html && echo "&lt;h1&gt;Header for page 2&lt;/h1&gt;" &gt; page2.html

# add about.html to the staging area
git add page2.html

# commit that file to the Local Repository
git commit -m "child commit 2"

# switch to main branch
git checkout main

# add contact.html file
touch contact.html && echo "&lt;h1&gt;Header for contact&lt;/h1&gt;" &gt; contact.html

# add contact.html to the staging area
git add contact.html

# commit that file to the Local Repository
git commit -m "commit 3"</code></pre>

        <p>Now we come back to the <code>feature</code> branch, but we want to have a linear history, moving the <code>feature</code> to the tip of <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout feature
git rebase main</code></pre>

        <p>To confirm that we'll check the log using <code>git log</code> command</p>

        <pre><code class="language-bash hljs">git log --graph</code></pre>

        <figure class="post-figure">
            <img src="/assets/images/git-30.png" alt="linear history">
        </figure>

        <p>Having a linear history, we can do a fast-forward merge by merging the <code>feature</code> branch with the <code>main</code> branch.</p>

        <pre><code class="language-bash hljs">git checkout main
git merge feature</code></pre>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/git" class="tag">git</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-merge" class="tag">git merge</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/git-rebase" class="tag">git rebase</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-04" /><category term="git" /><category term="git merge" /><category term="git rebase" /><summary type="html"><![CDATA[Understanding the difference between Git merge and Git rebase is crucial for effective version control and collaboration. Learn the distinctions between these two essential Git commands.]]></summary></entry><entry xml:lang="en"><title type="html">List of Common WSL Commands</title><link href="https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands/" rel="alternate" type="text/html" title="List of Common WSL Commands" /><published>2024-05-01T07:28:00+00:00</published><updated>2024-05-01T07:28:00+00:00</updated><id>https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands-</id><content type="html" xml:base="https://hemimorphite.github.io/2024/05/01/list-of-common-wsl-commands/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">List of Common WSL Commands</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published May 01, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/wsldistribution.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>Here is a list of some of the most common WSL commands:</p>

        <ul>
            <li><code>wsl</code>: This command will start a new WSL session</li>
            <li><code>wsl -l</code>: This command will list all of the installed WSL distributions</li>
            <li><code>wsl --list --online</code>: This command will list all of the available WSL distributions</li>
            <li><code>wsl --list --running</code>: This command will list all of the running WSL distributions</li>
            <li><code>wsl -d &lt;distribution name&gt;</code>: This command will run the specified distribution</li>
            <li><code>wsl --install &lt;distribution name&gt;</code>: This command will install the specified distribution</li>
            <li><code>wsl --unregister &lt;distribution name&gt;</code>: This command will remove the specified distribution to free up the disk space</li>
            <li><code>wsl --shutdown</code>: This command will shut down all running WSL sessions</li>
            <li><code>wsl --terminate &lt;distribution name&gt;</code>: This command will terminate the WSL session for the specified distribution</li>
            <li><code>wsl --set-version &lt;version number&gt;</code>: This command will set the default WSL version</li>
            <li><code>wsl --status</code>:  This command will display the status of all running WSL sessions</li>
            <li><code>wsl --import &lt;distribution name&gt; &lt;tarball path&gt;</tarball></code>: This command will import a new WSL distribution from a tarball file</li>
            <li><code>wsl --mount &lt;source path&gt; &lt;source path&gt;</code>: This command will mount a Windows file system path to a WSL mount point</li>
            <li><code>wsl --unmount &lt;mount point&gt;</code>: This command will unmount a WSL mount point</li>
            <li><code>wsl --default &lt;distribution name&gt;</code>: This command will set the default WSL distribution</li>
        </ul>

        <p>In WSL, your Windows drives are mounted under the <code>/mnt</code> directory. So, for example, your C drive would be available at <code>/mnt/c/</code>. <code>cd /mnt/c/Users/&lt;YourWindowsUsername&gt;/</code></p>

        <p>For WSL 2, you can access the Linux file system by navigating to <code>\\wsl$\&lt;DistributionName&gt;</code> in File Explorer.</p>

        <p>WSL configurations can be modified by editing the file: <code>C:\Users\&lt;YourWindowsUsername&gt;\.wslconfig</code>.</p>
    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/windows" class="tag">windows</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/wsl" class="tag">wsl</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-05" /><category term="day-01" /><category term="linux" /><category term="windows" /><category term="wsl" /><summary type="html"><![CDATA[Looking for a quick reference guide to WSL commands? Look no further! Our website provides a comprehensive list to help you navigate the Windows Subsystem for Linux effortlessly.]]></summary></entry><entry xml:lang="en"><title type="html">Move WSL File System to Another Drive</title><link href="https://hemimorphite.github.io/2024/04/30/move-wsl-file-system-to-another-drive/" rel="alternate" type="text/html" title="Move WSL File System to Another Drive" /><published>2024-04-30T16:50:00+00:00</published><updated>2024-04-30T16:50:00+00:00</updated><id>https://hemimorphite.github.io/2024/04/30/move-wsl-file-system-to-another-drive</id><content type="html" xml:base="https://hemimorphite.github.io/2024/04/30/move-wsl-file-system-to-another-drive/"><![CDATA[<div class="blog-post">
    <h2 class="post-title">Move WSL File System to Another Drive</h2>
<div class="post-author">
    <span class="avatar"></span>
    <span class="info"><span class="date">Published April 30, 2024</span><br><span class="name">By Samuel Yang</span></span>
</div>

<figure class="post-image">
    <img src="/assets/images/wsldistribution.jpg" alt="Blog Cover">
</figure>

    <article class="post-content">
        <p>First, you need to know the WSL distribution name which you want to move to another drive. List the installed WSL distributions on your computer:</p>

        <pre><code class="language-bash hljs"># PowerShell
wsl -l -v</code></pre>

        <p>If you are using a username different than <code>root</code>, you need to check the username:</p>
        
        <pre><code class="language-bash hljs"># Linux Terminal
whoami</code></pre>

        <p>Shut down all the WSL distros running on Windows:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
wsl --shutdown</code></pre>

        <p>Next, you are going to create a backup for your WSL distribution <code>Ubuntu</code>:</p>

        <pre><code class="language-bash hljs"># PowerShell
mkdir D:\backup
wsl --export Ubuntu D:\backup\ubuntu.tar</code></pre>
        
        <p>Wait till the WSL export is over (it may take much time). A TAR archive with your WSL distribution file system will appear in the target directory.</p>

        <p>When finished, you can remove the WSL distribution to free up the disk space</p>

        <pre><code class="language-bash hljs"># PowerShell
wsl --unregister Ubuntu</code></pre>

        <p>Create a directory for your WSL distribution on a new drive and import the TAR archive to WSL using this command:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
mkdir D:\WSL
wsl --import Ubuntu D:\WSL\ D:\backup\ubuntu.tar</code></pre>

        <p>By default Ubuntu will use <code>root</code> as the default user, to change it to another user name (we got it earlier), run:</p>
        
        <pre><code class="language-bash hljs"># PowerShell
cd $env:USERPROFILE\AppData\Local\Microsoft\WindowsApps
ubuntu config --default-user johndoe</code></pre>
        
        <p>Start the WSL distribution:</p>

        <pre><code class="language-bash hljs">wsl -d Ubuntu</code></pre>

    </article>

    <div class="post-tags">
	<div class="title">Tags</div>
	<ul class="tags">
		
		<li><a href="https://hemimorphite.github.io/tag/linux" class="tag">linux</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/windows" class="tag">windows</a></li>
		
		<li><a href="https://hemimorphite.github.io/tag/wsl" class="tag">wsl</a></li>
		
	</ul>
</div>


    <div class="post-share">
    <div class="title">Share this post</div>
    <ul class="rounded-social-buttons">
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button facebook"><i class="fab fa-facebook-f"></i></a></li>
        <li><a href="http://twitter.com/share?text=Hey+guys%2c+check+this+out!&amp;url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/&amp;hashtags=qemu,linux,fedora 38,firewalld,DHCP" class="social-button twitter"><i class="fab fa-twitter"></i></a></li>
        <li><a href="https://www.linkedin.com/sharing/share-offsite/?url=https://hemimorphite.github.io/2023/08/16/setup-fedora-server-38-as-a-dhcp-server/" class="social-button linkedin"><i class="fab fa-linkedin"></i></a></li>
    </ul>
</div>
</div>]]></content><author><name>Samuel Yang</name></author><category term="Tutorials" /><category term="year-2024" /><category term="month-04" /><category term="day-30" /><category term="linux" /><category term="windows" /><category term="wsl" /><summary type="html"><![CDATA[Learn how to move the Windows Subsystem for Linux (WSL) file system to another drive with step-by-step instructions, ensuring a smooth transition and efficient use of storage space.]]></summary></entry></feed>